[{"title":"Gaussian Filtering","url":"/undefined/Gaussian-Filtering/","content":"<h1 id=\"高斯平滑\"><a href=\"#高斯平滑\" class=\"headerlink\" title=\"高斯平滑\"></a>高斯平滑</h1><p>高斯平滑又叫高斯滤波，是一种<a href=\"https://en.wikipedia.org/wiki/Smoothing\">数据平滑技术</a>， 常用在图像模糊(Blur)中去除噪声和细节。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/Figure_5.png\" style=\"width:250px;height:250px;\"></p>\n<span id=\"more\"></span>\n<h2 id=\"1-高斯函数\"><a href=\"#1-高斯函数\" class=\"headerlink\" title=\"1.高斯函数\"></a>1.高斯函数</h2><p>高斯函数就是我们常说的高斯分布(Gaussian Distribution)，一维中，高斯函数如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20211209211532311.png\" style=\"zoom:40%\"></p>\n<p>上式中标准差为σ，平均值μ为0。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20211209214731127.png\" style=\"zoom:80%\"></p>\n<p>如图所示，高斯分布是对称的钟形，上图为均值为0，标准差为1的高斯分布也即正态分布，高斯函数的标准差在其滤波中起着重要作用。位于±σ之间的值占集合的68%，而位于±2σ之间的值占集合的95%，±3σ占99.7%，这在设计固定长度的高斯核时非常重要。</p>\n<p>其他性质：</p>\n<ul>\n<li>高斯函数在实数域的积分x∈(-∞，+∞)为1，从概率学的角度看表示所有事件集合；</li>\n<li>高斯函数的值不为零；</li>\n<li>高斯函数是对称函数，对称轴为均值。</li>\n</ul>\n<p>高斯分布的特点是在均值μ两边的概率都很大，离之越远的概率越小，所以高斯函数用在滤波上体现的思想就是：离某个点越近的点对其产生的影响越大，所以让其权重大，越远的产生的影响越小，让其权重越小。高斯滤波的关键是生成高斯核(Gaussian Kernel)。</p>\n<h2 id=\"2-高斯核-Gaussian-Kernel\"><a href=\"#2-高斯核-Gaussian-Kernel\" class=\"headerlink\" title=\"2.高斯核(Gaussian Kernel)\"></a>2.高斯核(Gaussian Kernel)</h2><p>数字滤波领域信号一般都是离散的，如一维数字信号用f(nT)进行描述，其中T为采样周期，n为时间序列。f(nT)表示第n个采样时刻的信号值。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/Figure_3.png\" style=\"zoom:70%\"></p>\n<p><strong>所谓高斯滤波操作，其实就是用高斯函数对原始信号做<a href=\"https://zh.wikipedia.org/zh/%E5%8D%B7%E7%A7%AF\">卷积</a>计算</strong>。而高斯函数是连续函数，所以我们要从连续高斯函数中采样生成离散的权重系数，即Gaussian Kernel。 高斯核是对连续高斯函数的离散近似，通常对高斯函数进行离散采样和归一化得出，这里，归一化指的是卷积核所有元素（权重系数）之和为1。下面分别为为一维和二维高斯核的例子：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20211210100939019.png\" style=\"zoom:80%\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20211210100905664.png\" style=\"zoom:%80;\"></p>\n<p>计算高斯核中，有两个重要参数：σ、<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.02ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 451 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 。σ为高斯函数的标准差；<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.02ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 451 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 为核大小。不同的σ和<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.02ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 451 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 会有不同的滤波结果。</p>\n<p>高斯核可以看成是与中心距离负相关的权重。平滑时，调整σ实际是在调整周围像素对当前像素的影响程度，<strong>调大σ即提高了远处像素对中心像素的影响程度</strong>，滤波结果也就越平滑<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.988ex\" height=\"1.904ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 436.6 841.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"TeXAtom\" transform=\"translate(33,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mn\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></g></g></g></svg></mjx-container>。高斯曲线随σ变化的曲线如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/izOixs.png\" style=\"zoom:60%\"></p>\n<p>高斯核是对连续高斯的离散近似，窗口越大自然近似越好，但高斯函数是钟形曲线，距离中心越远数值越小，足够远处可以忽略不计，钟型曲线在区间(μ−σ,μ+σ)(μ−σ,μ+σ)范围内的面积占曲线下总面积的68%，(μ−2σ,μ+2σ)范围占95%，(μ−3σ,μ+3σ)范围占99.7%，一般3σ外的数值已接近于0，可忽略，半径为3σ即窗口大小为6σ×6σ即可，通常取最近的奇数。</p>\n<h2 id=\"3-一维高斯滤波例子\"><a href=\"#3-一维高斯滤波例子\" class=\"headerlink\" title=\"3.一维高斯滤波例子\"></a>3.一维高斯滤波例子</h2><p><code>Python</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">Created on Thu Dec  9 22:22:11 2021</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@author: W-H</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> pylab <span class=\"keyword\">import</span> mpl</span><br><span class=\"line\">mpl.rcParams[<span class=\"string\">'font.sans-serif'</span>] = [<span class=\"string\">'STZhongsong'</span>]    <span class=\"comment\"># 指定默认字体：解决plot不能显示中文问题</span></span><br><span class=\"line\">mpl.rcParams[<span class=\"string\">'axes.unicode_minus'</span>] = <span class=\"literal\">False</span>           <span class=\"comment\"># 解决保存图像是负号'-'显示为方块的问题</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gauss_kernel</span>(<span class=\"params\">r, sigma, *args, **kwargs</span>):</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 生成一维高斯滤波高斯核</span></span><br><span class=\"line\"><span class=\"string\">    ---</span></span><br><span class=\"line\"><span class=\"string\">    参数</span></span><br><span class=\"line\"><span class=\"string\">    r:float</span></span><br><span class=\"line\"><span class=\"string\">        核大小，通常为基数</span></span><br><span class=\"line\"><span class=\"string\">    sigma: float</span></span><br><span class=\"line\"><span class=\"string\">        标准差</span></span><br><span class=\"line\"><span class=\"string\">    ---</span></span><br><span class=\"line\"><span class=\"string\">    输出</span></span><br><span class=\"line\"><span class=\"string\">    gauss_weight:array</span></span><br><span class=\"line\"><span class=\"string\">        高斯核</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    gauss_weight = np.zeros(<span class=\"number\">2</span>*r+<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>*(r+<span class=\"number\">1</span>), <span class=\"number\">1</span>):</span><br><span class=\"line\">        gauss_weight[i-<span class=\"number\">1</span>] = np.exp(-<span class=\"number\">1</span>*<span class=\"built_in\">pow</span>((i-r), <span class=\"number\">2</span>) /</span><br><span class=\"line\">                                   (<span class=\"number\">2</span>*<span class=\"built_in\">pow</span>(sigma, <span class=\"number\">2</span>))) / (sigma*np.sqrt(<span class=\"number\">2</span>*np.pi))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> gauss_weight</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gaussian_filtering_1</span>(<span class=\"params\">data, kernel_cof, r</span>):</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\" 一维高斯滤波</span></span><br><span class=\"line\"><span class=\"string\">    ---</span></span><br><span class=\"line\"><span class=\"string\">    参数</span></span><br><span class=\"line\"><span class=\"string\">    data: array</span></span><br><span class=\"line\"><span class=\"string\">        原始数据</span></span><br><span class=\"line\"><span class=\"string\">    kernel_cof: array</span></span><br><span class=\"line\"><span class=\"string\">        高斯核</span></span><br><span class=\"line\"><span class=\"string\">    r: float</span></span><br><span class=\"line\"><span class=\"string\">        核大小，通常为基数</span></span><br><span class=\"line\"><span class=\"string\">    ---</span></span><br><span class=\"line\"><span class=\"string\">    输出</span></span><br><span class=\"line\"><span class=\"string\">    data_f: array</span></span><br><span class=\"line\"><span class=\"string\">        滤波后数据</span></span><br><span class=\"line\"><span class=\"string\">    说明</span></span><br><span class=\"line\"><span class=\"string\">    高斯滤波是对原始数据进行核卷积运算，滤波中边界不进行处理</span></span><br><span class=\"line\"><span class=\"string\">    data = [1,2,3,4,5]</span></span><br><span class=\"line\"><span class=\"string\">    kernel_cof = [a1,a0,a1]</span></span><br><span class=\"line\"><span class=\"string\">    data_f[0] = 1 # 保留原始数据</span></span><br><span class=\"line\"><span class=\"string\">    data_f[1] = a1*data[1-1] + a0*data[1] + a1*data[1+1]</span></span><br><span class=\"line\"><span class=\"string\">    .</span></span><br><span class=\"line\"><span class=\"string\">    .</span></span><br><span class=\"line\"><span class=\"string\">    .</span></span><br><span class=\"line\"><span class=\"string\">    data[4] = 5</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    data_y = np.zeros(data.size)</span><br><span class=\"line\">    data_len = data.size</span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(data_len):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> k &lt; r <span class=\"keyword\">or</span> k &gt; data_len-r-<span class=\"number\">1</span>:</span><br><span class=\"line\">            data_y[k] = data[k]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            temp = np.dot(data[k-r:k+r+<span class=\"number\">1</span>], kernel_cof)</span><br><span class=\"line\">            data_y[k] = temp</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data_y</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_1</span>():</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成测试数据</span></span><br><span class=\"line\">    data = np.random.rand(<span class=\"number\">100</span>)</span><br><span class=\"line\">    r = <span class=\"number\">2</span></span><br><span class=\"line\">    sigma = <span class=\"number\">5</span></span><br><span class=\"line\">    gauss_cof = gauss_kernel(r, sigma)</span><br><span class=\"line\">    data_y1 = gaussian_filtering_1(data, gauss_cof, r)</span><br><span class=\"line\">    r = <span class=\"number\">2</span></span><br><span class=\"line\">    sigma = <span class=\"number\">20</span></span><br><span class=\"line\">    gauss_cof = gauss_kernel(r, sigma)</span><br><span class=\"line\">    data_y2 = gaussian_filtering_1(data, gauss_cof, r)</span><br><span class=\"line\">    plt.plot(data, <span class=\"string\">'o-'</span>,alpha=<span class=\"number\">0.8</span>)</span><br><span class=\"line\">    plt.plot(data_y1, <span class=\"string\">'o-'</span>,alpha=<span class=\"number\">0.8</span>)</span><br><span class=\"line\">    plt.plot(data_y2, <span class=\"string\">'o-'</span>,alpha=<span class=\"number\">0.8</span>)</span><br><span class=\"line\">    plt.xlabel(<span class=\"string\">'采样周期T'</span>)</span><br><span class=\"line\">    plt.ylabel(<span class=\"string\">'y'</span>)</span><br><span class=\"line\">    plt.grid(axis=<span class=\"string\">'x'</span>, color=<span class=\"string\">'0.95'</span>)</span><br><span class=\"line\">    plt.legend([<span class=\"string\">'原始信号'</span>, <span class=\"string\">'sigma:5,r:2高斯滤波'</span>, <span class=\"string\">'sigma:20,r:2高斯滤波'</span>])</span><br><span class=\"line\">    plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    test_1()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/Figure_4.png\" style=\"zoom:60%\"></p>\n<p>从上图可以看到，σ值越大，相比较于原始随机信号，滤波结果越平滑。从频域角度描述就是高频信号分量越少。</p>\n<h2 id=\"3-二维高斯滤波例子\"><a href=\"#3-二维高斯滤波例子\" class=\"headerlink\" title=\"3.二维高斯滤波例子\"></a>3.二维高斯滤波例子</h2><p>二维高斯滤波是一维高斯滤波的扩展，从原理上来说没有区别。相比较于一维高斯滤波，不同点在于：</p>\n<ul>\n<li>原始信号维度；</li>\n<li>高斯核；</li>\n</ul>\n<p>二维高斯函数：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20211210150457822.png\" style=\"zoom:50%\"></p>\n<p>高纬高斯函数：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20211210150543339.png\" style=\"zoom:50%\"></p>\n<p>下面是使用scipy的一个简单例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> scipy <span class=\"keyword\">import</span> misc</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.ndimage <span class=\"keyword\">import</span> gaussian_filter</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">fig = plt.figure()</span><br><span class=\"line\">plt.gray()  <span class=\"comment\"># show the filtered result in grayscale</span></span><br><span class=\"line\">ax1 = fig.add_subplot(<span class=\"number\">121</span>)  <span class=\"comment\"># left side</span></span><br><span class=\"line\">ax2 = fig.add_subplot(<span class=\"number\">122</span>)  <span class=\"comment\"># right side</span></span><br><span class=\"line\">ascent = misc.ascent()</span><br><span class=\"line\">result = gaussian_filter(ascent, sigma=<span class=\"number\">5</span>)</span><br><span class=\"line\">ax1.imshow(ascent)</span><br><span class=\"line\">ax2.imshow(result)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/Figure_1.png\"></p>\n<p>关于二维高斯滤波具体原理参考<a href=\"https://www.cs.auckland.ac.nz/courses/compsci373s1c/PatricesLectures/Gaussian Filtering_1up.pdf\">Microsoft PowerPoint - Image Filtering-6.ppt Compatibility Mode (auckland.ac.nz)</a></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.gaussian_filter.html\">scipy.ndimage.gaussian_filter — SciPy v1.7.1 Manual</a></li>\n<li><a href=\"https://www.cs.auckland.ac.nz/courses/compsci373s1c/PatricesLectures/Gaussian Filtering_1up.pdf\">Microsoft PowerPoint - Image Filtering-6.ppt Compatibility Mode (auckland.ac.nz)</a></li>\n<li><a href=\"https://www.sci.utah.edu/~gerig/CS7960-S2010/handouts/03 The Gaussian kernel.pdf\">03 The Gaussian kernel.pdf (utah.edu)</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html\">高斯模糊的算法 - 阮一峰的网络日志 (ruanyifeng.com)</a></li>\n<li><a href=\"https://www.cnblogs.com/shine-lee/p/9671253.html\">如何确定高斯滤波的标准差和窗口大小 - shine-lee - 博客园 (cnblogs.com)</a></li>\n</ol>\n","tags":["算法"]},{"title":"MATLAB绘图高级指南","url":"/undefined/MATLAB%E7%BB%98%E5%9B%BE%E9%AB%98%E7%BA%A7%E6%8C%87%E5%8D%97/","content":"<div style=\"text-align:center;\">\n    <img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/test-2.png\" style=\"width:250px;height:250px;\">\n</div>\n\n\n\n\n<span id=\"more\"></span>\n<h1 id=\"MATLAB绘图高级指南\"><a href=\"#MATLAB绘图高级指南\" class=\"headerlink\" title=\"MATLAB绘图高级指南\"></a>MATLAB绘图高级指南</h1><h2 id=\"1-序言\"><a href=\"#1-序言\" class=\"headerlink\" title=\"1.序言\"></a>1.序言</h2><p>MATLAB图形对象是实现数据可视化(data visualization)的一种重要手段。在处理数据的过程中，必不可少的一个方法就是图形可视化。但是MATLAB基本的绘图功能有时候并不能满足数据可视化的需求，无论是从美观（python的Matplotlib、pyecharts）度还是信息明确度角度看。但这并不意味着MATLAB不能绘制出更好的图形。MATLAB绘图的定制程度很高，因此需要对MATLAB图像对象有更深入的理解。</p>\n<h2 id=\"2-图形对象层次结构\"><a href=\"#2-图形对象层次结构\" class=\"headerlink\" title=\"2.图形对象层次结构\"></a>2.图形对象层次结构</h2><h3 id=\"2-1-层级结构\"><a href=\"#2-1-层级结构\" class=\"headerlink\" title=\"2.1 层级结构\"></a>2.1 层级结构</h3><p>图形对象是 MATLAB® 用来以图形的形式显示数据的可视化组件。每个对象都有一个名为 <strong>句柄(handle)</strong> 的唯一标识符。通过设置图形对象 <strong>属性(property)</strong> 来操作现有图形对象的特征。例如修改坐标轴数据的显示方式、线条颜色、线条宽度、自定义回调函数等。当我们调用<code>plot</code>函数时候， MATLAB 会自动执行一系列步骤生成图形。这些步骤包括创建对象和将这些对象属性值设置为适合特定图形的值。MATLAB的图像对象按照如下的方式进行组织：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/doccenter_graphicsheirarchy.png\"></p>\n<p>图形对象的层次结构本身反映出对象之间的包含关系。matlab的图窗对象包括：Root(根节点)、Figure(图窗)、Annotation(标注)、Axes(坐标区)、Illustration(图例)、UI(用户界面控件)。例如，使用 <code>plot</code> 函数创建线图。坐标区对象为表示数据的线定义了参考系。图窗是显示图形的窗口。图窗包含坐标区，坐标区包含线条、文本、图例以及其他用于表示图形的对象。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">    close(<span class=\"string\">&#x27;figure&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">catch</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">f1 = <span class=\"built_in\">figure</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;figure&#x27;</span>, <span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;menubar&#x27;</span>, <span class=\"string\">&#x27;figure&#x27;</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">121</span>)</span><br><span class=\"line\">x = <span class=\"built_in\">linspace</span>(<span class=\"number\">-2</span> * <span class=\"built_in\">pi</span>, <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>);</span><br><span class=\"line\">y1 = <span class=\"number\">6</span> .* <span class=\"built_in\">sin</span>(x);</span><br><span class=\"line\">y2 = <span class=\"number\">6</span> .* <span class=\"built_in\">cos</span>(x);</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x, y1, x, y2)</span><br><span class=\"line\">title(<span class=\"string\">&#x27;axes 1&#x27;</span>)</span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;axis-x-1&#x27;</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;axis-y-1&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">&#x27;1-1&#x27;</span>, <span class=\"string\">&#x27;1-2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">subplot(<span class=\"number\">122</span>)</span><br><span class=\"line\">x = <span class=\"built_in\">linspace</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span> * <span class=\"built_in\">pi</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">y = <span class=\"built_in\">cos</span>(x) + <span class=\"built_in\">rand</span>(<span class=\"number\">1</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">sz = <span class=\"number\">25</span>;</span><br><span class=\"line\">c = <span class=\"built_in\">linspace</span>(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"built_in\">length</span>(x));</span><br><span class=\"line\"><span class=\"built_in\">scatter</span>(x, y, sz, c, <span class=\"string\">&#x27;filled&#x27;</span>)</span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;axis-x-2&#x27;</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;axis-y-2&#x27;</span>)</span><br><span class=\"line\">title(<span class=\"string\">&#x27;axes 2&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/news-1.png\" style=\"zoom:80%\"></p>\n<p>图中，红色框：figure，绿色框：axes，黄色框：Annotation(箭头)，褐色框：illustration(legend)。</p>\n<h3 id=\"2-2-图像对象继承关系\"><a href=\"#2-2-图像对象继承关系\" class=\"headerlink\" title=\"2.2 图像对象继承关系\"></a>2.2 图像对象继承关系</h3><p>对象间的关系保存在 <code>Parent</code> 和 <code>Children</code> 属性中。例如，坐标区的父级是一个图窗。坐标区的 <code>Parent</code> 属性包含了该坐标区所在图窗的句柄。</p>\n<p>同样，图窗的 <code>Children</code> 属性包含了其所含的所有坐标区。图窗 <code>Children</code> 属性还包含其所含的其他所有对象，如图例和用户界面对象。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 3*1 Group</span></span><br><span class=\"line\">graph_children = f1.Children()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">3</span>×<span class=\"number\">1</span> graphics 数组:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">Axes</span>      (axes <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"attribute\">Legend</span>    (<span class=\"number\">1</span>-<span class=\"number\">1</span>, <span class=\"number\">1</span>-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"attribute\">Axes</span>      (axes <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% axes 1的父对象</span></span><br><span class=\"line\">graph_children(<span class=\"number\">1</span>).Parent</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">Figure</span> <span class=\"string\">(1: figure) - 属性:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">Number</span>: <span class=\"string\">1</span></span><br><span class=\"line\">      <span class=\"attr\">Name</span>: <span class=\"string\">&#x27;figure&#x27;</span></span><br><span class=\"line\">     <span class=\"attr\">Color</span>: <span class=\"string\">[1 1 1]</span></span><br><span class=\"line\">  <span class=\"attr\">Position</span>: <span class=\"string\">[680 558 560 420]</span></span><br><span class=\"line\">     <span class=\"attr\">Units</span>: <span class=\"string\">&#x27;pixels&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-groot-修改图窗默认值\"><a href=\"#2-3-groot-修改图窗默认值\" class=\"headerlink\" title=\"2.3 groot(修改图窗默认值)\"></a>2.3 groot(修改图窗默认值)</h3><p>groot使用图形根对象。使用 groot 访问根属性。绘图的默认属性都是由groot的设定的默认值决定，groot能修改根图形的属性<code>root(Root 对象是图形对象树的根。Root 属性包含有关图形环境和图形系统的当前状态的信息。使用圆点表示法引用特定的对象和属性。)</code>。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 获取根图像属性(root)</span></span><br><span class=\"line\">get(groot)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%&#123;</span></span><br><span class=\"line\"><span class=\"comment\">         CallbackObject: [0×0 GraphicsPlaceholder]</span></span><br><span class=\"line\"><span class=\"comment\">               Children: [1×1 Figure]</span></span><br><span class=\"line\"><span class=\"comment\">          CurrentFigure: [1×1 Figure]</span></span><br><span class=\"line\"><span class=\"comment\">     FixedWidthFontName: &#x27;SimHei&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">       HandleVisibility: &#x27;on&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">       MonitorPositions: [1 1 1920 1080]</span></span><br><span class=\"line\"><span class=\"comment\">                 Parent: [0×0 GraphicsPlaceholder]</span></span><br><span class=\"line\"><span class=\"comment\">        PointerLocation: [781 725]</span></span><br><span class=\"line\"><span class=\"comment\">            ScreenDepth: 32</span></span><br><span class=\"line\"><span class=\"comment\">    ScreenPixelsPerInch: 96</span></span><br><span class=\"line\"><span class=\"comment\">             ScreenSize: [1 1 1920 1080]</span></span><br><span class=\"line\"><span class=\"comment\">      ShowHiddenHandles: &#x27;off&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">                    Tag: &#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">                   Type: &#x27;root&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">                  Units: &#x27;pixels&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">               UserData: []</span></span><br><span class=\"line\"><span class=\"comment\">%&#125;</span></span><br></pre></td></tr></table></figure>\n<p>使用groot还能为其他类型的对象设置根级别的默认值。例如每次绘图时对于线条，希望其线宽(LineWidth属性)默认为2。则可以通过groot实现。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">set(groot,<span class=\"string\">&#x27;defaultLineLineWidth&#x27;</span>,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>指定属性值为 <code>&#39;remove&#39;</code> 会去除用户定义的默认值。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">set(groot,<span class=\"string\">&#x27;defaultSurfaceEdgeColor&#x27;</span>,<span class=\"string\">&#x27;remove&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>指定属性值为 <code>&#39;factory&#39;</code> 将会让属性设置为其出厂定义值。例如，这些语句将曲面 <code>h</code> 的 <code>EdgeColor</code> 设置为黑色（其出厂设定），无论定义的默认定义值为何值：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">set(gcf,<span class=\"string\">&#x27;defaultSurfaceEdgeColor&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>)</span><br><span class=\"line\">h = surface(peaks);</span><br><span class=\"line\">set(h,<span class=\"string\">&#x27;EdgeColor&#x27;</span>,<span class=\"string\">&#x27;factory&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-保存图窗为其他格式的图片\"><a href=\"#3-保存图窗为其他格式的图片\" class=\"headerlink\" title=\"3.保存图窗为其他格式的图片\"></a>3.保存图窗为其他格式的图片</h2><h3 id=\"3-1-saveas\"><a href=\"#3-1-saveas\" class=\"headerlink\" title=\"3.1 saveas\"></a>3.1 saveas</h3><p>将图窗保存为特定文件格式。</p>\n<p>基本用法包括：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">saveas(fig,filename)</span><br><span class=\"line\">saveas(fig,filename,formattype)</span><br></pre></td></tr></table></figure>\n<p><code>saveas(fig,filename)</code> 将 <code>fig</code> 指定的图窗或 Simulink® 模块图保存到 <code>filename</code> 文件中。将文件名指定为字符向量或字符串，包括文件扩展名，例如 <code>&#39;myplot.jpg&#39;</code>。文件扩展名用于定义文件格式。如果不指定扩展名，则 <code>saveas</code> 会将图窗保存为 FIG 文件。要保存当前图窗，请将 <code>fig</code> 指定为 <code>gcf</code>。</p>\n<p><code>saveas(fig,filename,formattype)</code> 使用指定的文件格式 <code>formattype</code> 创建文件。如果不在文件名中指定文件扩展名（例如 <code>&#39;myplot&#39;</code>），则与指定的格式对应的标准扩展名会自动附加到文件名后面。如果指定了文件扩展名，该扩展名不必与文件格式相匹配。<code>saveas</code> 为该格式使用 <code>formattype</code>，但会将文件保存为指定的扩展名。因此，文件扩展名可能与使用的实际格式不匹配。</p>\n<h3 id=\"3-2-imwrite\"><a href=\"#3-2-imwrite\" class=\"headerlink\" title=\"3.2 imwrite\"></a>3.2 imwrite</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SaveFigure2Img</span><span class=\"params\">(graph_object, imgfile, varargin)</span></span></span><br><span class=\"line\">    <span class=\"comment\">% 功能:</span></span><br><span class=\"line\">    <span class=\"comment\">%       将当前figure保存为image;</span></span><br><span class=\"line\">    <span class=\"comment\">% 定义:</span></span><br><span class=\"line\">    <span class=\"comment\">%       SaveFigure2Img(imgfile,varargin)</span></span><br><span class=\"line\">    <span class=\"comment\">% 输入:</span></span><br><span class=\"line\">    <span class=\"comment\">%\t\tgraph_object,图窗对象(figure|axes)</span></span><br><span class=\"line\">    <span class=\"comment\">%       imgfile,目标image全路径,e.g:D:/xx/A.png</span></span><br><span class=\"line\">    <span class=\"comment\">%       varargin,保留参数</span></span><br><span class=\"line\">    <span class=\"comment\">% 输出:</span></span><br><span class=\"line\">    <span class=\"comment\">%       none</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">%%</span></span><br><span class=\"line\">    <span class=\"comment\">% 捕获坐标区或图窗作为影片帧</span></span><br><span class=\"line\">    cur_frame = getframe(graph_object);</span><br><span class=\"line\">    <span class=\"comment\">% 返回与影片帧关联的图像数据</span></span><br><span class=\"line\">    im = frame2im(cur_frame);</span><br><span class=\"line\">    <span class=\"comment\">% 将图像写入图形文件</span></span><br><span class=\"line\">    imwrite(im, imgfile);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-生成GIF\"><a href=\"#3-3-生成GIF\" class=\"headerlink\" title=\"3.3 生成GIF\"></a>3.3 生成GIF</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">clc;</span><br><span class=\"line\">clf;</span><br><span class=\"line\"><span class=\"comment\">%白色背景</span></span><br><span class=\"line\"><span class=\"comment\">% axis([-2, 2, -2, 2]);</span></span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;X轴&#x27;</span>);</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;Y轴&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">%四周的边框</span></span><br><span class=\"line\">box on;</span><br><span class=\"line\"><span class=\"comment\">%绘图区域</span></span><br><span class=\"line\">t = <span class=\"number\">0</span>:<span class=\"number\">0.02</span>:<span class=\"number\">10</span>;</span><br><span class=\"line\">Nt = <span class=\"built_in\">size</span>(t, <span class=\"number\">2</span>);</span><br><span class=\"line\">x = <span class=\"number\">2</span> * <span class=\"built_in\">cos</span>(t(<span class=\"number\">1</span>:Nt));</span><br><span class=\"line\">y = <span class=\"built_in\">sin</span>(t(<span class=\"number\">1</span>:Nt));</span><br><span class=\"line\"><span class=\"comment\">%循环绘图</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:Nt</span><br><span class=\"line\">    cla;</span><br><span class=\"line\">    <span class=\"built_in\">hold</span> on;</span><br><span class=\"line\">    <span class=\"built_in\">plot</span>(x, y)</span><br><span class=\"line\">    <span class=\"built_in\">plot</span>(x(<span class=\"built_in\">i</span>), y(<span class=\"built_in\">i</span>), <span class=\"string\">&#x27;o&#x27;</span>);</span><br><span class=\"line\">    frame = getframe(gcf);</span><br><span class=\"line\">    imind = frame2im(frame);</span><br><span class=\"line\">    [imind, cm] = rgb2ind(imind, <span class=\"number\">256</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">i</span> == <span class=\"number\">1</span></span><br><span class=\"line\">        imwrite(imind, cm, <span class=\"string\">&#x27;test.gif&#x27;</span>, <span class=\"string\">&#x27;gif&#x27;</span>, <span class=\"string\">&#x27;Loopcount&#x27;</span>, <span class=\"built_in\">inf</span>, <span class=\"string\">&#x27;DelayTime&#x27;</span>, <span class=\"number\">1e-4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        imwrite(imind, cm, <span class=\"string\">&#x27;test.gif&#x27;</span>, <span class=\"string\">&#x27;gif&#x27;</span>, <span class=\"string\">&#x27;WriteMode&#x27;</span>, <span class=\"string\">&#x27;append&#x27;</span>, <span class=\"string\">&#x27;DelayTime&#x27;</span>, <span class=\"number\">1e-4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-绘制动图\"><a href=\"#4-绘制动图\" class=\"headerlink\" title=\"4.绘制动图\"></a>4.绘制动图</h2><h3 id=\"4-1-animatedline\"><a href=\"#4-1-animatedline\" class=\"headerlink\" title=\"4.1 animatedline\"></a>4.1 animatedline</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%%</span></span><br><span class=\"line\"><span class=\"comment\">% clf用来清除图形的命令。一般在画图之前用。</span></span><br><span class=\"line\">clf;</span><br><span class=\"line\">clc;</span><br><span class=\"line\">axis([<span class=\"number\">-2</span>, <span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\"><span class=\"comment\">% axis square 当前坐标系图形设置为方形，刻度范围不一定一样，但是一定是方形的。</span></span><br><span class=\"line\"><span class=\"comment\">% axis equal 将横轴纵轴的定标系数设成相同值，即单位长度相同，刻度是等长的，但不一定是方形的。</span></span><br><span class=\"line\">axis equal;</span><br><span class=\"line\">grid on;</span><br><span class=\"line\"></span><br><span class=\"line\">h = animatedline(<span class=\"string\">&#x27;Marker&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;LineStyle&#x27;</span>, <span class=\"string\">&#x27;none&#x27;</span>);</span><br><span class=\"line\">t = <span class=\"number\">6</span> * <span class=\"built_in\">pi</span> * (<span class=\"number\">0</span>:<span class=\"number\">0.02</span>:<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> n = <span class=\"number\">1</span>:<span class=\"built_in\">length</span>(t)</span><br><span class=\"line\">    addpoints(h, <span class=\"number\">2</span> * <span class=\"built_in\">cos</span>(t(<span class=\"number\">1</span>:n)), <span class=\"built_in\">sin</span>(t(<span class=\"number\">1</span>:n)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">% 一般是为了动态观察变化过程 pause（a）暂停a秒后执行下一条指令</span></span><br><span class=\"line\">    pause(<span class=\"number\">0.5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">% 可以用drawnow update加快动画速度</span></span><br><span class=\"line\">    drawnow update;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-movie\"><a href=\"#4-2-movie\" class=\"headerlink\" title=\"4.2 movie\"></a>4.2 movie</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%%</span></span><br><span class=\"line\">clc; clear;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 初始化一个电影矩阵</span></span><br><span class=\"line\">M = moviein(<span class=\"number\">16</span>);</span><br><span class=\"line\"><span class=\"comment\">% 创建电影</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k = <span class=\"number\">1</span>:<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"built_in\">plot</span>(fft(<span class=\"built_in\">eye</span>(k + <span class=\"number\">16</span>)));</span><br><span class=\"line\">    axis equal;</span><br><span class=\"line\">    <span class=\"comment\">% 调用getframe函数生成每个帧</span></span><br><span class=\"line\">    M(k) = getframe;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 调用movie函数将电影动画矩阵M(k)播放5次</span></span><br><span class=\"line\">movie(M, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 将前面创建的电影动画中添加一个垂直的滚动条</span></span><br><span class=\"line\">h = uicontrol(<span class=\"string\">&#x27;style&#x27;</span>, <span class=\"string\">&#x27;slider&#x27;</span>, <span class=\"string\">&#x27;position&#x27;</span>, [<span class=\"number\">10</span> <span class=\"number\">50</span> <span class=\"number\">20</span> <span class=\"number\">100</span>], <span class=\"string\">&#x27;Min&#x27;</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;Max&#x27;</span>, <span class=\"number\">16</span>, <span class=\"string\">&#x27;Value&#x27;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k = <span class=\"number\">1</span>:<span class=\"number\">16</span></span><br><span class=\"line\">    <span class=\"built_in\">plot</span>(fft(<span class=\"built_in\">eye</span>(k + <span class=\"number\">16</span>)));</span><br><span class=\"line\">    axis equal;</span><br><span class=\"line\">    set(h, <span class=\"string\">&#x27;Value&#x27;</span>, k);</span><br><span class=\"line\">    <span class=\"comment\">% gcf为返回当前图形窗口句柄</span></span><br><span class=\"line\">    M(k) = getframe(gcf);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">clf;</span><br><span class=\"line\">axes(<span class=\"string\">&#x27;Position&#x27;</span>, [<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span>]);</span><br><span class=\"line\">movie(M, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-图窗按键回调\"><a href=\"#5-图窗按键回调\" class=\"headerlink\" title=\"5.图窗按键回调\"></a>5.图窗按键回调</h2><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%% matlab figure keypressdown callback use</span></span><br><span class=\"line\">clc;</span><br><span class=\"line\">tcf();</span><br><span class=\"line\"><span class=\"built_in\">figure</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;deserado&#x27;</span>, <span class=\"string\">&#x27;color&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;KeyPressFcn&#x27;</span>, @isEscPressDown);</span><br><span class=\"line\">text(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;desperado,why don&#x27;&#x27;t you come to your senses,come down your fences&#x27;</span>);</span><br><span class=\"line\">axis([<span class=\"number\">-1</span>, <span class=\"number\">40</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k = <span class=\"number\">1</span>:<span class=\"number\">1</span>:<span class=\"number\">100</span></span><br><span class=\"line\">    pause(<span class=\"number\">0.1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> strcmpi(get(gcf, <span class=\"string\">&#x27;CurrentCharacter&#x27;</span>),char(<span class=\"number\">27</span>))</span><br><span class=\"line\">        <span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;esc pressdown&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">disp</span>(<span class=\"string\">&#x27;function break down&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% callback function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEscPressDown</span><span class=\"params\">(src, event)</span></span></span><br><span class=\"line\">    fprintf(<span class=\"string\">&#x27;%s\\n&#x27;</span>, get(gcf, <span class=\"string\">&#x27;CurrentCharacter&#x27;</span>));</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-数据游标模式\"><a href=\"#6-数据游标模式\" class=\"headerlink\" title=\"6.数据游标模式\"></a>6.数据游标模式</h2><p>启用数据游标模式。数据提示是显示关于单个数据点的信息的小文本框。在 R2018b 之前的版本中，使用 <code>datacursormode</code> 函数创建和编辑数据提示。通过使用 <code>datacursormode</code> 创建数据游标管理器对象来控制数据提示的外观和行为。</p>\n<p>从 R2018b 开始，您可以改用内置交互来创建和编辑数据提示。内置交互不要求您启用某种模式，并且比交互模式响应更快。</p>\n<p><code>test.m</code></p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 修改数据游标格式</span></span><br><span class=\"line\">clc;</span><br><span class=\"line\">nbt_lat_lon_h = [<span class=\"number\">104.058567643123</span>, <span class=\"number\">30.547872167734</span>, <span class=\"number\">467.946972989477</span></span><br><span class=\"line\">            <span class=\"number\">104.058567183453</span>, <span class=\"number\">30.548014837274</span>, <span class=\"number\">468.115972990170</span></span><br><span class=\"line\">            <span class=\"number\">104.058730768827</span>, <span class=\"number\">30.548018797743</span>, <span class=\"number\">467.900972989388</span></span><br><span class=\"line\">            <span class=\"number\">104.058889206422</span>, <span class=\"number\">30.547874726343</span>, <span class=\"number\">468.024972987361</span></span><br><span class=\"line\">            <span class=\"number\">104.058895271369</span>, <span class=\"number\">30.548019508539</span>, <span class=\"number\">469.051972987130</span></span><br><span class=\"line\">            <span class=\"number\">104.058728300713</span>, <span class=\"number\">30.547880364315</span>, <span class=\"number\">469.601972988807</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">[x_1, y_1, ~] = latlon_to_xy(<span class=\"number\">30.547872167734</span>, <span class=\"number\">104.058567643123</span>);</span><br><span class=\"line\">[x_2, y_2, ~] = latlon_to_xy(<span class=\"number\">30.548019508539</span>, <span class=\"number\">104.058895271369</span>);</span><br><span class=\"line\"><span class=\"comment\">% lat:30.5478721677,lon:104.0585676431</span></span><br><span class=\"line\">x_s = <span class=\"built_in\">linspace</span>(x_1, x_2, <span class=\"number\">200</span>);</span><br><span class=\"line\">y_s = <span class=\"built_in\">linspace</span>(y_1, y_2, <span class=\"number\">200</span>);</span><br><span class=\"line\">[x_s, y_s] = <span class=\"built_in\">meshgrid</span>(x_s, y_s);</span><br><span class=\"line\"></span><br><span class=\"line\">tcf(<span class=\"string\">&#x27;map-grid&#x27;</span>);</span><br><span class=\"line\">f1 = <span class=\"built_in\">figure</span>(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;map-grid&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">hold</span> on</span><br><span class=\"line\">dcm_obj = datacursormode(f1);</span><br><span class=\"line\"><span class=\"comment\">% 添加数据游标变化回调函数,在对话窗中打印当前游标数据</span></span><br><span class=\"line\">set(dcm_obj, <span class=\"string\">&#x27;UpdateFcn&#x27;</span>, @modify_cursor_callback)</span><br><span class=\"line\">mesh(x_s, y_s, <span class=\"built_in\">zeros</span>(<span class=\"number\">200</span>, <span class=\"number\">200</span>))</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x_s(<span class=\"number\">1</span>), y_s(<span class=\"number\">1</span>), <span class=\"string\">&#x27;r*&#x27;</span>)</span><br><span class=\"line\">text(x_s(<span class=\"number\">1</span>), y_s(<span class=\"number\">1</span>), <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(x_s(<span class=\"keyword\">end</span>), y_s(<span class=\"keyword\">end</span>), <span class=\"string\">&#x27;b*&#x27;</span>)</span><br><span class=\"line\">text(x_s(<span class=\"keyword\">end</span>), y_s(<span class=\"keyword\">end</span>), <span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">view(<span class=\"number\">0</span>, <span class=\"number\">90</span>)</span><br><span class=\"line\">grid minor</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>modify_cursor_callback.m</code></p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">output_txt</span> = <span class=\"title\">modify_cursor_callback</span><span class=\"params\">(obj, event_obj)</span></span></span><br><span class=\"line\">    <span class=\"comment\">% Display the position of the data cursor</span></span><br><span class=\"line\">    <span class=\"comment\">% obj          Currently not used (empty)</span></span><br><span class=\"line\">    <span class=\"comment\">% event_obj    Handle to event object</span></span><br><span class=\"line\">    <span class=\"comment\">% output_txt   Data cursor text string (string or cell array of strings).</span></span><br><span class=\"line\"></span><br><span class=\"line\">    pos = get(event_obj, <span class=\"string\">&#x27;Position&#x27;</span>);</span><br><span class=\"line\">    x_text = sprintf(<span class=\"string\">&#x27;%.10f&#x27;</span>, pos(<span class=\"number\">1</span>));</span><br><span class=\"line\">    y_text = sprintf(<span class=\"string\">&#x27;%.10f&#x27;</span>, pos(<span class=\"number\">2</span>));</span><br><span class=\"line\">    output_txt = &#123;[<span class=\"string\">&#x27;X: &#x27;</span>, x_text], ...</span><br><span class=\"line\">        <span class=\"comment\">% 此处的pos(1)后的数字，即X轴的数据游标的显示精度位数</span></span><br><span class=\"line\">            [<span class=\"string\">&#x27;Y: &#x27;</span>, y_text]&#125;;</span><br><span class=\"line\">    <span class=\"comment\">% 此处的pos(2)后的数字，即Y轴的数据游标的显示精度位数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">% If there is a Z-coordinate in the position, display it as well</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">length</span>(pos) &gt; <span class=\"number\">2</span></span><br><span class=\"line\">        z_text = sprintf(<span class=\"string\">&#x27;%.10f&#x27;</span>, pos(<span class=\"number\">3</span>));</span><br><span class=\"line\">        output_txt&#123;<span class=\"keyword\">end</span> + <span class=\"number\">1</span>&#125; = [<span class=\"string\">&#x27;Z: &#x27;</span>, z_text];</span><br><span class=\"line\">        <span class=\"comment\">% 此处的pos(3)后的数字，即Z轴的数据游标的显示精度位数</span></span><br><span class=\"line\">        fprintf(<span class=\"string\">&#x27;x:%s,y:%s,hei:%s\\n&#x27;</span>, x_text, y_text, z_text);</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">% [x,y]转换为[lat,lon]</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">true</span></span><br><span class=\"line\">        [lat, lon] = xy_to_latlon(pos(<span class=\"number\">1</span>), pos(<span class=\"number\">2</span>), <span class=\"number\">1.832595714594046</span>);</span><br><span class=\"line\">        fprintf(<span class=\"string\">&#x27;lat:%0.10f,lon:%0.10f\\n&#x27;</span>, lat, lon);</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>1.<a href=\"https://ww2.mathworks.cn/help/matlab/creating_plots/graphics-objects.html?lang=en\">Graphics Object Hierarchy - MATLAB &amp; Simulink - MathWorks China</a></p>\n<p>2.<a href=\"https://ww2.mathworks.cn/help/matlab/ref/groot.html\">图形根对象 - MATLAB groot - MathWorks 中国</a></p>\n<p>3.<a href=\"https://ww2.mathworks.cn/help/matlab/ref/matlab.ui.root-properties.html\">图形环境和状态信息 - MATLAB - MathWorks 中国</a></p>\n<p>4.<a href=\"https://ww2.mathworks.cn/help/matlab/creating_plots/default-property-values.html#bub84qp\">默认属性值 - MATLAB &amp; Simulink - MathWorks 中国</a></p>\n<p>5.<a href=\"https://ww2.mathworks.cn/help/matlab/ref/saveas.html?searchHighlight=saveas&amp;s_tid=srchtitle_saveas_1\">将图窗保存为特定文件格式 - MATLAB saveas - MathWorks 中国</a></p>\n<p>6.<a href=\"https://ww2.mathworks.cn/help/matlab/ref/matlab.graphics.shape.internal.datacursormanager.html?searchHighlight=datacursormode&amp;s_tid=srchtitle_datacursormode_1\">启用数据游标模式 - MATLAB - MathWorks 中国</a></p>\n<p>7.<a href=\"https://blogs.mathworks.com/steve/2019/02/14/pursuit-curves/?s_tid=blogs_rc_3\">Pursuit Curves » Steve on Image Processing with MATLAB - MATLAB &amp; Simulink (mathworks.com)</a></p>\n","tags":["MATLAB"]},{"title":"HMM和Viterbi算法","url":"/undefined/HMM/","content":"<p>​    隐马尔可夫模型(hidden Markov model,HMM)是可用于标注问题的统计学习模型，描述由隐藏的马尔可夫链随机生成观测序列的过程，属于生成模型，描述了两个相关序列的依赖关系。隐马尔可夫模型在语音识别、自然语言处理、生物信息、模式识别等领域有着广泛的应用。其主要思想来源于马尔可夫过程，它假设当前时刻状态只与前一时刻的状态有关，而与更早的状态无关。</p>\n<span id=\"more\"></span>\n<center><embed src=\"HMM.pdf\" width=\"800\" height=\"1000\"></center>\n"},{"title":"Target","url":"/undefined/Target/","content":"<p><strong>人需要给自己定一些可行度高的目标来敦促自己不浪费生命！</strong></p>\n<p>淡泊明志，宁静致远。</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"23年度计划\"><a href=\"#23年度计划\" class=\"headerlink\" title=\"23年度计划\"></a>23年度计划</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">工作&amp;专业</th>\n<th style=\"text-align:center\">生活</th>\n<th style=\"text-align:center\">看书&amp;学习</th>\n<th style=\"text-align:center\">其他</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">python精进——数据处理</td>\n<td style=\"text-align:center\">增重到135</td>\n<td style=\"text-align:center\">书（12+）</td>\n<td style=\"text-align:center\">50w</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">算法（学习）文档输出</td>\n<td style=\"text-align:center\">房子</td>\n<td style=\"text-align:center\">练字</td>\n<td style=\"text-align:center\">核心竞争力</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">专利（个人五篇）</td>\n<td style=\"text-align:center\">学会做大菜</td>\n<td style=\"text-align:center\">建筑监理证书</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">奖项</td>\n<td style=\"text-align:center\">减少在外吃饭的次数</td>\n<td style=\"text-align:center\">持续更新timeline</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">考勤</td>\n<td style=\"text-align:center\">少熬夜</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">晋升</td>\n<td style=\"text-align:center\">旅游</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">自研项目</td>\n<td style=\"text-align:center\">见识（陪宝宝一起）（看电影）</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">产品落地</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">技能树</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>生活不应该是一天又一天的单调重复，而是螺旋上升。</p>\n<p>水往低处流，人往高处走；</p>\n<h2 id=\"2022-05-25\"><a href=\"#2022-05-25\" class=\"headerlink\" title=\"2022-05-25\"></a>2022-05-25</h2><blockquote>\n<ol>\n<li><a href=\"https://natureofcode.com/book/\">The Nature of Code</a> 学习翻译一章  </li>\n<li>《全球化与国家竞争：新兴七国比较研究》</li>\n</ol>\n</blockquote>\n<h2 id=\"2022-05-31\"><a href=\"#2022-05-31\" class=\"headerlink\" title=\"2022-05-31\"></a>2022-05-31</h2><ol>\n<li>不妨考虑把烟戒掉！</li>\n</ol>\n<h2 id=\"2022-06-06\"><a href=\"#2022-06-06\" class=\"headerlink\" title=\"2022-06-06\"></a>2022-06-06</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">DeadLine</th>\n<th style=\"text-align:center\">耗时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://natureofcode.com/book/\">The Nature of Code</a> 粒子系统</td>\n<td style=\"text-align:center\">本周</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">《全球化与国家竞争：新兴七国比较研究》</td>\n<td style=\"text-align:center\">本周</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40w+</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2022-06-13\"><a href=\"#2022-06-13\" class=\"headerlink\" title=\"2022-06-13\"></a>2022-06-13</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">进度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://natureofcode.com/book/\">The Nature of Code</a> 向量</td>\n<td style=\"text-align:center\">■□□□□</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">水浒传108</td>\n<td style=\"text-align:center\">0%</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拾音柱</td>\n<td style=\"text-align:center\">0%</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2022-06-20\"><a href=\"#2022-06-20\" class=\"headerlink\" title=\"2022-06-20\"></a>2022-06-20</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">进度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://natureofcode.com/book/\">The Nature of Code</a> instruction</td>\n<td style=\"text-align:center\">■■■■■</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拾音柱</td>\n<td style=\"text-align:center\">■□□□□</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LM算法</td>\n<td style=\"text-align:center\">□□□□□</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">龙格库塔积分</td>\n<td style=\"text-align:center\">■■■■■</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2022-07-04\"><a href=\"#2022-07-04\" class=\"headerlink\" title=\"2022-07-04\"></a>2022-07-04</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">进度</th>\n<th style=\"text-align:center\">预估时长</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://natureofcode.com/book/\">The Nature of Code</a> vector</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">10h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">水浒传108</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">10h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拾音柱</td>\n<td style=\"text-align:center\">■□□□□</td>\n<td style=\"text-align:center\">∞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LM算法</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">ds</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">龙格库塔积分-文档</td>\n<td style=\"text-align:center\">■■■■□</td>\n<td style=\"text-align:center\">4h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">随机误差分析(Allan方差)-文档</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">10h</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h2 id=\"2022-07-18\"><a href=\"#2022-07-18\" class=\"headerlink\" title=\"2022-07-18\"></a>2022-07-18</h2><p>专注是效率的保障；</p>\n<p>修为；</p>\n<p>百善孝为先，论心不论迹<strong>，</strong>论迹贫家无孝子；万恶淫为首，论迹不论心，论心世上无完人。</p>\n<hr>\n<h2 id=\"2022-07-25\"><a href=\"#2022-07-25\" class=\"headerlink\" title=\"2022-07-25\"></a>2022-07-25</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">进度</th>\n<th style=\"text-align:center\">预估时长</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://natureofcode.com/book/\">The Nature of Code</a> vector</td>\n<td style=\"text-align:center\">■■□□□</td>\n<td style=\"text-align:center\">10h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">《动机与人格》</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">20h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">拾音柱</td>\n<td style=\"text-align:center\">■□□□□</td>\n<td style=\"text-align:center\">∞</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LM算法</td>\n<td style=\"text-align:center\">■■■□□</td>\n<td style=\"text-align:center\">ds</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">龙格库塔积分-文档</td>\n<td style=\"text-align:center\">■■■■□</td>\n<td style=\"text-align:center\">4h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">随机误差分析(Allan方差)-文档</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">10h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">kalman filter</td>\n<td style=\"text-align:center\">□□□□□</td>\n<td style=\"text-align:center\">20h</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>Idea</strong></p>\n<ol>\n<li>动态歌词 processing</li>\n</ol>\n<h2 id=\"2022-08-01\"><a href=\"#2022-08-01\" class=\"headerlink\" title=\"2022-08-01\"></a>2022-08-01</h2><p><strong>Idea</strong></p>\n<ol>\n<li>情感时间线</li>\n<li>IMU - motor</li>\n</ol>\n<h2 id=\"2022-08-12\"><a href=\"#2022-08-12\" class=\"headerlink\" title=\"2022-08-12\"></a>2022-08-12</h2><ol>\n<li>mahony filter .vs. 滑动均值滤波</li>\n</ol>\n<h2 id=\"2022-12-12\"><a href=\"#2022-12-12\" class=\"headerlink\" title=\"2022-12-12\"></a>2022-12-12</h2><ol>\n<li>没有经过审视的人生不值得过</li>\n</ol>\n<p>--------------------------------------------------------------✂------------------------------------------------------------------  </p>\n\n<h2 id=\"书单\"><a href=\"#书单\" class=\"headerlink\" title=\"书单\"></a>书单</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">进度</th>\n<th style=\"text-align:center\">TimeFrame</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/20424526/\">邓小平时代 </a></td>\n<td style=\"text-align:center\">$100\\%$</td>\n<td style=\"text-align:center\">2022/11/26 - 2022/12/29</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35546622/\">置身事内：中国政府与经济发展</a></td>\n<td style=\"text-align:center\">$100\\%$</td>\n<td style=\"text-align:center\">2022/11/26 - 2022/12/19</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35314182/\">全球化与国家竞争 </a></td>\n<td style=\"text-align:center\">$100\\%$</td>\n<td style=\"text-align:center\">None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35660644/\">动机与人格</a></td>\n<td style=\"text-align:center\">$100\\%$</td>\n<td style=\"text-align:center\">None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/27012024/\">哲学简史</a></td>\n<td style=\"text-align:center\">$100\\%$</td>\n<td style=\"text-align:center\">2022/10/1 - 2022/11/25</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/34996404/\">苏东坡新传</a></td>\n<td style=\"text-align:center\">$20\\%$</td>\n<td style=\"text-align:center\">2022/12/20 -</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/1207500/\">布局天下</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/20434298/\">抗日战争中阵亡的国民党将军</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/25763679/\">不确定世界的理性选择</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35593780/\">工作、消费主义和新穷人</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/36092576/\">摩托日记</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/26925171/\">大明王朝1566</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/22867024/\">南怀瑾选集 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/4820710/\">1984 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/24257229/\">鼠疫 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/5288935/\">我说参同契（上中下） </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/6857548/\">宅经 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35871087/\">逆向投资：邓普顿的长赢投资法 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/36104107/\">长安的荔枝 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/26803714/\">人性的枷锁 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/3320425/\">跨越鸿沟 </a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/1134249/\">若干重大决策与事件的回顾（上下卷）</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35680666/\">“十四五”规划战略研究</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/35778341/\">四万万顾客 (豆瓣)</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/10553189/\">传家</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/1131866/\">在其香居茶馆里</a></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://book.douban.com/subject/34819201/\">生死二十八天 </a></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div    style=\" color: #333;\n    font-size: 18px;\n    width: 100%;\n    padding-bottom: 30px;\n    text-align: center;\">\n    <table>\n        <tr>\n            <th>\n                <img src=\"https://img9.doubanio.com/view/subject/s/public/s26689305.jpg\">\n                <a href=\"https://book.douban.com/subject/24738300/\">数据挖掘与数据化运营实战</a>\n            </th>\n            <th>\n                <img src=\"https://img9.doubanio.com/view/subject/s/public/s29393076.jpg\" >\n                <a href=\"https://book.douban.com/subject/26854249/\"> Python数据分析实战</a>\n            </th>\n        </tr>\n        <tr>\n            <th>\n                <img src=\"https://img9.doubanio.com/view/subject/s/public/s33531994.jpg\" >\n                <a href=\"https://book.douban.com/subject/34888317/\">Python数据分析与挖掘实战（第2版）</a>\n            </th>\n            <th>\n                <img src=\"https://img1.doubanio.com/view/subject/s/public/s33711257.jpg\" >\n                <a href=\"https://book.douban.com/subject/30283996/\"> 利用Python进行数据分析（原书第2版）</a>\n            </th>\n        </tr>\n</table>\n</div>\n\n\n\n\n\n\n\n\n\n"},{"title":"The Nature of Code:Introduction","url":"/undefined/TheNatureOfCode-Introduction/","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><a href=\"https://natureofcode.com/book/introduction/\">The Nature of Code:Introduction</a></p>\n<p><a href=\"https://github.com/nature-of-code/noc-examples-processing\">nature-of-code/noc-examples-processing: Repository for example code from The Nature of Code book (github.com)</a></p>\n<p>本章将会从最简单的运动仿真——随机游走(random walk)开始。</p>\n<span id=\"more\"></span>\n<h2 id=\"随机游走-Random-Walks\"><a href=\"#随机游走-Random-Walks\" class=\"headerlink\" title=\"随机游走(Random Walks)\"></a>随机游走(Random Walks)</h2><p>随机算法是一种并不复杂的算法，随机算法能够用来为世界中的许多现象建模。比如：气体中分子的运动、赌徒在赌场一天的行为。</p>\n<p>以随机游走开始介绍这本书，需要记住以下三点：</p>\n<ol>\n<li>本书的核心编程思想是——面向对象编程(object-oriented programming)。随机游走器将作为如何使用面向对象设计处理窗口中移动物体的模板；</li>\n<li>随机游走引出两个贯穿全书的问题：<ul>\n<li>如何定义控制对象行为的规则；</li>\n<li>如何在Processing中应用这些规则；</li>\n</ul>\n</li>\n<li>本书中，需要对随机性、概率和Perlin噪声有基本的了解。随机游走和它们都有关系；</li>\n</ol>\n<h2 id=\"随机游走类-The-Random-Walker-Class\"><a href=\"#随机游走类-The-Random-Walker-Class\" class=\"headerlink\" title=\"随机游走类(The Random Walker Class)\"></a>随机游走类(The Random Walker Class)</h2><p>面向对象编程基本概念：</p>\n<ul>\n<li><p><strong>Object</strong></p>\n<p>Processing中的对象(Object)是一个具有数据和功能的实体；</p>\n</li>\n<li><p><strong>Class</strong></p>\n<p>类(Class)是用来创建对象的模板；</p>\n</li>\n</ul>\n<p><code>P.S: processing中类介绍</code></p>\n<p><a href=\"http://processing.org/learning/objects/\">basics on the Processing website</a></p>\n<h2 id=\"概率和非正态分布-Probability-and-Non-Uniform-Distributions\"><a href=\"#概率和非正态分布-Probability-and-Non-Uniform-Distributions\" class=\"headerlink\" title=\"概率和非正态分布(Probability and Non-Uniform Distributions)\"></a>概率和非正态分布(Probability and Non-Uniform Distributions)</h2><p>计算机图形系统中，产生一个随机数是最很容易的事。然后，我们的目的是使建立的模型更加符合自然界中的特定现象，简单的随机数在这种场景中并不合适，需要调整随机数的使用方法。尤其是在涉及到进化或仿自然仿真(natural-looking simulation)中。仅仅需要一点小技巧就能改变random()方法来产生非正态分布。比如，在进化模型中，该如何选择哪个个体的DNA遗传给下一代？根据达尔文的进化理论——“适者生存”，一个猴群中强壮的、速度快的个体有90%的概率得到繁殖的机会，其余个体只有10%的机会。</p>\n<p>首先对概率(probability)的基本概念进行介绍。在独立事件中，概率就是一个事件发生的可能性(likehood)。一个有限可能结果的系统中，某特定事件的概率等于符合该事件的结果数除以所有可能结果的总数。抛硬币就是一个简单的例子，正面朝上及背面朝上的两种结果看来概率相同，每个的概率都是1/2，也就是正面朝上及背面朝上的概率各有50%。多个独立事件发生的概率等于每个事件的概率相乘。</p>\n<p>比如连续抛掷三次硬币，都是正面朝上的概率表示为：</p>\n<script type=\"math/tex; mode=display\">\n(1/2)*(1/2)*(1/2)=1/8(or0.125)</script><p>有几种方法可以在代码中使用带有概率的 random() 函数。第一种是<strong>数组方式</strong>，将有限结果事件全部存储在一个数组中，然后调用random()产生事件指针，根据数组输出结果，这种实现方式中，事件发生的概率由数组中的内容决定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> [] stuff = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">stuff[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">stuff[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">stuff[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">stuff[<span class=\"number\">3</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">stuff[<span class=\"number\">4</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> index = <span class=\"keyword\">int</span>(random(stuff.length));</span><br><span class=\"line\"><span class=\"keyword\">int</span> outcome = stuff[index];</span><br></pre></td></tr></table></figure>\n<p>运行上面的代码，有<code>outcome</code>为1的概率是2/5，2的概率为1/5，3的概率是1/5，4的概率为1/5；</p>\n<p>另外一种方式是生成一个随机数(浮点型0~1)，输出结果有随机数的范围决定。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> num = random(<span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">If random number is less than <span class=\"number\">0.6</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0.6</span>) &#123;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;Outcome A&quot;</span>);</span><br><span class=\"line\">Between <span class=\"number\">0.6</span> and <span class=\"number\">0.7</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0.7</span>) &#123;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;Outcome B&quot;</span>);</span><br><span class=\"line\">Greater than <span class=\"number\">0.7</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;Outcome C&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"随机正态分布-A-Normal-Distribution-of-Random-Numbers\"><a href=\"#随机正态分布-A-Normal-Distribution-of-Random-Numbers\" class=\"headerlink\" title=\"随机正态分布( A Normal Distribution of Random Numbers)\"></a>随机正态分布( A Normal Distribution of Random Numbers)</h2><p>自然界中的很多现象能使用正态分布来描述，比如人的身高分布，大部分的人身高在平均身高附近，很高或者很矮的人所占的比例很少，random()函数生成的随机数不能描述这种现象。</p>\n<p>正态分布指的是数值分布聚集在均值附近。也叫高斯分布(Gaussian distribution)。将分布绘制成图就是下面这种钟形图。</p>\n<table>\n    <tr>\n        <td><img src=\"https://natureofcode.com/book/imgs/intro/intro_02.png\"></td>\n        <td><img src=\"https://natureofcode.com/book/imgs/intro/intro_03.png\"></td>\n    </tr>\n</table>\n\n\n<p>上面的曲线是由一个数学函数生成，该函数将任何给定值出现的概率定义为均值(μ)和标准(σ)的函数。对于上面的曲线，均值决定最高点的位置，方差决定了最高点的值，右边的方差比左边的方差值更大，表示分布离散度更高。高斯分布特点：</p>\n<ul>\n<li>在μ±σ范围的值占比：68%；</li>\n<li>μ±2σ范围的值占比：98%；</li>\n<li>μ±3σ范围的值占比：99.7%；</li>\n</ul>\n<div style=\" color: #191919;background-color: #E9E9E9;\">\n    <p>均值和方差计算</p>\n    <p>给定以下数值:\n    <br>\n        <em>85, 82, 88, 86, 85, 93, 98, 40, 73, 83</em><br>\n    均值:81.3<br>\n        标准差:15.13</p>\n</div>\n\n\n\n<script type=\"math/tex; mode=display\">\n均值: \\mu = \\frac{1}{m}\\sum^m_{i=1}x^{(i)}\\\\\n方差:\\sigma^2 = \\frac{1}{m}\\sum_{i=1}^{m}(x^{(i)} - \\hat{\\mu})^2\\\\\n标准差:\\sigma=\\sqrt{\\frac{1}{m}\\sum_{i=1}^{m}(x^{(i)} - \\hat{\\mu})^2}</script><p>Processing提供了<strong>Random</strong>类用以处理随机数。</p>\n<ol>\n<li><p>随机数生成器申明和定义；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Random generator;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tsize(<span class=\"number\">400</span>,<span class=\"number\">400</span>);</span><br><span class=\"line\">\tgenerator=<span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成服从高斯分布的随机数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// nextGaussian输出的是double类型数据</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> new_value=(<span class=\"keyword\">float</span>)generator.nextGaussian();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">nextGaussian()</span>函数生成的数服从标准正态分布(均值为0，方差为1)。不同场景下，比如需要绘制均值为200，标准差为60的分布图，只需要将<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">nextGaussian()</span> 生成的数乘标准差，然后再加上均值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> sd = <span class=\"number\">60</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> mean_v = <span class=\"number\">200</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">float</span> num = (<span class=\"keyword\">float</span>)generator.nextGaussian();</span><br><span class=\"line\">    <span class=\"keyword\">float</span> x = sd*num+mean_v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义随机分布-A-Custom-Distribution-of-Random-Numbers\"><a href=\"#自定义随机分布-A-Custom-Distribution-of-Random-Numbers\" class=\"headerlink\" title=\"自定义随机分布(A Custom Distribution of Random Numbers)\"></a>自定义随机分布(A Custom Distribution of Random Numbers)</h2><p>很多时候，我们真正需要的并不是一个正态分布随机数，比如Gaussian。比如，想象一下一个随机游走的寻找食物的过程。在一个范围内随机寻找是一个常用的技巧，毕竟在找到食物之前并不知道它们存放在那里。但是，随机寻找存在一个问题，那就是会回到之前已经到过的地方(过采样,oversampling)。为了避免这种问题，一个经常使用的策略就是每次走很大一步，这允许步行者在特定位置周围随机觅食，同时定期跳得很远以减少过采样。随机游走（称为 Lévy flight）的这种变化需要一组自定义的概率。 虽然不是 Lévy flight的精确实现，但我们可以将概率分布表述如下：步长越长，被选中的可能性越小； 步骤越短，可能性越大。</p>\n<p>在前面序言中，介绍了可以通过用值填充数组（一些值是重复的以便更高频率选择到）或通过比较random() 的结果来生成自定义概率分布。 比如有通过有 1% 的机会迈出一大步来实现 Lévy flight。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> r=random();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (r&lt;<span class=\"number\">0.01</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\txstep=random(-<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">\tystep=random(-<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\txstep = random(-<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\tystep = random(-<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，这会将概率降低到固定数量的选项。如果想制定一个更普遍的规则——数字越大，被选中的可能性就越大呢？ 3.145 比 3.144 更有可能被选中，即使这种可能性只是稍微大一点。 换句话说，如果 x 是随机数，我们可以用 y = x 在 y 轴上映射概率。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/intro/intro_04.png\"></p>\n<p>如果我们能够根据上图弄清楚如何生成随机数的分布，那么我们将能够将相同的方法应用于任何曲线。</p>\n<p>一种解决方案是选择两个随机数而不是一个。 第一个随机数作为待比较随机数，第二个是“比较随机值”。 它决定使用第一个还是舍弃并选择另一个。较容易获得资格的号码将被更频繁地挑选，而很少符合资格的号码将不经常被挑选。 以下是步骤（现在，我们只考虑 0 到 1 之间的随机值）：</p>\n<ol>\n<li>生成随机数：R1；</li>\n<li>计算 R1 应该符合条件的概率 P。假设：P = R1；</li>\n<li>生成随机数：R2；</li>\n<li>如果 R2 小于 P，那么选择R1；</li>\n<li>如果 R2 不小于 P，则返回步骤 1 并重新开始；</li>\n</ol>\n<p>在这里，我们说随机值符合条件的可能性等于随机数本身。 假设我们为 R1 选择 0.1。 这意味着 R1 将有 10% 的机会获得资格。 如果我们为 R1 选择 0.83，那么它将有 83% 的机会获得资格。 数字越高，我们实际使用它的可能性就越大。  这是一个实现上述算法的函数（以蒙特卡洛方法命名，以蒙特卡洛赌场命名），返回一个介于 0 和1。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">montecarlo</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> r1=random(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> probility=r1;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> r2=random(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r2&lt;probility)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Perlin噪声-Perlin-Noise-A-Smoother-Approach\"><a href=\"#Perlin噪声-Perlin-Noise-A-Smoother-Approach\" class=\"headerlink\" title=\"Perlin噪声(Perlin Noise (A Smoother Approach))\"></a>Perlin噪声(Perlin Noise (A Smoother Approach))</h2><p>一个好的随机数生成器产生的数字之间没有关系，也没有明显的模式。正如我们开始看到的，在编写有机的、栩栩如生的行为时，一点点随机性可能是一件好事。然而，作为单一指导原则的随机性并不一定是自然的。一种被称为“Perlin 噪声”的算法（以其发明者 Ken Perlin 命名）考虑了这一点。 Perlin 在 1980 年代初制作原始 Tron 电影时开发了噪声功能；它旨在为计算机生成的效果创建程序纹理。 1997 年，佩林因这项工作获得了奥斯卡技术成就奖。 Perlin 噪声可用于生成具有自然品质的各种效果，例如云、风景和大理石等图案纹理。  Perlin 噪声具有更有机的外观，因为它产生自然有序（“平滑”）的伪随机数序列。左下图显示了 Perlin 噪声随时间的变化，x 轴代表时间；注意曲线的平滑度。右图显示随时间变化的纯随机数。 </p>\n<table>\n    <tr>\n        <td><img src=\"https://natureofcode.com/book/imgs/intro/intro_05.png\" ></td>\n        <td><img src=\"https://natureofcode.com/book/imgs/intro/intro_06.png\" ></td>\n    </tr>\n</table>\n\n\n\n\n<p>Processing 有一个 Perlin 噪声算法的内置实现：函数<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>。<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span> 函数可以输入一个、两个或三个参数，因为噪声是在一维、二维或三个维度上计算的。从一维噪声开始。</p>\n<div style=\" color: #191919; padding: 1.4em 1.5em;margin: 1.15em 0; background-color: #E9E9E9;\">\n    <p>\n        Processing中noise()是在几个“八度音阶”上计算的。 调用 noiseDetail() 函数将改变八度音阶的数量及其相对于彼此的重要性。 这反过来又改变了噪声函数的行为方式。\n    </p>\n    <p><a href=\"http://www.noisemachine.com/talk1/\"> Perlin Noise Detail </a></p>\n</div>\n\n\n<p><span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>函数理解。假如我们需要生成一个在某一范围内的随机数，<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">random()</span>函数输入一个参数，表示生成一个0-参数值范围内的随机数。但是这种方法并不是<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>函数的正确使用方法。如果像<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">random()</span>一样， 给<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>输入一个参数，得到的结果将是一个0-1范围之内的固定值。实际上，Perlin噪声可以认为是一个随时间线性变化的一系列值。例如：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Time</th>\n<th style=\"text-align:center\">Noise</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0.365</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">0.363</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">0.363</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">0.364</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">0.366</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>因此在Processing中为了获取特定的噪声值，需要给<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>函数输入一个特定的”时间参数”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> t_value = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> n = noise(t_value);</span><br><span class=\"line\">    println(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码会持续输出固定值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> t_value=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> n = noise(t_value);</span><br><span class=\"line\">    t_value +=<span class=\"number\">1</span>;</span><br><span class=\"line\">    println(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码会输出不同的随机值。</p>\n<p><em>t_value</em> 变化快慢会影响噪声的光滑度；如果我们在时间上有很大的跳跃，那么我们就会向前跳跃，并且值会更加随机。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/intro/intro_07.png\"></p>\n<h3 id=\"噪声值映射-Mapping-Noise\"><a href=\"#噪声值映射-Mapping-Noise\" class=\"headerlink\" title=\"噪声值映射(Mapping Noise)\"></a>噪声值映射(Mapping Noise)</h3><p><span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>函数生成的值范围是0~1，使用<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">map()</span>函数能将这些值映射到任意的范围，<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">map()</span>函数需要五个参数。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/intro/intro_08.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> n = noise(t);</span><br><span class=\"line\"><span class=\"comment\">//Using map() to customize the range of Perlin noise</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> x = map(n,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,width);</span><br><span class=\"line\">  ellipse(x,<span class=\"number\">180</span>,<span class=\"number\">16</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  t += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二维噪声-Two-Dimensional-Noise\"><a href=\"#二维噪声-Two-Dimensional-Noise\" class=\"headerlink\" title=\"二维噪声(Two-Dimensional Noise)\"></a>二维噪声(Two-Dimensional Noise)</h3><p>Processing中Perlin噪声是通过<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>函数实现的，相比较于另外一个随机数生成函数<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">random()</span>，<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>最大的不同点是：调用此函数生成的噪声曲线更光滑，这是因为其相邻数值变化更小。对于一维Perlin噪声，某个数有两个与它直接相邻(左图)。对于二维Perlin噪声，其相邻数据是在网格中一个格子周边的所有单个格子中的数据(如右图)。</p>\n<table>\n    <tr>\n        <td> <img src=\"https://natureofcode.com/book/imgs/intro/intro_10.png\"></td>\n        <td> <img src=\"https://natureofcode.com/book/imgs/intro/intro_11.png\"></td>\n    </tr>\n</table>\n\n<p>从概念上看，二维噪声和一维噪声的实现方式相同。不同之处在于其相邻点的存在方式和个数，一位是一条线相邻的两点，二维是网格周边所有的单个格子。给定值将的相邻点在其：上方、下方、右侧、左侧以及沿任何对角线。如果您要将这张方格纸可视化，并将每个值映射到颜色的亮度，会得到看起来像云的东西。 白色旁边是浅灰色，灰色旁边是灰色，深灰色旁边是黑色，黑色旁边是深灰色，等等。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/intro/intro_ex06.png\"></p>\n<p>这就是最初发明噪音的原因。可以稍微调整参数或使用颜色，以使生成的图像看起来更像大理石或木材或任何其他有机纹理。</p>\n<p>二维噪声的实现：如果想为窗口的每个像素随机着色，可以通过一个<strong>嵌套循环</strong>来实现，这样能访问每个像素点并选择随机亮度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">loadPixels();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;x&lt;width;x++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>;y&lt;height;y++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> brightness = random(<span class=\"number\">255</span>);</span><br><span class=\"line\">        pixels[x+y*width]=color(brightness);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">updatePixels();</span><br></pre></td></tr></table></figure>\n<p>如果使用<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>调整每个像素点的颜色，其实现方式也很简单，只需要把<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">random()</span>替换为<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">noise()</span>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> bright = map(noise(x,y),<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>);</span><br></pre></td></tr></table></figure>\n<p>2D Perlin噪声的具体实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> xoff = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//For every xoff, start yoff at 0.</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> yoff = <span class=\"number\">0.0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//Use xoff and yoff for noise().</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> bright = map(noise(xoff,yoff),<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"comment\">//Use x and y for pixel location.</span></span><br><span class=\"line\">    pixels[x+y*width] = color(bright);</span><br><span class=\"line\"><span class=\"comment\">//Increment yoff.</span></span><br><span class=\"line\">    yoff += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//Increment xoff.</span></span><br><span class=\"line\">  xoff += <span class=\"number\">0.01</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<table>\n    <tr>\n        <td><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220705101319316.png\" style=\"width:500px;height:250px;\">\n            <br>\n            <p style=\"font-size:20px;\">random函数生成二维随机颜色</p>\n        </td>\n        <td><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220705101201719.png\" style=\"width:500px;height:250px;\">\n        <br>\n            <p style=\"font-size:20px;\">noise函数生成二维随机颜色</p>\n        </td>\n    </tr>\n</table>\n\n<p>在本节中，介绍了 Perlin 噪声的几种典型用法。 对于一维噪声，使用平滑值来设置对象的位置，从而呈现出徘徊的外观。 使用二维噪声，在像素平面上创建了具有平滑值的多云图案。 然而，Perlin 噪声值就是特定的数值，它们本质上与像素位置或颜色无关，只是对其值的进行使用。本书中任何具有变量的示例都可以通过 Perlin 噪声进行控制。比如对风力建模时，它的强度可以由Perlin噪声控制。分形树模式中分支之间的角度或流场模拟中沿网格移动的对象的速度和方向也是如此。</p>\n","categories":["Processing"]},{"title":"The Nature of Code:Pvector","url":"/undefined/TheNatureofCode-Vector/","content":"<h1 id=\"向量-Vectors\"><a href=\"#向量-Vectors\" class=\"headerlink\" title=\"向量(Vectors)\"></a>向量(Vectors)</h1><p><a href=\"https://natureofcode.com/book/chapter-1-vectors/\">The Nature of Code-Vectors</a></p>\n<p>向量是Processing编程中的基本模块，向量又叫矢量(Euler Vector)，定义为有方向和大小的实体。向量通常用箭头表示，箭头的指向就是向量的方向，箭头的长度就是向量的大小。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_01.png\"></p>\n<span id=\"more\"></span>\n<h2 id=\"Vectors-You-Complete-Me\"><a href=\"#Vectors-You-Complete-Me\" class=\"headerlink\" title=\"Vectors,You Complete Me.\"></a>Vectors,You Complete Me.</h2><p>在详细介绍向量之前，先通过一个例子来论证向量的重要性，以至于我们会从向量开始。</p>\n<p><strong>Example 1.1 Bouncing ball with no Vectors</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> y = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> xspeed = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> yspeed = <span class=\"number\">3.3</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Move the ball according to its speed.</span></span><br><span class=\"line\">  x = x + xspeed;</span><br><span class=\"line\">  y = y + yspeed;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//Check for bouncing.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((x &gt; width) || (x &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    xspeed = xspeed * -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((y &gt; height) || (y &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    yspeed = yspeed * -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  stroke(<span class=\"number\">0</span>);</span><br><span class=\"line\">  fill(<span class=\"number\">175</span>);</span><br><span class=\"line\"><span class=\"comment\">//Display the ball at the location (x,y).</span></span><br><span class=\"line\">  ellipse(x,y,<span class=\"number\">16</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的例子实现了一个弹跳球。这个球具有一些属性包括：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Location <span class=\"comment\">//x and y</span></span><br><span class=\"line\">Speed <span class=\"comment\">//xspeed and yspeed</span></span><br></pre></td></tr></table></figure>\n<p>当然，可以想象它还可能会有更多的变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Acceleration <span class=\"comment\">//xacceleration and yacceleration</span></span><br><span class=\"line\"></span><br><span class=\"line\">Target location <span class=\"comment\">//xtarget and ytarget</span></span><br><span class=\"line\"></span><br><span class=\"line\">Wind <span class=\"comment\">//xwind and ywind</span></span><br><span class=\"line\"></span><br><span class=\"line\">Friction <span class=\"comment\">//xfriction and yfriction</span></span><br></pre></td></tr></table></figure>\n<p>使用向量能让我们的代码更加简洁，比如二维空间中的位置和速度例子中，一般的实现需要四个变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x;</span><br><span class=\"line\"><span class=\"keyword\">float</span> y;</span><br><span class=\"line\"><span class=\"keyword\">float</span> xspeed;</span><br><span class=\"line\"><span class=\"keyword\">float</span> yspeed;</span><br></pre></td></tr></table></figure>\n<p>如果使用Vector表示则可以简化成：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vector location<span class=\"comment\">;</span></span><br><span class=\"line\">Vector speed<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>编程中使用vector并不会让草图出现什么神奇的变化，但是它能简化代码，并且能提供一些数学函数供使用。开始介绍向量的时候，将不会涉及到3维空间，但是这些例子能很简单就扩展到三维空间中，因为向量类—<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span> 支持三维空间向量。</p>\n<h2 id=\"Vectors-for-Processing-Programmers\"><a href=\"#Vectors-for-Processing-Programmers\" class=\"headerlink\" title=\"Vectors for Processing Programmers\"></a>Vectors for Processing Programmers</h2><p>理解向量的一种方法是它和两个点的区别。考虑一下如何按照指示从一个点到另外一个点。下面是一些例子：</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_02.png\"></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">-15</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">Walk fifteen steps west; turn <span class=\"keyword\">and</span> walk <span class=\"literal\">three</span> steps north.</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">Walk <span class=\"literal\">three</span> steps east; turn <span class=\"keyword\">and</span> walk <span class=\"literal\">five</span> steps north.</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">2</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\">Walk <span class=\"literal\">two</span> steps east; turn <span class=\"keyword\">and</span> walk <span class=\"literal\">one</span> step south.</span><br></pre></td></tr></table></figure>\n<p>在之前的Processing编程中可能也接触过类似的情况，比如指示屏幕上的每个对象水平移动一定数量的像素和垂直移动一定数量的像素。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_03.png\"></p>\n<p>对于每一帧，有：</p>\n<p><strong>new location = velocity applied to current location</strong></p>\n<p>如果速度(velocity)是一个向量，那么位置(position)到底是不是向量？有的说不是，因为位置描述的是空间中的一个点，这和之前的向量描述怎样从一个点运动到另一个点不同。尽管这样，从另外一个角度看，位置可以看成是从原点到所处位置的路径，因此位置可以表示所处位置和原点的相对位置。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_04.png\"></p>\n<p>以弹跳球为例讨论位置(location)和速度(velocity)数据，在上面的代码中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">location x,y</span><br><span class=\"line\"></span><br><span class=\"line\">velocity xspeed,yspeed</span><br></pre></td></tr></table></figure>\n<p>如果我们自己实现一个vector类来保存速度或者位置中的两个变量:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PVector</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">float</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> y;</span><br><span class=\"line\"> </span><br><span class=\"line\">  PVector(<span class=\"keyword\">float</span> x_, <span class=\"keyword\">float</span> y_) &#123;</span><br><span class=\"line\">    x = x_;</span><br><span class=\"line\">    y = y_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>从本质上讲，<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span>是一种存储两个变量的很方便的方法(或者三维空间中的三个变量)。</p>\n<p>如果使用向量，则原来的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> y = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> xspeed = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> yspeed = <span class=\"number\">3.3</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>会变成下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">PVector location = <span class=\"keyword\">new</span> PVector(<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">PVector velocity = <span class=\"keyword\">new</span> PVector(<span class=\"number\">1</span>,<span class=\"number\">3.3</span>);</span><br></pre></td></tr></table></figure>\n<p>有了位置和速度两个向量对象之后，我们对其应用<strong>location = location + velocity</strong>，则会从原来的代码：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">x</span> = x + xspeed<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attr\">y</span> = y + yspeed<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>变成：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">location</span> <span class=\"title\">= location</span> + velocity;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>但是在Processing中，”+”号运算符仅能用于原始值(整数、浮点等)的计算，不能直接用作将对两个<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span>对象相加，<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span>有其自身对应的数学运算函数。</p>\n<h2 id=\"Vector-Addition\"><a href=\"#Vector-Addition\" class=\"headerlink\" title=\"Vector Addition\"></a>Vector Addition</h2><p>正式开始使用<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span>类的<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">add()</span>函数之前，先从数学角度简单介绍一下向量的加法。向量通常是用粗体或者符号上带有一个箭头符号来表示。为了区分向量(vector)和标量(scale，表示单个数，比如整数或者浮点)，书中使用的是带箭头的符号。</p>\n<ul>\n<li>向量：$\\overrightarrow{x}$</li>\n<li>标量：$x$</li>\n</ul>\n<p>对于如下两个变量：</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_05.png\"></p>\n<p>每个向量有两个元素，x、y。两个向量相加，只需要简单的讲其各自的x和y相加即可。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_06.png\"></p>\n<p>换句话说，$\\overrightarrow{w}=\\overrightarrow{u}+\\overrightarrow{v}$，可以写成：</p>\n<script type=\"math/tex; mode=display\">\nw_x=u_x+v_x\\\\\nw_y=u_x+v_x</script><p>既然已经理解了向量的加法，那么就可以在之前自己实现的<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span>类中新增一个<span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">add()</span>函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PVector</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">float</span> x;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> y;</span><br><span class=\"line\"> </span><br><span class=\"line\">  PVector(<span class=\"keyword\">float</span> x_, <span class=\"keyword\">float</span> y_) &#123;</span><br><span class=\"line\">    x = x_;</span><br><span class=\"line\">    y = y_;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//New! A function to add another PVector to this PVector. Simply add the x components and the y  components together.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(PVector v)</span> </span>&#123;</span><br><span class=\"line\">    y = y + v.y;</span><br><span class=\"line\">    x = x + v.x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用向量的思路重新实现例子1.1：</p>\n<p><strong>Example 1.2: Bouncing ball with PVectors!</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">PVector location;</span><br><span class=\"line\">PVector velocity;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  location = <span class=\"keyword\">new</span> PVector(<span class=\"number\">100</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">  velocity = <span class=\"keyword\">new</span> PVector(<span class=\"number\">2.5</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  location.add(velocity);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((location.x &gt; width) || (location.x &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    velocity.x = velocity.x * -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((location.y &gt; height) || (location.y &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">    velocity.y = velocity.y * -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  stroke(<span class=\"number\">0</span>);</span><br><span class=\"line\">  fill(<span class=\"number\">175</span>);</span><br><span class=\"line\">  ellipse(location.x,location.y,<span class=\"number\">16</span>,<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用向量实现的的弹跳球，相比较起最初的代码看起来更加复杂，但是随着我们进入一个由多个对象和多个力组成的更复杂的系统（我们将在第 2 章中介绍），PVector 的好处将变得更加明显。</p>\n<p>然而，我们应该注意上述过渡到向量编程的一个重要方面。 即使我们使用 <span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector()</span>对象来描述两个值——位置的 x 和 y 以及速度的 x 和 y——我们仍然经常需要单独引用每个 <span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector()</span>的 x 和 y 分量。</p>\n<p><span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">ellipse()</span>函数不允许将 <span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector()</span>作为参数。 <span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">ellipse()</span>只能用两个标量值绘制，一个 x 坐标和一个 y 坐标。 因此我们必须深入研究 <span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector()</span>对象并使用面向对象的点语法提取 x 和 y 分量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ellipse(location.x,location.y,<span class=\"number\">16</span>,<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure>\n<p>同样的问题出现在边界判断中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((location.x &gt; width) || (location.x &lt; <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">  velocity.x = velocity.x * -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"More-Vector-Math\"><a href=\"#More-Vector-Math\" class=\"headerlink\" title=\"More Vector Math\"></a>More Vector Math</h2><p>向量自带许多数学计算函数；</p>\n<ul>\n<li>add() — 向量和；</li>\n<li>sub() — 向量差；</li>\n<li>mult() — 向量缩放(乘法)；</li>\n<li>div() — 向量缩放(除法)；</li>\n<li>mag() — 向量幅值；</li>\n<li>setMag() - 设置向量幅值；</li>\n<li>normalize() — 归一化向量(单位向量)；</li>\n<li>limit() — 限制向量的幅值；</li>\n<li>heading() — 2维平面向量方向，输出为角度；</li>\n<li>rotate() — 2维平面向量旋转；</li>\n<li>lerp() — 线性插值到另一个向量；</li>\n<li>dist() — 两个向量之间的欧几里得距离（看作点）；</li>\n<li>angleBetween() — 求两个向量的夹角；</li>\n<li>dot() — 点乘两个向量；</li>\n<li>cross() — 两个向量的叉积（仅与三个维度相关）；</li>\n<li>random2D() - 生成二维空间随机向量；</li>\n<li>random3D() - 生成三维空间随机向量；</li>\n</ul>\n<h3 id=\"Vector-subtraction\"><a href=\"#Vector-subtraction\" class=\"headerlink\" title=\"Vector subtraction\"></a>Vector subtraction</h3><script type=\"math/tex; mode=display\">\n\\begin{align}\n& \\overrightarrow{w}=\\overrightarrow{u}-\\overrightarrow{v}\\\\\n& w_x=u_x-v_x\\\\\n& w_y=u_x-v_x\n\\end{align}</script><p><img src=\"https://natureofcode.com/book/imgs/chapter01/ch01_07.png\"></p>\n<p><span style =\"font-family: Menlo, Monaco, Consolas, monospace;font-size: 16px;\">PVector</span>内部减法实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sub</span><span class=\"params\">(PVector v)</span> </span>&#123;</span><br><span class=\"line\">    x = x - v.x;</span><br><span class=\"line\">    y = y - v.y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>向量减法例程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"comment\">//Two PVectors, one for the mouse location and one for the center of the window</span></span><br><span class=\"line\">  PVector mouse  = <span class=\"keyword\">new</span> PVector(mouseX,mouseY);</span><br><span class=\"line\">  PVector center = <span class=\"keyword\">new</span> PVector(width/<span class=\"number\">2</span>,height/<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">//PVector subtraction!</span></span><br><span class=\"line\">  mouse.sub(center);</span><br><span class=\"line\"><span class=\"comment\">//Draw a line to represent the vector.</span></span><br><span class=\"line\">  translate(width/<span class=\"number\">2</span>,height/<span class=\"number\">2</span>);</span><br><span class=\"line\">  line(<span class=\"number\">0</span>,<span class=\"number\">0</span>,mouse.x,mouse.y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Processing"]},{"title":"The Nature of Code:Particle System","url":"/undefined/TheNatureOfCode-ParticleSystem/","content":"<hr>\n<h1 id=\"粒子系统-Particle-Systems\"><a href=\"#粒子系统-Particle-Systems\" class=\"headerlink\" title=\"粒子系统(Particle Systems)\"></a>粒子系统(Particle Systems)</h1><p><a href=\"https://natureofcode.com/book/chapter-4-particle-systems/\">Click Here Jump To Source Page—The Nature of Code</a></p>\n<p>​    粒子系统是由许多单个粒子的集合，所有这些单个粒子的集合用来表示一个模糊的物体。一段时间内，粒子在系统中生成、移动、变化最后消失。粒子系统是一种在计算机图形中非常常见且有用的技术。</p>\n<p>​    自 1980 年代初以来，粒子系统已被用于无数视频游戏、动画、数字艺术作品和装置中，用以模拟各种不规则类型的自然现象，例如火、烟、瀑布、雾、草、气泡等。</p>\n<p>​    本章重点介绍粒子系统编码的实现。包括：</p>\n<ul>\n<li>如何组织代码；</li>\n<li>在哪里存储单个粒子相关信息而不是整个粒子系统的信息；</li>\n<li>…</li>\n</ul>\n<p>​    虽然本章内容为粒子使用简单的形状和最基本的行为(重力)，但是基于此框架应用更复杂的方式构建粒子和行为，可以实现各种不同的效果。</p>\n<span id=\"more\"></span>\n<h2 id=\"为什么需要粒子系统？\"><a href=\"#为什么需要粒子系统？\" class=\"headerlink\" title=\"为什么需要粒子系统？\"></a>为什么需要粒子系统？</h2><ol>\n<li><p>使用粒子系统能够对例如烟、火、瀑布等已经列出来的自然现象进行建模；</p>\n</li>\n<li><p>更为抽象的意义就是：使用粒子系统的思路来处理需要面对的大量（<em>many</em>）对象编码过程；之前章节在处理大量对象的过程中使用的是数组的方式来实现，粒子系统能够提供一种超越数组的方式‘；</p>\n</li>\n<li><p>编写多个类，以及用以保存其他类实例的类编程思想；</p>\n<p>粒子系统中，需要更加灵活的处理元素数量的方法，除了编写单个粒子的类之外还要实现一个描述粒子集合的类—粒子系统本身。本章的目标是能够实现如下的程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ParticleSystem ps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  ps = <span class=\"keyword\">new</span> ParticleSystem();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\">  ps.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，没有对单个粒子类进行显示引用，但是能够实现整个粒子系统。这是一种非常有用的面向对象编程方式—编写多个类，以及用以保存其他类实例的类。</p>\n</li>\n<li><p>使用另外两种高级面向对象编程（object-oriented programming）的方法：继承(inheritance )和多态(polymorphism)。</p>\n<p>通过继承（和多态），我们将学习一种方便的方法来存储包含不同类型对象的单个列表。 这样，粒子系统不仅需要是单一类型粒子的系统。</p>\n</li>\n</ol>\n<p>​    </p>\n<h2 id=\"单个粒子\"><a href=\"#单个粒子\" class=\"headerlink\" title=\"单个粒子\"></a>单个粒子</h2><p>​    粒子系统是由多个粒子组成的，开始实现系统之前，先实现描述单个粒子的类。第二章中的<code>Mover</code>类可以作为一个很好的模板进行使用。实际上粒子是一个能在屏幕上运动的物体。它具有location、velocity、acceleration，一个用以初始化上述变量的结构体，一个用以显示和更新的函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Particle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//[full] A “Particle” object is just another name for our “Mover.” It has location, velocity, and acceleration.</span></span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  PVector velocity;</span><br><span class=\"line\">  PVector acceleration;</span><br><span class=\"line\">  <span class=\"comment\">//[end]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Particle(PVector l) &#123;</span><br><span class=\"line\">    location = l.get();</span><br><span class=\"line\">    acceleration = <span class=\"keyword\">new</span> PVector();</span><br><span class=\"line\">    velocity = <span class=\"keyword\">new</span> PVector();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    velocity.add(acceleration);</span><br><span class=\"line\">    location.add(velocity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stroke(<span class=\"number\">0</span>);</span><br><span class=\"line\">    fill(<span class=\"number\">175</span>);</span><br><span class=\"line\">    ellipse(location.x,location.y,<span class=\"number\">8</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​    上面为一个最简单的单粒子定义，此外可以添加一个<em>applyfoce()</em>函数控制粒子的运动。添加变量来描述粒子的颜色和形状，或者引用 PImage 来绘制粒子。接下来重点关注一个附加项：<strong><em>生命周期（lifespan）</em></strong>。</p>\n<p>​    典型的粒子系统涉及一种称为<strong><em>发射器（emitter）</em></strong>的东西。发射器是粒子的来源，并控制粒子、位置、速度等的初始设置。发射器可能会发射单个粒子爆发，或连续的粒子流，或两者兼而有之。关键是对于这样的典型实现，粒子在发射器处诞生，但不会永远存在。如果它要永远存在，我们的 Processing 草图最终会随着时间的推移随着粒子数量增加到一个难以处理的数字而停止。随着新粒子的诞生，我们需要旧粒子死亡。这会产生无限粒子流的错觉，并且我们的程序的性能不会受到影响。有许多不同的方法可以决定粒子何时死亡。例如，它可能会接触到另一个物体，或者它可能只是离开屏幕。然而，对于我们的第一个粒子类，我们只是要添加一个寿命变量。计时器将从 255 开始并倒计时至 0，此时粒子将被视为“死亡”。所以我们扩展粒子类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Particle</span> </span>&#123;</span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  PVector velocity;</span><br><span class=\"line\">  PVector acceleration;</span><br><span class=\"line\">  <span class=\"comment\">// A new variable to keep track of how long the particle</span></span><br><span class=\"line\">  <span class=\"comment\">// has been “alive”</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> lifespan; <span class=\"comment\">//[bold]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Particle(PVector l) &#123;</span><br><span class=\"line\">    location = l.get();</span><br><span class=\"line\">    acceleration = <span class=\"keyword\">new</span> PVector();</span><br><span class=\"line\">    velocity = <span class=\"keyword\">new</span> PVector();</span><br><span class=\"line\">    <span class=\"comment\">// We start at 255 and count down for convenience</span></span><br><span class=\"line\">    lifespan = <span class=\"number\">255</span>; <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    velocity.add(acceleration);</span><br><span class=\"line\">    location.add(velocity);</span><br><span class=\"line\">    <span class=\"comment\">// Lifespan decreases</span></span><br><span class=\"line\">    lifespan -= <span class=\"number\">2.0</span>; <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] Since our life ranges from 255 to 0 we can use it for alpha</span></span><br><span class=\"line\">    stroke(<span class=\"number\">0</span>, lifespan); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    fill(<span class=\"number\">175</span>, lifespan); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">    ellipse(location.x, location.y, <span class=\"number\">8</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查询函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isDead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] Is the particle still alive?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lifespan &lt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>我们选择从 255 开始生命周期并倒计时到 0 的原因是为了方便。 有了这些值，我们也可以指定<em>lifespan</em>来充当椭圆的Alpha 透明度。 当粒子“死”时，它也会在屏幕上消失。</p>\n<p>​    加上 <em>lifespan</em> 变量，我们还需要一个额外的函数——一个可以查询（判断真假答案）粒子是”活”还是”死”的函数。 这在我们编写 ParticleSystem 类时会派上用场，该类的任务是管理粒子列表本身。 编写这个函数很容易； 我们只需要检查<em>lifespan</em>的值是否小于0。如果是我们返回<em>true</em>，否则返回<em>false</em>。</p>\n<p>验证单粒子运行</p>\n<p><code>Particlesystem.pde</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// import</span></span><br><span class=\"line\">Particle singleParticle;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">500</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">  <span class=\"comment\">// initialization single particle</span></span><br><span class=\"line\">  PVector initialPos = <span class=\"keyword\">new</span> PVector(random(width/<span class=\"number\">2</span>-<span class=\"number\">50</span>, width/<span class=\"number\">2</span>+<span class=\"number\">50</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">  singleParticle = <span class=\"keyword\">new</span> Particle(initialPos);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\">  singleParticle.run();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (singleParticle.isDead()) &#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Particle dead!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>Particle.pde</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Particle</span> </span>&#123;</span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  PVector velocity;</span><br><span class=\"line\">  PVector acceleration;</span><br><span class=\"line\">  <span class=\"comment\">// A new variable to keep track of how long the particle</span></span><br><span class=\"line\">  <span class=\"comment\">// has been “alive”</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> lifespan; <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Particle(PVector l) &#123;</span><br><span class=\"line\">    location = l.get();</span><br><span class=\"line\">    acceleration = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>, <span class=\"number\">0.05</span>);</span><br><span class=\"line\">    velocity =  <span class=\"keyword\">new</span> PVector(random(-<span class=\"number\">1</span>, <span class=\"number\">1</span>), random(-<span class=\"number\">2</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"comment\">// We start at 255 and count down for convenience</span></span><br><span class=\"line\">    lifespan = <span class=\"number\">255</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    velocity.add(acceleration);</span><br><span class=\"line\">    location.add(velocity);</span><br><span class=\"line\">    <span class=\"comment\">// Lifespan decreases</span></span><br><span class=\"line\">    lifespan -= <span class=\"number\">2.0</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] Since our life ranges from 255 to 0 we can use it for alpha</span></span><br><span class=\"line\">    stroke(<span class=\"number\">0</span>, lifespan); <span class=\"comment\">//</span></span><br><span class=\"line\">    fill(<span class=\"number\">175</span>, lifespan); <span class=\"comment\">//</span></span><br><span class=\"line\">    ellipse(location.x, location.y, <span class=\"number\">8</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 查询函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isDead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] Is the particle still alive?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lifespan &lt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    update();</span><br><span class=\"line\">    display();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>现在我们有了一个描述单个粒子的类，我们已经准备好迈出下一步了。 当我们无法确定在任何给定时间我们可能拥有多少粒子时，我们如何跟踪许多粒子？</p>\n<h2 id=\"动态数组\"><a href=\"#动态数组\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h2><h3 id=\"动态数组-1\"><a href=\"#动态数组-1\" class=\"headerlink\" title=\"动态数组\"></a>动态数组</h3><p>​    实际上，可以使用数组(Array)来管理粒子系统中的多个粒子对象。对于粒子数量固定的粒子系统来说，使用数组是非常有效的方法。Processing同时也提供了，expand()、contract()、subset()、splice()函数来调整数组大小。但是，这章中将会使用Java自带类ArrayList(<a href=\"https://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html\">ArrayList (Java Platform SE 6) (oracle.com)</a>)来代替Array管理粒子。</p>\n<p>使用ArrayList和使用Array存储粒子对象的思想是一样的，只是语法不同。</p>\n<p>如下代码分别使用ArrayList和Array实现的效果是一致的；</p>\n<p><strong>数组方法实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> total = <span class=\"number\">10</span>;</span><br><span class=\"line\">Particle[] parray = <span class=\"keyword\">new</span> Particle[total];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parray.length; i++) &#123;</span><br><span class=\"line\">    parray[i] = <span class=\"keyword\">new</span> Particle();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parray.length; i++) &#123;</span><br><span class=\"line\">    Particle p = parray[i];</span><br><span class=\"line\">    p.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>ArrayList实现</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> total = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;Particle&gt; plist = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; total; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// An object is added to an ArrayList with add().</span></span><br><span class=\"line\">    plist.add(<span class=\"keyword\">new</span> Particle());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// The size of the ArrayList is returned by size().</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; plist.size(); i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// An object is accessed from the ArrayList with get(). </span></span><br><span class=\"line\">    Particle p = plist.get(i);</span><br><span class=\"line\">    p.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ArrayList中的加强for循环，’:’操作符。</p>\n<h3 id=\"加强for循环操作符’-’\"><a href=\"#加强for循环操作符’-’\" class=\"headerlink\" title=\"加强for循环操作符’:’\"></a>加强for循环操作符’:’</h3><p>对于ArrayList\\<Particle> 类可以使用’:’操作符号替换for，使得for迭代更加优雅、简洁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 标准for循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;plist.size();i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Particle p=plist.get(i);</span><br><span class=\"line\">    p.run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ‘:’操作符号</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Particle p : plist)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    p.run();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态调整数组大小\"><a href=\"#动态调整数组大小\" class=\"headerlink\" title=\"动态调整数组大小\"></a>动态调整数组大小</h3><p>​    要求：在粒子系统中，实现每个draw循环周期新增一个粒子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Particle&gt; particles;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\">  <span class=\"comment\">// A new Particle object is added to the ArrayList every cycle through draw().</span></span><br><span class=\"line\">  particles.add(<span class=\"keyword\">new</span> Particle(<span class=\"keyword\">new</span> PVector(width/<span class=\"number\">2</span>,<span class=\"number\">50</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; particles.size(); i++) &#123;</span><br><span class=\"line\">    Particle p = particles.get(i);</span><br><span class=\"line\">    p.run();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码能够满足要求，但是如果持续运行一段时间，会因为内存消耗过大导致程序崩溃，因为每个draw循环周期向着ArrayList中持续添加元素，ArrayList的大小会不断增大。</p>\n<p>对应上述问题，通常我们会想到的方法是，减小ArrayList的元素个数，然后出现如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; particles.size(); i++) &#123;</span><br><span class=\"line\">  Particle p = particles.get(i);</span><br><span class=\"line\">  p.run();</span><br><span class=\"line\">  <span class=\"comment\">//If the particle is “dead,” we can go ahead and delete it from the list.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (p.isDead()) &#123;</span><br><span class=\"line\">    particles.remove(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码尽管能够消除ArrayList中元素过多，导致内存占用过大的问题，但是它存在一个很不容易发现的隐患。</p>\n<p>通过堆栈的方式来对上面代码进行分析，ArrayList在增加和删除元素的过程中，应该是这样一个过程，</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter04/ch04_01.png\"></p>\n<p>for循环中，通过指针i的变化，索引到不同的元素：</p>\n<ol>\n<li>i=0 :arrow_right: 检查粒子A是否消失 :arrow_right: 保留粒子A</li>\n<li>i=1:arrow_right: 检查粒子B是否消失 :arrow_right: 保留粒子B</li>\n<li>i=2 :arrow_right: 检查粒子C是否消失 :arrow_right: 删除粒子C</li>\n<li>(系统自动)将粒子D和粒子E移动到原来粒子C和粒子E所占的内存地址。</li>\n</ol>\n<p>但是在实现的过程中，由于删除完C时候，i=2，但是D又移动到原来C的位置上，所以这种简单的for循环实现方式并不能对D进行检查，存在漏检问题。针对上面一种情况，有两种解决方法：一种向后(backwards)迭代(iterate)ArrayList、另外一种是使用Jave提供的一种特殊类Iterator。</p>\n<p><strong>Iterator</strong> 能够实现：</p>\n<ul>\n<li>给出下一个元素；</li>\n<li>保证迭代过程中，即使出现移除元素也不会出现元素漏掉或二次出现；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\">ArrayList&lt;Particle&gt; particles;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>, <span class=\"number\">360</span>);</span><br><span class=\"line\">  particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">255</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  particles.add(<span class=\"keyword\">new</span> Particle(<span class=\"keyword\">new</span> PVector(width/<span class=\"number\">2</span>, <span class=\"number\">50</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">  Iterator&lt;Particle&gt; it = particles.iterator();</span><br><span class=\"line\">  <span class=\"comment\">//Using an Iterator object instead of counting with int i</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    Particle p = it.next();</span><br><span class=\"line\">    p.run();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.isDead()) &#123;</span><br><span class=\"line\">      it.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"粒子系统类-The-Particle-System-Class\"><a href=\"#粒子系统类-The-Particle-System-Class\" class=\"headerlink\" title=\"粒子系统类(The Particle System Class)\"></a>粒子系统类(The Particle System Class)</h2><p>​    前面的章节已经实现了单个粒子类、使用ArrayList来管理多个粒子对象。现在需要实现一个ParticleSystem类，用来描述粒子系统本身的行为和属性。对粒子系统抽象成一个类，能够避免在<em>main</em>标签中冗杂的for循环，以及允许一个<em>main</em>标签中定义多个粒子系统。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParticleSysSelf</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  ArrayList&lt;Particle&gt; particles;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// constructor</span></span><br><span class=\"line\">  ParticleSysSelf()</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// +</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addParticle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    particles.add(<span class=\"keyword\">new</span> Particle());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// operator</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">    Iterator&lt;Particle&gt; it = particles.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      Particle p = it.next();</span><br><span class=\"line\">      p.run();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.isDead())</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>⏳ 2022-05-27 16:11</p>\n<h2 id=\"系统的系统\"><a href=\"#系统的系统\" class=\"headerlink\" title=\"系统的系统\"></a>系统的系统</h2><p>系统是由一部分基本元素构成的，多个粒子(Particle)对象组成粒子系统(system of particle)，一个粒子系统就是多个粒子对象的集合。当然，粒子系统也可以看作是一个组成更大系统的元素，多个粒子系统的集合就叫粒子系统的系统(system of particle system)。</p>\n<h2 id=\"继承和多态性：介绍\"><a href=\"#继承和多态性：介绍\" class=\"headerlink\" title=\"继承和多态性：介绍\"></a>继承和多态性：介绍</h2><p>面向对象(object-oriented )编程理论三个基本要素：继承(Inheritance )、多态(Polymorphism)、封装(encapsulation)；</p>\n<p>考虑如下的情景，使用processing给你的朋友做一个生日贺卡，生日贺卡是由不同的彩色碎纸组成，这些碎纸有不同的颜色、形状、动作等属性。你可能会想到的解决方案是，先分别实现不同的碎纸类，然后再将这些类组成碎纸系统；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义不同类型的碎纸类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HappyConfetti</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FunConfetti</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WackyConfetti</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来实现一个彩色碎纸系统，碎纸系统构造函数中引用不同的碎纸类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParticleSystem</span> </span>&#123;</span><br><span class=\"line\">  ParticleSystem(<span class=\"keyword\">int</span> num) &#123;</span><br><span class=\"line\">    particles = <span class=\"keyword\">new</span> ArrayList();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">float</span> r = random(<span class=\"number\">1</span>);</span><br><span class=\"line\">Randomly picking a <span class=\"string\">&quot;kind&quot;</span> of particle</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>      (r &lt; <span class=\"number\">0.33</span>) &#123; particles.add(<span class=\"keyword\">new</span> HappyConfetti()); &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0.67</span>) &#123; particles.add(<span class=\"keyword\">new</span> FunConfetti());   &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span>               &#123; particles.add(<span class=\"keyword\">new</span> WackyConfetti()); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上述能够实现想要的功能，但是存在两个问题：</p>\n<ol>\n<li>实现过程中，会拷贝\\粘贴许多重复的代码；</li>\n<li>ArrayList不会知道具体是新增的哪个类；</li>\n</ol>\n<p>要解决问题2可以通过申明不同的类型ArrayList来实现，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;HappyConfetti&gt; a1 = <span class=\"keyword\">new</span> ArrayList&lt;HappyConfetti&gt;();</span><br><span class=\"line\">ArrayList&lt;FunConfetti&gt;   a2 = <span class=\"keyword\">new</span> ArrayList&lt;FunConfetti&gt;();</span><br><span class=\"line\">ArrayList&lt;WackyConfetti&gt; a3 = <span class=\"keyword\">new</span> ArrayList&lt;WackyConfetti&gt;();</span><br></pre></td></tr></table></figure>\n<p>这似乎非常不方便，因为我们真的只想要一个列表来跟踪粒子系统中的所有内容。 这可以通过多态性来实现。多态性将允许我们将不同类型的对象视为相同类型并将它们存储在单个 ArrayList 中。</p>\n<h2 id=\"继承基础\"><a href=\"#继承基础\" class=\"headerlink\" title=\"继承基础\"></a>继承基础</h2><p>让我们举一个不同的例子，动物世界：狗、猫、猴子、熊猫、袋熊和海荨麻。 我们将从编写 Dog 类开始。 Dog 对象将有一个年龄变量（一个整数），以及 eat()、sleep() 和 bark() 函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    Dog()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// eat</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// sleep</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// bark</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们实现一个Cat类，该类同样具有Dog类一样的属性和函数，那么代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    Cat()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// constructor</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// eat</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// sleep</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// bark</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当我们为鱼、马、考拉和狐猴重写相同的代码时，这个过程将变得相当乏味。 相反，让我们开发一个可以描述任何类型动物的通用 Animal 类。 毕竟，所有的动物都吃和睡。 那么我们可以说：</p>\n<ul>\n<li>狗是动物，具有动物的所有特性，可以做动物做的所有事情。 此外，狗会吠叫。</li>\n<li>猫是动物，具有动物的所有特性，可以做动物做的所有事情。 此外，猫会喵喵叫。</li>\n</ul>\n<p>继承使这一切成为可能。 通过继承，类可以从其他类继承属性（变量）和功能（方法）。 Dog 类是 Animal 类的子类。 子类会自动继承父类（超类）的所有变量和函数，但也可以包含父类中没有的函数和变量。 就像“生命之树”一样，遗传遵循树形结构。 狗从犬科继承，从哺乳动物继承，从动物继承，等等。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter04/ch04_02.png\"></p>\n<p>使用继承的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The Animal class is the parent (or super) class.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Dog and Cat inherit the variable age.</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">  Animal() &#123;</span><br><span class=\"line\">    age = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//[full] Dog and Cat inherit the functions eat() and sleep().</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Yum!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sleep</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;Zzzzzz&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//[end]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The Dog class is the child (or sub) class, indicated by the code &quot;extends Animal&quot;.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123; <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  Dog() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// super() executes code found in the parent class.</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// We define bark() in the child class, since it isn&#x27;t part of the parent class.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;WOOF!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  Cat() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">meow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;MEOW!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继承引入的两个新术语：</p>\n<ul>\n<li><code>extends</code> 关键字用于表明正在定义的类的父级。 类只能扩展一个类。 但是，类可以扩展其他类的类，即 Dog 扩展 Animal，Terrier 扩展 Dog。 </li>\n<li><code>super()</code> - 这会调用父类中的构造函数。 换句话说，无论你在父构造函数中做什么，在子构造函数中也一样。 除了 super() 之外，还可以将其他代码写入构造函数。 如果父构造函数定义了匹配的参数，super() 也可以接收参数。</li>\n</ul>\n<p>子类中可以定义父类中不具有的属性和功能。例如，假设Dog类的对象除了age外还有haircolor属性，并且其是随机的，那么代码实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// A child class can introduce new variables not</span></span><br><span class=\"line\">  <span class=\"comment\">// included in the parent.</span></span><br><span class=\"line\">  color haircolor;</span><br><span class=\"line\">  Dog() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    haircolor = color(random(<span class=\"number\">255</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;WOOF!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意父类构造函数是如何通过 super() 调用的，它将年龄设置为 0，但是头发颜色是在 Dog类构造函数本身设置的。 如果 Dog 对象与一般 Animal 对象的eat方法不同，则可以通过重写(overwirte)子类中的函数来覆盖父函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  color haircolor;</span><br><span class=\"line\"></span><br><span class=\"line\">  Dog() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>();</span><br><span class=\"line\">     haircolor = color(random(<span class=\"number\">255</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// A child can override a parent function if necessary.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// A Dog&#x27;s specific eating characteristics</span></span><br><span class=\"line\">    println(<span class=\"string\">&quot;Woof! Woof! Slurp.&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;WOOF!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，如果Dog类的eat方法和Animal一样，只是有一些额外的功能，子类既可以运行父类的代码，也可以合并自定义代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">   color haircolor;</span><br><span class=\"line\"></span><br><span class=\"line\">   Dog() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">super</span>();</span><br><span class=\"line\">     haircolor = color(random(<span class=\"number\">255</span>));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">// Call eat() from Animal.</span></span><br><span class=\"line\">     <span class=\"comment\">// A child can execute a function from the parent</span></span><br><span class=\"line\">     <span class=\"comment\">// while adding its own code.</span></span><br><span class=\"line\">     <span class=\"keyword\">super</span>.eat(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">     <span class=\"comment\">// Add some additional code</span></span><br><span class=\"line\">     <span class=\"comment\">// for a Dog&#x27;s specific eating characteristics.</span></span><br><span class=\"line\">     println(<span class=\"string\">&quot;Woof!!!&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bark</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    println(<span class=\"string\">&quot;WOOF!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具有继承性的粒子\"><a href=\"#具有继承性的粒子\" class=\"headerlink\" title=\"具有继承性的粒子\"></a>具有继承性的粒子</h2><p>现在我们已经介绍了继承的理论及其语法，我们可以基于已有的Particle 类在 Processing 中开发一个工作示例。</p>\n<p>一个简单的粒子类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Particle</span> </span>&#123;</span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  PVector velocity;</span><br><span class=\"line\">  PVector acceleration;</span><br><span class=\"line\"></span><br><span class=\"line\">  Particle(PVector l) &#123;</span><br><span class=\"line\">    acceleration = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0.05</span>);</span><br><span class=\"line\">    velocity = <span class=\"keyword\">new</span> PVector(random(-<span class=\"number\">1</span>,<span class=\"number\">1</span>),random(-<span class=\"number\">2</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    location = l.get();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    update();</span><br><span class=\"line\">    display();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    velocity.add(acceleration);</span><br><span class=\"line\">    location.add(velocity);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">    ellipse(location.x,location.y,<span class=\"number\">8</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们从 Particle 创建一个子类（我们称之为 Confetti）。 它将从 Particle 继承所有实例变量和方法。 我们编写了一个名为 Confetti 的新构造函数，并通过调用 super() 从父类执行代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Confetti</span> <span class=\"keyword\">extends</span> <span class=\"title\">Particle</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We could add variables for only Confetti here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Confetti(PVector l) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(l);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// There is no code here because we inherit update() from parent.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//[full] Override the display method.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    rectMode(CENTER);</span><br><span class=\"line\">    fill(<span class=\"number\">175</span>);</span><br><span class=\"line\">    stroke(<span class=\"number\">0</span>);</span><br><span class=\"line\">    rect(location.x,location.y,<span class=\"number\">8</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//[end]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然可以让Confetti类的形式更加复杂，比如让其能够按照一定规律旋转，那么覆写display函数既可以实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> theta = map(location.x,<span class=\"number\">0</span>,width,<span class=\"number\">0</span>,TWO_PI*<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  rectMode(CENTER);</span><br><span class=\"line\">  fill(<span class=\"number\">0</span>,lifespan);</span><br><span class=\"line\">  stroke(<span class=\"number\">0</span>,lifespan);</span><br><span class=\"line\">\t</span><br><span class=\"line\">  pushMatrix();</span><br><span class=\"line\">  translate(location.x,location.y);</span><br><span class=\"line\">  rotate(theta);</span><br><span class=\"line\">  rect(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">  popMatrix();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们有了一个扩展基本粒子类的 Confetti 类，我们需要弄清楚ParticleSystem 类如何在同一系统中管理不同类型的粒子。 为了实现这个目标，让我们回到动物界继承的例子，看看这个概念是如何延伸到多态世界的。</p>\n<h2 id=\"多态基础\"><a href=\"#多态基础\" class=\"headerlink\" title=\"多态基础\"></a>多态基础</h2><p>将 一个Dog 对象视为 Dog 类或 Animal 类（其父类）的成员的能力是多态性的一个示例。 <strong>多态性（来自希腊语 polymorphos，意为多种形式）是指以多种形式处理对象的单个实例。</strong> 狗当然是狗，但由于 Dog类继承自 Animal类，它也可以被认为是动物。 在代码中，我们可以两种方式引用它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Dog rover = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">Animal spot = <span class=\"keyword\">new</span> Dog();</span><br></pre></td></tr></table></figure>\n<p>尽管第二行代码最初似乎违反了语法规则，但声明 Dog 对象的两种方式都是合法的。 即使我们将 spot 声明为 Animal 对象，我们实际上是在创建 Dog 对象并将其存储在 spot 变量中。 我们可以安全地调用所有 Animal 类方法，因为继承规则规定狗可以做任何动物可以做的事情。  但是，如果 Dog 类覆盖 Animal 类中的 eat() 函数怎么办？ 即使将spot 声明为Animal，Java 也会确定它的真实身份是Dog 并运行适当版本的eat() 函数。 当我们有一个数组或 ArrayList 时，这特别有用。</p>\n<h2 id=\"具有多态性的粒子系统\"><a href=\"#具有多态性的粒子系统\" class=\"headerlink\" title=\"具有多态性的粒子系统\"></a>具有多态性的粒子系统</h2><p>让我们暂时假设不存在多态性并重写一个 ParticleSystem 类以包含许多 Particle 对象和许多 Confetti 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParticleSystem</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//[full] We’re stuck doing everything twice with two lists!</span></span><br><span class=\"line\">  ArrayList&lt;Particle&gt; particles; <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  ArrayList&lt;Confetti&gt; confetti; <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  PVector origin;</span><br><span class=\"line\"></span><br><span class=\"line\">  ParticleSystem(PVector location) &#123;</span><br><span class=\"line\">    origin = location.get();</span><br><span class=\"line\">    <span class=\"comment\">//[full] We’re stuck doing everything twice with two lists!</span></span><br><span class=\"line\">    particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    confetti = <span class=\"keyword\">new</span> ArrayList&lt;Confetti&gt;(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addParticle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] We’re stuck doing everything twice with two lists!</span></span><br><span class=\"line\">    particles.add(<span class=\"keyword\">new</span> Particle(origin)); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    particles.add(<span class=\"keyword\">new</span> Confetti(origin)); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] We’re stuck doing everything twice with two lists!</span></span><br><span class=\"line\">    Iterator&lt;Particle&gt; it = particles.iterator(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">      Particle p = it.next();</span><br><span class=\"line\">      p.run();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.isDead()) &#123;</span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    it = confetti.iterator(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">      Confetti c = it.next();</span><br><span class=\"line\">      c.run();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c.isDead()) &#123;</span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们有两个单独的列表，一个用于particle，一个用于confetti。 我们想要执行的每个动作都必须执行两次！ 多态性允许我们通过只创建一个包含标准粒子对象和五彩纸屑对象的粒子 ArrayList 来简化上述操作。 我们不必担心哪个是哪个； 这一切都会为我们解决！ （另外，请注意主程序和类的代码并没有改变，所以我们没有在这里包含它。请参阅网站以获取完整示例。）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParticleSystem</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// One list, for anything that is a Particle</span></span><br><span class=\"line\">  <span class=\"comment\">// or extends Particle</span></span><br><span class=\"line\">  ArrayList&lt;Particle&gt; particles;  <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">  PVector origin;</span><br><span class=\"line\"></span><br><span class=\"line\">  ParticleSystem(PVector location) &#123;</span><br><span class=\"line\">    origin = location.get();</span><br><span class=\"line\">    particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addParticle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> r = random(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// We have a 50% chance of adding each kind of Particle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r &lt; <span class=\"number\">0.5</span>) &#123;</span><br><span class=\"line\">      particles.add(<span class=\"keyword\">new</span> Particle(origin));  <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      particles.add(<span class=\"keyword\">new</span> Confetti(origin));  <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Iterator&lt;Particle&gt; it = particles.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Polymorphism allows us to treat everything as a</span></span><br><span class=\"line\">      <span class=\"comment\">// Particle, whether it is a Particle or a Confetti.</span></span><br><span class=\"line\">      Particle p = it.next(); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">      p.run();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.isDead()) &#123;</span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具有力的粒子系统\"><a href=\"#具有力的粒子系统\" class=\"headerlink\" title=\"具有力的粒子系统\"></a>具有力的粒子系统</h2><p>到目前为止，在本章中，我们一直专注于以面向对象的思想来构建代码。 也许您注意到了，或者您没有注意到，但是在此过程中，我们不知不觉地从前章中的位置往后几步（这里指的是对粒子运动复杂性）。 让我们检查一下简单粒子类的构造函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Particle(PVector l) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// We’re setting acceleration to a constant value!</span></span><br><span class=\"line\">  acceleration = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0.05</span>); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  velocity = <span class=\"keyword\">new</span> PVector(random(-<span class=\"number\">1</span>,<span class=\"number\">1</span>),random(-<span class=\"number\">2</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">  location = l.get();</span><br><span class=\"line\">  lifespan = <span class=\"number\">255.0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>update()</em>函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyForce</span><span class=\"params\">(PVector force)</span> </span>&#123;</span><br><span class=\"line\">  PVector f = force.get();</span><br><span class=\"line\">  f.div(mass);</span><br><span class=\"line\">  acceleration.add(f);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有了上述代码，可以在<em>update()</em>函数中添加一行代码来清除加速度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  velocity.add(acceleration);</span><br><span class=\"line\">  location.add(velocity);</span><br><span class=\"line\">  <span class=\"comment\">// There it is!</span></span><br><span class=\"line\">  acceleration.mult(<span class=\"number\">0</span>);</span><br><span class=\"line\">  lifespan -= <span class=\"number\">2.0</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>添加加速度属性的粒子系统完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Particle</span> </span>&#123;</span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  PVector velocity;</span><br><span class=\"line\">  PVector acceleration;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> lifespan;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We could vary mass for more interesting results.</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> mass = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  Particle(PVector l) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// We now start with acceleration of 0.</span></span><br><span class=\"line\">    acceleration = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    velocity = <span class=\"keyword\">new</span> PVector(random(-<span class=\"number\">1</span>,<span class=\"number\">1</span>),random(-<span class=\"number\">2</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">    location = l.get();</span><br><span class=\"line\">    lifespan = <span class=\"number\">255.0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    update();</span><br><span class=\"line\">    display();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Newton’s second law &amp; force accumulation</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyForce</span><span class=\"params\">(PVector force)</span> </span>&#123;</span><br><span class=\"line\">    PVector f = force.get();</span><br><span class=\"line\">    f.div(mass);</span><br><span class=\"line\">    acceleration.add(f);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Standard update</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    velocity.add(acceleration);</span><br><span class=\"line\">    location.add(velocity);</span><br><span class=\"line\">    acceleration.mult(<span class=\"number\">0</span>);</span><br><span class=\"line\">    lifespan -= <span class=\"number\">2.0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Our Particle is a circle.</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stroke(<span class=\"number\">255</span>,lifespan);</span><br><span class=\"line\">    fill(<span class=\"number\">255</span>,lifespan);</span><br><span class=\"line\">    ellipse(location.x,location.y,<span class=\"number\">8</span>,<span class=\"number\">8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//  Should the Particle be deleted?</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isDead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lifespan &lt; <span class=\"number\">0.0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，粒子类已经完成，我们有一个非常重要的问题要问。 在哪里调用<em>applyforce()</em>函数更为好？ 在粒子类update()代码中，将力施加到粒子上是否合适？ 事实是没有正确或错误的答案； 这实际上取决于特定处理草图的确切功能和目标。 尽管如此，我们仍可以提出一种可能适用于大多数情况的通用解决方案，并制定一个模型，以将力施加到系统中的单个粒子。 </p>\n<p>让我们考虑以下任务：每次通过<em>draw()</em>函数施加一个全局的力到每个粒子上。 使用一个指定下的重力来举例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">PVector gravity = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>);</span><br></pre></td></tr></table></figure>\n<p>完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ParticleSystem ps;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  ps = <span class=\"keyword\">new</span> ParticleSystem(<span class=\"keyword\">new</span> PVector(width/<span class=\"number\">2</span>,<span class=\"number\">50</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Apply a force to all particles.</span></span><br><span class=\"line\">  PVector gravity = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>); </span><br><span class=\"line\">  ps.applyForce(gravity); </span><br><span class=\"line\"></span><br><span class=\"line\">  ps.addParticle();</span><br><span class=\"line\">  ps.run();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParticleSystem</span> </span>&#123;</span><br><span class=\"line\">  ArrayList&lt;Particle&gt; particles;</span><br><span class=\"line\">  PVector origin;</span><br><span class=\"line\"></span><br><span class=\"line\">  ParticleSystem(PVector location) &#123;</span><br><span class=\"line\">    origin = location.get();</span><br><span class=\"line\">    particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addParticle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    particles.add(<span class=\"keyword\">new</span> Particle(origin));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyForce</span><span class=\"params\">(PVector f)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Using an enhanced loop to apply the force to all particles</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Particle p: particles) &#123;</span><br><span class=\"line\">      p.applyForce(f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//  Can’t use the enhanced loop because we want to check for particles to delete.</span></span><br><span class=\"line\">    Iterator&lt;Particle&gt; it = particles.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">      Particle p = (Particle) it.next();</span><br><span class=\"line\">      p.run();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.isDead()) &#123;</span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"带排斥器的粒子系统\"><a href=\"#带排斥器的粒子系统\" class=\"headerlink\" title=\"带排斥器的粒子系统\"></a>带排斥器的粒子系统</h2><p>如果我们想让给这个例子进一步添加一个排斥器(Repeller)对象——第二章中介绍的吸引子(Attractor)的反面，该怎么办？这需要更复杂一点，因为与重力不同，吸引子或排斥器施加在粒子上的每个力都必须针对每个粒子进行计算。</p>\n<table><tr>\n<td><img src=https://natureofcode.com/book/imgs/chapter04/ch04_03.png border=0></td>\n<td><img src=https://natureofcode.com/book/imgs/chapter04/ch04_04.png border=0></td>\n</tr></table>\n\n<p>让我们通过检查如何将新的 Repeller 对象合并到对简单粒子系统施力的示例中来开始解决这个问题。 需要在代码中添加两个主要内容：</p>\n<ol>\n<li>一个 Repeller 对象（声明、初始化和显示）。</li>\n<li>将 Repeller 对象传递到 ParticleSystem 的函数，以便它可以对每个粒子对象施加力。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">ParticleSystem ps;</span><br><span class=\"line\"><span class=\"comment\">// New thing: we declare a Repeller object.</span></span><br><span class=\"line\">Repeller repeller; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  ps = <span class=\"keyword\">new</span> ParticleSystem(<span class=\"keyword\">new</span> PVector(width/<span class=\"number\">2</span>,<span class=\"number\">50</span>));</span><br><span class=\"line\">  <span class=\"comment\">//  initialize a Repeller object.</span></span><br><span class=\"line\">  repeller = <span class=\"keyword\">new</span> Repeller(width/<span class=\"number\">2</span>-<span class=\"number\">20</span>,height/<span class=\"number\">2</span>); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">100</span>);</span><br><span class=\"line\">  ps.addParticle();</span><br><span class=\"line\"></span><br><span class=\"line\">  PVector gravity = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// apply gravity to every particle in  system of particle</span></span><br><span class=\"line\">  ps.applyForce(gravity);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// New thing: apply a force from a repeller.</span></span><br><span class=\"line\">  ps.applyRepeller(repeller); <span class=\"comment\">//[bold]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ps.run();</span><br><span class=\"line\">  <span class=\"comment\">//  we display the Repeller object.</span></span><br><span class=\"line\">  repeller.display();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Repeller类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Repeller</span> </span>&#123;</span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> r = <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  Repeller(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)  &#123;</span><br><span class=\"line\">    location = <span class=\"keyword\">new</span> PVector(x,y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stroke(<span class=\"number\">255</span>);</span><br><span class=\"line\">    fill(<span class=\"number\">255</span>);</span><br><span class=\"line\">    ellipse(location.x,location.y,r*<span class=\"number\">2</span>,r*<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更难的问题是，在粒子系统类中如何编写 applyRepeller() 函数？ 与将 PVector 传递给函数的applyForce() 不同， applyRepeller()需要将 Repeller 对象传递到函数中，并在函数中完成计算 repeller 和所有粒子之间的力。首先来看一下两个函数各自需要具有的功能：</p>\n<table class=\"code\">\n<tbody><tr>\n<th>applyForce()</th>\n<th>applyRepeller</th>\n</tr>\n<tr>\n<td>\n<pre>void applyForce(PVector f) {\n  for (Particle p: particles) {\n    p.applyForce(f);\n  }\n}\n</pre>\n</td>\n<td>\n<pre>void applyRepeller(Repeller r) {\n  for (Particle p: particles) {\n    PVector force = r.repel(p);\n    p.applyForce(force);\n  }\n}\n</pre>\n</td>\n</tr>\n</tbody></table>\n\n<p>功能几乎相同。 只有两个区别。 </p>\n<ol>\n<li>函数的参数不同，一个是Repeller对象，一个是PVector对象。</li>\n<li>必须为每个粒子单独计算力(PVector)并将其作用到粒子上。</li>\n</ol>\n<p>这个力是如何计算的？在repel() 的函数中，它是我们为 Attractor 类编写的吸引函数的反函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">PVector <span class=\"title\">repel</span><span class=\"params\">(Particle p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1) Get force direction.</span></span><br><span class=\"line\">    PVector dir =</span><br><span class=\"line\">        PVector.sub(location,p.location);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//2) Get distance (constrain distance).</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> d = dir.mag();</span><br><span class=\"line\">    d = constrain(d,<span class=\"number\">5</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    dir.normalize();</span><br><span class=\"line\">    <span class=\"comment\">// 3) Calculate magnitude.</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> force = -<span class=\"number\">1</span> * G / (d * d);</span><br><span class=\"line\">    <span class=\"comment\">// 4) Make a vector out of direction and magnitude.</span></span><br><span class=\"line\">    dir.mult(force);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dir;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上述添加排斥器的整个过程中，我们从未考虑过改变Particle类本身。 粒子实际上并不需要知道任何关于其类细节的信息。 它只需要管理它的位置、速度和加速度，并具有接收外力并对其施加作用的能力。 因此，我们现在可以完整地查看这个示例，再次省略没有更改的 Particle 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// One ParticleSystem</span></span><br><span class=\"line\">ParticleSystem ps;</span><br><span class=\"line\"><span class=\"comment\">// One repeller</span></span><br><span class=\"line\">Repeller repeller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  size(<span class=\"number\">640</span>,<span class=\"number\">360</span>);</span><br><span class=\"line\">  ps = <span class=\"keyword\">new</span> ParticleSystem(<span class=\"keyword\">new</span> PVector(width/<span class=\"number\">2</span>,<span class=\"number\">50</span>));</span><br><span class=\"line\">  repeller = <span class=\"keyword\">new</span> Repeller(width/<span class=\"number\">2</span>-<span class=\"number\">20</span>,height/<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  background(<span class=\"number\">100</span>);</span><br><span class=\"line\">  ps.addParticle();</span><br><span class=\"line\">  <span class=\"comment\">// We’re applying a universal gravity.</span></span><br><span class=\"line\">  PVector gravity = <span class=\"keyword\">new</span> PVector(<span class=\"number\">0</span>,<span class=\"number\">0.1</span>);</span><br><span class=\"line\">  ps.applyForce(gravity);</span><br><span class=\"line\">  <span class=\"comment\">// Applying the repeller</span></span><br><span class=\"line\">  ps.applyRepeller(repeller);</span><br><span class=\"line\"></span><br><span class=\"line\">  ps.run();</span><br><span class=\"line\">  repeller.display();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The ParticleSystem manages all the Particles.</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParticleSystem</span> </span>&#123;</span><br><span class=\"line\">  ArrayList&lt;Particle&gt; particles;</span><br><span class=\"line\">  PVector origin;</span><br><span class=\"line\"></span><br><span class=\"line\">  ParticleSystem(PVector location) &#123;</span><br><span class=\"line\">    origin = location.get();</span><br><span class=\"line\">    particles = <span class=\"keyword\">new</span> ArrayList&lt;Particle&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addParticle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    particles.add(<span class=\"keyword\">new</span> Particle(origin));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Applying a force as a PVector</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyForce</span><span class=\"params\">(PVector f)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Particle p: particles) &#123;</span><br><span class=\"line\">      p.applyForce(f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">applyRepeller</span><span class=\"params\">(Repeller r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//[full] Calculating a force for each Particle based on a Repeller</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Particle p: particles) &#123;</span><br><span class=\"line\">      PVector force = r.repel(p);</span><br><span class=\"line\">      p.applyForce(force);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Iterator&lt;Particle&gt; it = particles.iterator();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">      Particle p = (Particle) it.next();</span><br><span class=\"line\">      p.run();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p.isDead()) &#123;</span><br><span class=\"line\">        it.remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Repeller</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// How strong is the repeller?</span></span><br><span class=\"line\">  <span class=\"keyword\">float</span> strength = <span class=\"number\">100</span>;</span><br><span class=\"line\">  PVector location;</span><br><span class=\"line\">  <span class=\"keyword\">float</span> r = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  Repeller(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y)  &#123;</span><br><span class=\"line\">    location = <span class=\"keyword\">new</span> PVector(x,y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    stroke(<span class=\"number\">255</span>);</span><br><span class=\"line\">    fill(<span class=\"number\">255</span>);</span><br><span class=\"line\">    ellipse(location.x,location.y,r*<span class=\"number\">2</span>,r*<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\">PVector <span class=\"title\">repel</span><span class=\"params\">(Particle p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// This is the same repel algorithm we used in Chapter 2: forces based on gravitational attraction.</span></span><br><span class=\"line\">    PVector dir = PVector.sub(location,p.location);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> d = dir.mag();</span><br><span class=\"line\">    dir.normalize();</span><br><span class=\"line\">    d = constrain(d,<span class=\"number\">5</span>,<span class=\"number\">100</span>);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> force = -<span class=\"number\">1</span> * strength / (d * d);</span><br><span class=\"line\">    dir.mult(force);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dir;</span><br><span class=\"line\">    <span class=\"comment\">//[end]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"图像纹理和加性混合\"><a href=\"#图像纹理和加性混合\" class=\"headerlink\" title=\"图像纹理和加性混合\"></a>图像纹理和加性混合</h2><p>尽管这本书实际上是关于行为和算法而不是计算机图形和设计，但我认为如果我们讨论粒子系统并且从未看过涉及每个纹理的示例，我们将无法忍受自己带有图像的粒子。 就设计某些类型的视觉效果而言，选择绘制粒子的方式是难题的重要组成部分。</p>\n<p>这两个图像都是由相同的算法生成的。 唯一的区别是在图像 A 中为每个粒子绘制了一个白色圆圈，而在 B 中为每个粒子绘制了一个“模糊”斑点。</p>\n<p><img src=\"https://natureofcode.com/book/imgs/chapter04/ch04_05.png\"></p>\n<p>在你编写任何代码之前，需要先制作图像纹理！建议使用 PNG 格式，因为在绘制图像时将保留 alpha 通道（即透明度），这是将纹理混合为相互叠加的粒子层所必需的。</p>\n<hr>\n<p>By W.h. 2022-06-15 11:28:39</p>\n","categories":["Processing"]},{"title":"MATLAB近邻算法分类指南","url":"/undefined/classification-using-nearest-neighbors-instruction-matlab/","content":"<div style=\"text-align:center;\">\n    <img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/KNN-1.gif\" style=\"width:400px;height:250px;\">\n</div>\n\n<span id=\"more\"></span>\n<h1 id=\"近邻算法分类\"><a href=\"#近邻算法分类\" class=\"headerlink\" title=\"近邻算法分类\"></a>近邻算法分类</h1><p style=\"text-align:left;\">\n    原文:<a href=\"https://ww2.mathworks.cn/help/stats/classification-using-nearest-neighbors.html#bsfjytu-1\">Classification Using Nearest Neighbors</a>\n</p>\n\n<h2 id=\"1-距离度量指标\"><a href=\"#1-距离度量指标\" class=\"headerlink\" title=\"1.距离度量指标\"></a>1.距离度量指标</h2><p>将待查询数据和训练数据集的距离作为分类依据是一种简单有效的分类方法。可以使用多种指标来确定距离。</p>\n<p>常用的距离度量有：</p>\n<ul>\n<li>欧式距离</li>\n<li>归一化欧式距离</li>\n<li>马（马哈拉诺比斯）氏距离</li>\n<li>城市街区距离</li>\n<li>闵可夫斯基距离</li>\n<li>切比雪夫距离</li>\n<li>余弦距离</li>\n<li>相关距离</li>\n<li>汉明距离</li>\n<li>杰卡德距离</li>\n<li>斯皮尔曼距离</li>\n</ul>\n<p>对于给定的<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.089ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1365.5 599.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></g></g></svg></mjx-container> x <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 矩阵 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container>，将其看作是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"3.089ex\" height=\"1.357ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1365.5 599.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></g></svg></mjx-container> 行的行向量， <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.406ex\" height=\"1.439ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 5925.4 636\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1008.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(1453.2,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(2461.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2906.4,0)\"><path data-c=\"2026\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z\"></path></g><g data-mml-node=\"msub\" transform=\"translate(4245.1,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(605,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(878,0)\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></g></g></svg></mjx-container> 。同理对于给定的<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.667ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.958ex\" height=\"1.667ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1307.5 737\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container> x <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.357ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 600 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> 矩阵 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.726ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 763 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g></svg></mjx-container>，将其看作是 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.667ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.958ex\" height=\"1.667ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 1307.5 737\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(911,-150) scale(0.707)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></g></svg></mjx-container> 行的行向量，向量 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.232ex\" height=\"1.355ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 986.6 599.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></g></svg></mjx-container> 和 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.874ex\" height=\"1.464ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 828.3 647\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></g></svg></mjx-container> 之间的不同距离度量定义如下：</p>\n<p><strong>欧式距离(Euclidean distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110212806751.png\" alt=\"image-20220110212806751\"></p>\n<p>欧几里得距离是 闵可夫斯基距离的一个特例，其中 p = 2。 </p>\n<p><strong>归一化欧氏距离(Standardized Euclidean distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110213015362.png\" alt=\"image-20220110213015362\"></p>\n<p>其中 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.74ex\" height=\"1.595ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 769 705\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D449\" d=\"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z\"></path></g></g></g></svg></mjx-container> 是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"4.475ex\" height=\"1.136ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -491 1978 502\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(600,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1378,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container>对角矩阵，其第<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.462ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.932ex\" height=\"1.957ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 412 865\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></svg></mjx-container>个对角元素是<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"6.899ex\" height=\"2.452ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -833.9 3049.6 1083.9\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mo\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(389,0)\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1034,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1423,0)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1835,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(2224,0)\"><g data-mml-node=\"mo\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(422,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g></g></g></svg></mjx-container>，其中<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.459ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 645 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D446\" d=\"M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z\"></path></g></g></g></svg></mjx-container> 是每个维度的缩放因子向量。 </p>\n<p><strong>马（马哈拉诺比斯）氏距离(Mahalanobis distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110213307164.png\" alt=\"image-20220110213307164\"></p>\n<p>其中<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.05ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.719ex\" height=\"1.645ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 760 727\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D436\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path></g></g></g></svg></mjx-container>是协方差矩阵。</p>\n<p><strong>城市街区距离(City block distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110213439402.png\" alt=\"image-20220110213439402\"></p>\n<p>城市街区距离是 Minkowski 距离的一个特例，其中 p = 1。</p>\n<p><strong>闵可夫斯基距离(Minkowski distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110213602515.png\" alt=\"image-20220110213602515\"></p>\n<p>对于 p = 1 的特殊情况，Minkowski 距离表示城市街区距离；</p>\n<p> 对于 p = 2 的特殊情况，Minkowski 距离表示欧几里得距离；</p>\n<p> 对于 p = ∞ 的特殊情况，Minkowski 距离表示切比雪夫距离； </p>\n<p><strong>切比雪夫距离(Chebychev distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110213739381.png\" alt=\"image-20220110213739381\"></p>\n<p>切比雪夫距离是 Minkowski 距离的一个特例，其中 p = ∞。 </p>\n<p><strong>余弦距离(Cosine distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110213907637.png\" alt=\"image-20220110213907637\"></p>\n<p><strong>相关距离(Correlation distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110214026302.png\" alt=\"image-20220110214026302\"></p>\n<p><strong>汉明距离(Hamming distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110214114274.png\" alt=\"image-20220110214114274\"></p>\n<p>汉明距离表示的是两个向量<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.355ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.232ex\" height=\"1.355ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 986.6 599.1\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g></g></g></svg></mjx-container> 和 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.874ex\" height=\"1.464ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 828.3 647\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g></g></svg></mjx-container> 相同位置上元素不相同和向量长度的比值。比如<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.05ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6210.2 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(605,-150) scale(0.707)\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1264.4,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2320.2,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2598.2,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3098.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3542.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4042.9,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4487.5,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4987.5,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5432.2,0)\"><path data-c=\"34\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5932.2,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"13.692ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 6051.8 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(523,-150) scale(0.707)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(1106,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2161.8,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2439.8,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2939.8,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3384.5,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3884.5,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(4329.2,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4829.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5273.8,0)\"><path data-c=\"33\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5773.8,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></svg></mjx-container> 则<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.357ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"9.732ex\" height=\"1.927ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 4301.5 851.8\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D451\" d=\"M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z\"></path></g><g data-mml-node=\"TeXAtom\" transform=\"translate(553,-150) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mi\"><path data-c=\"1D460\" d=\"M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(469,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></g><g data-mml-node=\"mo\" transform=\"translate(1467.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(2523.5,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g></g></g></svg></mjx-container></p>\n<p><strong>杰卡德距离(Jaccard distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110214225480.png\" alt=\"image-20220110214225480\"></p>\n<p><strong>斯皮尔曼距离(Spearman distance)</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20220110214240166.png\" alt=\"image-20220110214240166\"></p>\n<p>MATLAB中用<a href=\"https://ww2.mathworks.cn/help/stats/pdist2.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">pdist2</a>函数计算不同距离度量。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = [<span class=\"number\">1</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">Y = [<span class=\"number\">2</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\">D1 = pdist2(X,Y,<span class=\"string\">'cityblock'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">D3 = pdist2(X,Y,<span class=\"string\">'euclidean'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">D4 = pdist2(X,Y,<span class=\"string\">'minkowski'</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">D5 = pdist2(X,Y,<span class=\"string\">'hamming'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">D6 = pdist2(X,Y,<span class=\"string\">'chebychev'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">D7 = pdist2(X,Y,<span class=\"string\">'cosine'</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-k近邻搜索和半径搜索\"><a href=\"#2-k近邻搜索和半径搜索\" class=\"headerlink\" title=\"2.k近邻搜索和半径搜索\"></a>2.k近邻搜索和半径搜索</h2><p>给定一组包含 n 个点的<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container>和一个距离函数，k-近邻 (kNN) 搜索可以找到 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container> 中与查询点或点集 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.726ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 763 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g></svg></mjx-container> 最接近的 k 个点。kNN 算法和基于 kNN 的算法被广泛用作不同学习算法的基准。 kNN 算法相对简单且可解释性使得将其他分类技术的结果与 kNN 结果进行比较容易。</p>\n<p> kNN 算法可以用在其他机器学习算法中，例如：</p>\n<ul>\n<li>kNN分类 </li>\n<li>局部加权回归</li>\n<li>缺失数据插补和插值</li>\n<li>密度估计</li>\n</ul>\n<p>kNN可以与许多基于距离的学习的算法一起使用，例如 K-means 聚类。 相反，对于正实数 r，范围搜索 <a href=\"https://ww2.mathworks.cn/help/stats/rangesearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">rangsearch</a>查找 X 中与 Y 中每个点的距离为 r 的所有点。这种固定半径搜索与 kNN 搜索密切相关，因为它支持相同的距离度量和搜索类别 ，并使用相同的搜索算法。 </p>\n<h3 id=\"2-1-KNN-穷举搜索\"><a href=\"#2-1-KNN-穷举搜索\" class=\"headerlink\" title=\"2.1 KNN-穷举搜索\"></a>2.1 KNN-穷举搜索</h3><p>在matlab中，可以使用多种底层搜索算法实现kNN算法的搜索过程，当满足以下条件时默认使用穷举搜索方式：</p>\n<ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container> 的列数超过 10；</li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container> 是稀疏的；</li>\n<li>距离度量使用：苏氏距离、马氏距离、余弦距离、相关距离、斯皮尔曼距离、汉明距离、杰卡德距离、自定义距离函数 ；</li>\n</ul>\n<p>如果搜索对象是<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">ExhaustiveSearcher </a> 模型对象，<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.knnsearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"><em>knnsearch</em> </a> 也会使用穷举搜索方法。 穷举搜索方法是找到每个查询点到<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container>中每个点的距离，按升序排列，返回距离最小的k个点。 例如，此图显示了 k = 3 个最近邻。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/exhaustivesearch.gif\" alt=\"img\"></p>\n<h3 id=\"2-2-KNN-Kd树搜索\"><a href=\"#2-2-KNN-Kd树搜索\" class=\"headerlink\" title=\"2.2 KNN-Kd树搜索\"></a>2.2 KNN-Kd树搜索</h3><p>当输入数据满足以下所有条件时，<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.knnsearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"><em>knnsearch</em> </a>默认会创建一个 Kd树来查找：</p>\n<ul>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container> 的列数<strong>不</strong>超过 10；</li>\n<li><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container> 是非稀疏的；</li>\n<li>欧式距离（默认）、城市街区距离、闵可夫斯基距离、切比雪夫距离</li>\n</ul>\n<p>如果搜索对象是 <a href=\"https://ww2.mathworks.cn/help/stats/kdtreesearcher.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">KDTreeSearcher </a>模型对象，<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.knnsearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"><em>knnsearch</em> </a>也会使用 Kd-树。 </p>\n<p>Kd-树根据坐标（而不是类别）将数据划分为每个节点最多 <em>BucketSize</em>（默认为 50）个点的节点。 下图中不同的颜色块对应的是不同的节点。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/kdtreelines.png\" alt=\"img\"></p>\n<p>查找给定查询点的 k 最近邻时，<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.knnsearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"><em>knnsearch</em> </a>执行以下操作：</p>\n<ol>\n<li>确定查询点所属的节点。 在以下示例中，查询点 (32,90) 属于节点 4。</li>\n<li>查找该节点内最近的 k 个点及其到查询点的距离。 在以下示例中，红色圆圈中的点与查询点等距，并且是节点 4 内离查询点最近的点。</li>\n<li>选择从查询点到第 k 个最近点在任何方向上具有相同距离内的任何区域的所有其他节点。 在此示例中，只有节点 3 与以查询点为中心的实心黑色圆圈重叠，其半径等于到节点 4 内最近点的距离。</li>\n<li>在该范围内的节点中搜索更接近查询点的任何点。 在以下示例中，红色方块中的点比节点 4 中的点更靠近查询点。 </li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/kdtreelinesnewpoint.png\" alt=\"img\"></p>\n<p>对少于 10 个维度（列）的大型数据集使用 Kd-树可能比使用穷举搜索方法更有效，因为<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.knnsearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"><em>knnsearch</em> </a>只需要计算距离的子集。 为了最大限度地提高 Kd树的效率，请使用<a href=\"https://ww2.mathworks.cn/help/stats/kdtreesearcher.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">KDTreeSearcher</a>模型。 </p>\n<h3 id=\"2-3-搜索模型对象\"><a href=\"#2-3-搜索模型对象\" class=\"headerlink\" title=\"2.3 搜索模型对象\"></a>2.3 搜索模型对象</h3><p>通常来说，模型对象是一种存储信息的便捷方式。相关模型具有与指定搜索方法相关的值和类型的相同属性。 除了在模型中存储信息之外，还可以对模型执行某些操作。可以使用<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.rangesearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"> <em>rangesearch</em> </a>在搜索模型上高效地执行 k 近邻搜索。 或者，可以使用搜索模型和范围搜索搜索指定半径内的所有邻居。 此外，还有一个通用的<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.knnsearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"><em>knnsearch</em></a> 和<a href=\"https://ww2.mathworks.cn/help/stats/exhaustivesearcher.rangesearch.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\"> <em>rangesearch</em> </a>函数可以在不创建或使用模型的情况下进行搜索。 </p>\n<p>可以从以下方向考虑使用哪种类型的模型和搜索方法最适合给定的数据：</p>\n<ul>\n<li>数据列数；</li>\n<li>数据是否稀疏；</li>\n<li>距离度量方式；</li>\n</ul>\n<h2 id=\"3-对数据进行分类—Kd树\"><a href=\"#3-对数据进行分类—Kd树\" class=\"headerlink\" title=\"3.对数据进行分类—Kd树\"></a>3.对数据进行分类—Kd树</h2><p>使用Kd树方式对查询数据进行分类包括以下步骤：</p>\n<ol>\n<li>构建 Kd 树；</li>\n<li>使用Kd树进行 k 近邻搜索； </li>\n<li>确定待查询数据所属的类；</li>\n</ol>\n<p>示例根据 Fisher iris 数据的最后两列对新点进行分类。</p>\n<blockquote>\n<p><strong>Step- 1 导入数据并对最后两列绘图</strong> </p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">load fisheriris</span><br><span class=\"line\">x = meas(:,<span class=\"number\">3</span>:<span class=\"number\">4</span>);</span><br><span class=\"line\">gscatter(x(:,<span class=\"number\">1</span>),x(:,<span class=\"number\">2</span>),species)</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">'Location'</span>,<span class=\"string\">'best'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/ClassifyingQueryDataUsingKnnsearchExample_01.png\" alt=\"Figure contains an axes object. The axes object contains 3 objects of type line. These objects represent setosa, versicolor, virginica.\"></p>\n<blockquote>\n<p><strong>Step-2 绘制待查询数据</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">newpoint = [<span class=\"number\">5</span> <span class=\"number\">1.45</span>];</span><br><span class=\"line\">line(newpoint(<span class=\"number\">1</span>),newpoint(<span class=\"number\">2</span>),<span class=\"string\">'marker'</span>,<span class=\"string\">'x'</span>,<span class=\"string\">'color'</span>,<span class=\"string\">'k'</span>,...</span><br><span class=\"line\">   <span class=\"string\">'markersize'</span>,<span class=\"number\">10</span>,<span class=\"string\">'linewidth'</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"C:/Users/W-H/Desktop/pic-bed/ClassifyingQueryDataUsingKnnsearchExample_02.png\" alt=\"ClassifyingQueryDataUsingKnnsearchExample_02\"></p>\n<blockquote>\n<p><strong>Step-3 构建Kd树近邻搜索模型</strong> </p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mdl = KDTreeSearcher(x)</span><br></pre></td></tr></table></figure>\n<p>Mdl 是一个<a href=\"https://ww2.mathworks.cn/help/stats/kdtreesearcher.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">KDTreeSearcher</a>模型。 默认情况下，它用于搜索邻居的距离度量是欧氏距离。 </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/ClassifyingQueryDataUsingKnnsearchExample_03.png\" alt=\"ClassifyingQueryDataUsingKnnsearchExample_03\"></p>\n<blockquote>\n<p><strong>Step-4 找出到待查询点最近的10个点</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">[n,d] = knnsearch(Mdl,newpoint,<span class=\"string\">'k'</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">line(x(n,<span class=\"number\">1</span>),x(n,<span class=\"number\">2</span>),<span class=\"string\">'color'</span>,[<span class=\"number\">.5</span> <span class=\"number\">.5</span> <span class=\"number\">.5</span>],<span class=\"string\">'marker'</span>,<span class=\"string\">'o'</span>,...</span><br><span class=\"line\">    <span class=\"string\">'linestyle'</span>,<span class=\"string\">'none'</span>,<span class=\"string\">'markersize'</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">xlim([<span class=\"number\">4.5</span> <span class=\"number\">5.5</span>]);</span><br><span class=\"line\">ylim([<span class=\"number\">1</span> <span class=\"number\">2</span>]);</span><br><span class=\"line\">axis square</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/ClassifyingQueryDataUsingKnnsearchExample_04.png\" alt=\"ClassifyingQueryDataUsingKnnsearchExample_04\"></p>\n<blockquote>\n<p><strong>Step-5 找出到待查询点最近的10个点的特征</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">tabulate(species(n))</span><br><span class=\"line\">       Value    Count   Percent</span><br><span class=\"line\">   virginica        <span class=\"number\">2</span>     <span class=\"number\">20.00</span><span class=\"comment\">%</span></span><br><span class=\"line\">  versicolor        <span class=\"number\">8</span>     <span class=\"number\">80.00</span><span class=\"comment\">%</span></span><br></pre></td></tr></table></figure>\n<p>可以依据不同的分类依据将此新点归类到不同的类别。 </p>\n<blockquote>\n<p><strong>Step-6 在一组近邻点周围画一个圆圈来直观地识别近邻点</strong></p>\n</blockquote>\n<p>根据新点的位置定义圆的中心和直径 。</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">ctr = newpoint - d(<span class=\"keyword\">end</span>);</span><br><span class=\"line\">diameter = <span class=\"number\">2</span>*d(<span class=\"keyword\">end</span>);</span><br><span class=\"line\"><span class=\"comment\">% Draw a circle around the 10 nearest neighbors.</span></span><br><span class=\"line\">h = rectangle(<span class=\"string\">'position'</span>,[ctr,diameter,diameter],...</span><br><span class=\"line\">   <span class=\"string\">'curvature'</span>,[<span class=\"number\">1</span> <span class=\"number\">1</span>]);</span><br><span class=\"line\">h.LineStyle = <span class=\"string\">':'</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/ClassifyingQueryDataUsingKnnsearchExample_05.png\" alt=\"ClassifyingQueryDataUsingKnnsearchExample_05\"></p>\n<blockquote>\n<p><strong>step-7</strong> 多个数据点分类</p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">figure</span> </span><br><span class=\"line\">newpoint2 = [<span class=\"number\">5</span> <span class=\"number\">1.45</span>;<span class=\"number\">6</span> <span class=\"number\">2</span>;<span class=\"number\">2.75</span> <span class=\"number\">.75</span>];</span><br><span class=\"line\">gscatter(x(:,<span class=\"number\">1</span>),x(:,<span class=\"number\">2</span>),species)</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">'location'</span>,<span class=\"string\">'best'</span>)</span><br><span class=\"line\">[n2,d2] = knnsearch(Mdl,newpoint2,<span class=\"string\">'k'</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">line(x(n2,<span class=\"number\">1</span>),x(n2,<span class=\"number\">2</span>),<span class=\"string\">'color'</span>,[<span class=\"number\">.5</span> <span class=\"number\">.5</span> <span class=\"number\">.5</span>],<span class=\"string\">'marker'</span>,<span class=\"string\">'o'</span>,...</span><br><span class=\"line\">   <span class=\"string\">'linestyle'</span>,<span class=\"string\">'none'</span>,<span class=\"string\">'markersize'</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">line(newpoint2(:,<span class=\"number\">1</span>),newpoint2(:,<span class=\"number\">2</span>),<span class=\"string\">'marker'</span>,<span class=\"string\">'x'</span>,<span class=\"string\">'color'</span>,<span class=\"string\">'k'</span>,...</span><br><span class=\"line\">   <span class=\"string\">'markersize'</span>,<span class=\"number\">10</span>,<span class=\"string\">'linewidth'</span>,<span class=\"number\">2</span>,<span class=\"string\">'linestyle'</span>,<span class=\"string\">'none'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/ClassifyingQueryDataUsingKnnsearchExample_06.png\" alt=\"ClassifyingQueryDataUsingKnnsearchExample_06\"></p>\n<p><a href=\"https://github.com/Joiner12/Position/blob/develop/Fingerprinting/MatScript/knn_kd_tree.mlx\">完整代码：Position/knn_kd_tree.mlx at develop · Joiner12/Position (github.com)</a></p>\n<h2 id=\"4-使用自定义距离度量查找最近的邻居\"><a href=\"#4-使用自定义距离度量查找最近的邻居\" class=\"headerlink\" title=\"4.使用自定义距离度量查找最近的邻居\"></a>4.使用自定义距离度量查找最近的邻居</h2><p>示例说明如何找到与 X 中的三个最近卡方距离(chi-square distance)数据的索引。卡方距离常用于相关性分析(correspondence analysis)，特别是在生态应用中。 </p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.462ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"0.932ex\" height=\"1.957ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -661 412 865\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></svg></mjx-container> 维向量 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.294ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 572 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D465\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g></g></g></svg></mjx-container> 和 <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.052ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 465 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D467\" d=\"M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z\"></path></g></g></g></svg></mjx-container> 之间的卡方距离定义为：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-202201sd5413617.png\" alt=\"image-202201sd5413617\"></p>\n<p>其中<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.666ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"2.467ex\" height=\"1.668ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -443 1090.3 737.2\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"msub\"><g data-mml-node=\"mi\"><path data-c=\"1D464\" d=\"M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(749,-150) scale(0.707)\"><path data-c=\"1D457\" d=\"M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z\"></path></g></g></g></g></svg></mjx-container>是于维度相关的权重系数；</p>\n<blockquote>\n<p><strong>Step-1</strong> 随机生成两个正态分布矩阵，矩阵的行数可以变化，但列数必须相等。因为矩阵<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.928ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 852 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44B\" d=\"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z\"></path></g></g></g></svg></mjx-container> 表示训练数据集，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.726ex\" height=\"1.545ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -683 763 683\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D44C\" d=\"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z\"></path></g></g></g></svg></mjx-container> 表示待分类数据集合；</p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">rng(<span class=\"number\">1</span>) <span class=\"comment\">% For reproducibility</span></span><br><span class=\"line\">X = <span class=\"built_in\">randn</span>(<span class=\"number\">50</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">Y = <span class=\"built_in\">randn</span>(<span class=\"number\">4</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">h = <span class=\"built_in\">zeros</span>(<span class=\"number\">3</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">figure</span></span><br><span class=\"line\">h(<span class=\"number\">1</span>) = <span class=\"built_in\">plot</span>(X(:,<span class=\"number\">1</span>),X(:,<span class=\"number\">2</span>),<span class=\"string\">'bx'</span>);</span><br><span class=\"line\"><span class=\"built_in\">hold</span> on</span><br><span class=\"line\">h(<span class=\"number\">2</span>) = <span class=\"built_in\">plot</span>(Y(:,<span class=\"number\">1</span>),Y(:,<span class=\"number\">2</span>),<span class=\"string\">'rs'</span>,<span class=\"string\">'MarkerSize'</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">title(<span class=\"string\">'Heterogeneous Data'</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/FindNearestNeighborUsingACustomDistanceMetricExample_01.png\" alt=\"FindNearestNeighborUsingACustomDistanceMetricExample_01\"></p>\n<blockquote>\n<p><strong>Step2-定义距离函数</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% distance function</span></span><br><span class=\"line\">w = [<span class=\"number\">0.4</span>; <span class=\"number\">0.6</span>];</span><br><span class=\"line\">chiSqrDist = @(x,Z)<span class=\"built_in\">sqrt</span>((<span class=\"built_in\">bsxfun</span>(@minus,x,Z).^<span class=\"number\">2</span>)*w);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Step3-找出Y中每个到 X 中三个最近观测值的索引</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">k = <span class=\"number\">3</span>;</span><br><span class=\"line\">[Idx,D] = knnsearch(X,Y,<span class=\"string\">'Distance'</span>,chiSqrDist,<span class=\"string\">'k'</span>,k);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Step4- 确定图中最近的观测值</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span>:k</span><br><span class=\"line\">    h(<span class=\"number\">3</span>) = <span class=\"built_in\">plot</span>(X(Idx(:,<span class=\"built_in\">j</span>),<span class=\"number\">1</span>),X(Idx(:,<span class=\"built_in\">j</span>),<span class=\"number\">2</span>),<span class=\"string\">'ko'</span>,<span class=\"string\">'MarkerSize'</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">end</span> </span><br><span class=\"line\"><span class=\"built_in\">legend</span>(h,{<span class=\"string\">'\\texttt{X}'</span>,<span class=\"string\">'\\texttt{Y}'</span>,<span class=\"string\">'Nearest Neighbor'</span>},<span class=\"string\">'Interpreter'</span>,<span class=\"string\">'latex'</span>)</span><br><span class=\"line\">title(<span class=\"string\">'Heterogeneous Data and Nearest Neighbors'</span>)</span><br><span class=\"line\"><span class=\"built_in\">hold</span> off</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/FindNearestNeighborUsingACustomDistanceMetricExample_02.png\" alt=\"FindNearestNeighborUsingACustomDistanceMetricExample_02\"></p>\n<p><a href=\"https://github.com/Joiner12/Position/blob/develop/Fingerprinting/MatScript/using_custom_distance_metric.mlx\">完整代码：Position/using_custom_distance_metric.mlx at develop · Joiner12/Position (github.com)</a></p>\n<h2 id=\"5-有监督学习的-K-近邻分类\"><a href=\"#5-有监督学习的-K-近邻分类\" class=\"headerlink\" title=\"5.有监督学习的 K-近邻分类\"></a>5.有监督学习的 K-近邻分类</h2><h3 id=\"5-1-说明\"><a href=\"#5-1-说明\" class=\"headerlink\" title=\"5.1 说明\"></a>5.1 说明</h3><p>使用<a href=\"https://ww2.mathworks.cn/help/stats/classificationknn.html\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">ClassificationKNN </a>分类模型实现k-近邻分类具体可以分为以下几步：</p>\n<ol>\n<li>构造 KNN 分类器<a href=\"https://ww2.mathworks.cn/help/stats/classification-using-nearest-neighbors.html#btap7k2\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">Construct KNN Classifier</a></li>\n<li>检查 KNN 分类器<a href=\"https://ww2.mathworks.cn/help/stats/classification-using-nearest-neighbors.html#btap7l_\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">Examine Quality of KNN Classifier</a></li>\n<li>使用 KNN 分类器进行预测分类 <a href=\"https://ww2.mathworks.cn/help/stats/classification-using-nearest-neighbors.html#btap7nm\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">Predict Classification Using KNN Classifier</a></li>\n<li>修改 KNN 分类器 <a href=\"https://ww2.mathworks.cn/help/stats/classification-using-nearest-neighbors.html#btap_jn\" style=\"color:#0076A8;font-family: Menlo, Monaco, Consolas, 'Courier New, monospace;\">Modify KNN Classifier</a></li>\n</ol>\n<h3 id=\"5-2-示例\"><a href=\"#5-2-示例\" class=\"headerlink\" title=\"5.2 示例\"></a>5.2 示例</h3><p>例子展示了如何为 Fisher iris 数据构建一个 k 最近邻分类器。 </p>\n<blockquote>\n<p><strong>Step1- 导入数据</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">load fisheriris</span><br><span class=\"line\">X = meas;    <span class=\"comment\">% Use all data for fitting</span></span><br><span class=\"line\">Y = species; <span class=\"comment\">% Response data</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Step2- 使用knn构造分类器</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mdl = fitcknn(X,Y)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Step3- 修改邻域大小</strong></p>\n</blockquote>\n<p>默认的 k 近邻分类器仅使用一个临近值。将 Mdl 的邻域大小更改为 4</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">Mdl.NumNeighbors = <span class=\"number\">4</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Step4- 重新替换和交叉验证检查 k 最近邻分类器 </strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">loss = resubLoss(Mdl)</span><br><span class=\"line\">rng(<span class=\"number\">10</span>); <span class=\"comment\">% For reproducibility</span></span><br><span class=\"line\">CVMdl = crossval(Mdl,<span class=\"string\">'KFold'</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">kloss = kfoldLoss(CVMdl)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>Step5- 使用kNN构造预测分类</strong></p>\n</blockquote>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">flwr = <span class=\"built_in\">mean</span>(X); <span class=\"comment\">% an average flower</span></span><br><span class=\"line\">flwrClass = predict(Mdl,flwr)</span><br><span class=\"line\"><span class=\"comment\">% 预测结果</span></span><br><span class=\"line\"><span class=\"comment\">% flwrClass = 1x1 cell array</span></span><br><span class=\"line\"><span class=\"comment\">%    {'versicolor'}</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/Joiner12/Position/blob/develop/Fingerprinting/MatScript/knn_supervised_learn.mlx\">完整代码：Position/knn_supervised_learn.mlx at develop · Joiner12/Position (github.com)</a></p>\n<h2 id=\"6-kNN开发流程总结\"><a href=\"#6-kNN开发流程总结\" class=\"headerlink\" title=\"6.kNN开发流程总结\"></a>6.kNN开发流程总结</h2><p><strong>机器学习算法通用流程</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/kaifaliucheng.png\" alt=\"kaifaliucheng\"></p>\n<p>收集数据：任何方法<br>准备数据：距离计算所需要的数值，最好是结构化的数据格式<br>分析数据：任何方法<br>训练算法：此步骤不适用于 k-近邻算法，k-近邻算法是在搜索过程中训练算法；<br>测试算法：计算错误率<br>使用算法：输入样本数据和结构化的输出结果，然后运行 k-近邻算法判断输入数据分类属于哪个分类，最后对计算出的分类执行后续处理。</p>\n<hr>\n\n<p style=\"text-align:right;\">2022-01-11 15:10</p>\n\n","tags":["algorithm","matlab","kNN"]},{"title":"Using dominate to Generate Web Page","url":"/undefined/dominate/","content":"<h1 id=\"Dominate学习笔记\"><a href=\"#Dominate学习笔记\" class=\"headerlink\" title=\"Dominate学习笔记\"></a>Dominate学习笔记</h1><h2 id=\"1-问题背景\"><a href=\"#1-问题背景\" class=\"headerlink\" title=\"1. 问题背景\"></a>1. 问题背景</h2><p>​    算法调试、文档输出等需要有相应的文档记录。常用的记录保存方式：markdown、office、html等多种方式。个人常用的方式还是偏向于MarkDown文档（Typora），但是在使用的过程中，还是遇到一些问题。比如：MarkDown相比较于其他两种记录方式较为简洁，自定义程度不高，在需要输出一些复杂度要求高的文档时会显得有些无力。因此，在一些情况下会选择使用html作为记录方式。理所当然，出现了一个新的问题，html是一种结构化文档，能够很方便地通过自己写代码自动修改、生成文档。Python的 <a href=\"https://pypi.org/project/dominate/\" style=\"font-family: Source Sans Pro,Helvetica,Arial,sans-serif;font-size: 1rem;font-weight: 400;color: #006dad;cursor: pointer;\">dominate</a>库能够是一个封装得很好的库，对于dominate库学习、使用，是以为记。</p>\n<span id=\"more\"></span>\n<h2 id=\"2-Dominate\"><a href=\"#2-Dominate\" class=\"headerlink\" title=\"2. Dominate\"></a>2. Dominate</h2><h3 id=\"2-1-dominate简介\"><a href=\"#2-1-dominate简介\" class=\"headerlink\" title=\"2.1 dominate简介\"></a>2.1 dominate简介</h3><p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>是一个使用DOM api创建和修改HTML(HyperText Markup Language)<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: 0;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.877ex\" height=\"2.021ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -893.3 829.7 893.3\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"TeXAtom\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"msup\"><g data-mml-node=\"mi\"></g><g data-mml-node=\"TeXAtom\" transform=\"translate(33,363) scale(0.707)\" data-mjx-texclass=\"ORD\"><g data-mml-node=\"mo\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(278,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(778,0)\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g></g></g></g></g></g></svg></mjx-container>文件的python库。通过dominate能够很方便的用python地写html网页，且无需深入学习模板语言(css，html等)。</p>\n<h2 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3. 安装\"></a>3. 安装</h2><p>官方推荐安装方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo pip install dominate</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4. 示例\"></a>4. 示例</h2><p>开始使用之前需要导入适当的HTML标签或者直接导入整个HTML标签(tag set)集，HTML的标签有<code>div</code>、<code>a</code>、<code>p</code>、<code>h1</code>等，相关标签详细介绍参考[1]。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dominate.tags <span class=\"keyword\">import</span> * </span><br></pre></td></tr></table></figure>\n<h3 id=\"4-1-Hello-World\"><a href=\"#4-1-Hello-World\" class=\"headerlink\" title=\"4.1 Hello,World\"></a>4.1 Hello,World</h3><h4 id=\"4-1-1-使用dominate输出第一个网页内容。\"><a href=\"#4-1-1-使用dominate输出第一个网页内容。\" class=\"headerlink\" title=\"4.1.1 使用dominate输出第一个网页内容。\"></a>4.1.1 使用dominate输出第一个网页内容。</h4><p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>最基本的功能是，为每个HTML元素提供了一个实现类。在<code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>中对应的HTML元素类的构造函数能够将该元素的子元素、文本、关键字属性参数。dominate节点通过<code>__str__()</code>、<code>__unicode__()</code>、<code>__render()__</code>方法返回HTML对应的表达式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dominate.tags <span class=\"keyword\">import</span> *</span><br><span class=\"line\">mainpage = html(body(h1(<span class=\"string\">'Hello, World!'</span>)))</span><br><span class=\"line\">htmlRepreStrI = mainpage.__str__()</span><br><span class=\"line\">htmlRepreStrII = mainpage.__unicode__()</span><br><span class=\"line\">htmlRepreStrIII = mainpage.render()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mainpage)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">&lt;html&gt;</span></span><br><span class=\"line\">  <span class=\"section\">&lt;body&gt;</span></span><br><span class=\"line\">    <span class=\"section\">&lt;h1&gt;</span><span class=\"attribute\">Hello</span>, World!&lt;/h<span class=\"number\">1</span>&gt;</span><br><span class=\"line\">  <span class=\"section\">&lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"section\">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-1-2-class-html和class-dominate-document\"><a href=\"#4-1-2-class-html和class-dominate-document\" class=\"headerlink\" title=\"4.1.2 class:html和class:dominate.document\"></a>4.1.2 class:html和class:dominate.document</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dominate</span><br><span class=\"line\"><span class=\"keyword\">from</span> dominate.tags <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">mainpageI = dominate.document()</span><br><span class=\"line\">mainpageII = html()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'# dominate.document'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mainpageI)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">'------------------\\n'</span>, <span class=\"string\">'# html'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(mainpageII)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"># dominate.document</span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Dominate<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">------------------</span><br><span class=\"line\"> # html</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>document类相比于html类，document能够输出标准的HTML结构。实例化过程中，构造函数无参数输入，document能够生成带有网页title的head、body的html标签。而html仅生成html标签。这是因为html类是document的父类，document类在继承了html类，且其构造函数中丰富了相关内容。</p>\n<p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>库中的<strong>document.py</strong>构造函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">document</span>(<span class=\"params\">tags.html</span>):</span></span><br><span class=\"line\">  tagname = <span class=\"string\">'html'</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, title=<span class=\"string\">'Dominate'</span>, doctype=<span class=\"string\">'&lt;!DOCTYPE html&gt;'</span>, request=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    Creates a new document instance. Accepts `title`, `doctype`, and `request` keyword arguments.</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(document, self).__init__()</span><br><span class=\"line\">    self.doctype    = doctype</span><br><span class=\"line\">    self.head       = <span class=\"built_in\">super</span>(document, self).add(tags.head())</span><br><span class=\"line\">    self.body       = <span class=\"built_in\">super</span>(document, self).add(tags.body())</span><br><span class=\"line\">    self.title_node = self.head.add(tags.title(title))</span><br><span class=\"line\">    self._entry     = self.body</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-属性\"><a href=\"#5-属性\" class=\"headerlink\" title=\"5. 属性\"></a>5. 属性</h2><h3 id=\"5-1-关键字参数修改属性\"><a href=\"#5-1-关键字参数修改属性\" class=\"headerlink\" title=\"5.1 关键字参数修改属性\"></a>5.1 关键字参数修改属性</h3><p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code> 可以使用关键字参数将属性(attribute)附加到标签(tag)上。大多数属性都是从HTML规范复制过来的仅有很少的差异。因为<code>class</code>和<code>for</code>属性关键词和Python保留关键词冲突，因此可以使用下面的别名。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">class</th>\n<th style=\"text-align:left\">for</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">_class</td>\n<td style=\"text-align:left\">_for</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cls</td>\n<td style=\"text-align:left\">fr</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">className</td>\n<td style=\"text-align:left\">htmlFor</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">class_name</td>\n<td style=\"text-align:left\">html_for</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">test = label(cls=<span class=\"string\">'classname anothername'</span>, fr=<span class=\"string\">'someinput'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;label <span class=\"keyword\">class</span>=\"<span class=\"symbol\">classname</span> <span class=\"symbol\">anothername</span>\" <span class=\"symbol\">for</span>=\"<span class=\"symbol\">someinput</span>\"&gt;&lt;/<span class=\"symbol\">label</span>&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-1-使用data-修改HTML5数据属性：\"><a href=\"#5-1-使用data-修改HTML5数据属性：\" class=\"headerlink\" title=\"5.1 使用data_*修改HTML5数据属性：\"></a>5.1 使用<code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">data_*</code>修改HTML5数据属性：</h3><p>在HTML5中data属性是“xx-xx”的形式。<del>如background-color属性。</del>但是python中“-”是数学运算符号“减”。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">test = div(data_employee=<span class=\"string\">'101011'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> data-employee=<span class=\"string\">\"101011\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<p><code>todo</code>：background-color如何处理。</p>\n<p>尝试使用下划线的方式处理，则结果如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">test = div(background_color=<span class=\"string\">'#ffffff'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(test)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight gml\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"symbol\">background_color</span>=<span class=\"string\">\"#ffffff\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-使用类似于字典的接口修改标签属性\"><a href=\"#5-3-使用类似于字典的接口修改标签属性\" class=\"headerlink\" title=\"5.3 使用类似于字典的接口修改标签属性\"></a>5.3 使用类似于字典的接口修改标签属性</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">header = div()</span><br><span class=\"line\">header[<span class=\"string\">'id'</span>] = <span class=\"string\">'header'</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(header)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"header\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-构造复杂网页结构\"><a href=\"#6-构造复杂网页结构\" class=\"headerlink\" title=\"6.构造复杂网页结构\"></a>6.构造复杂网页结构</h2><h3 id=\"6-1-amp-add\"><a href=\"#6-1-amp-add\" class=\"headerlink\" title=\"6.1 +=&.add()\"></a>6.1 <code>+=</code>&amp;<code>.add()</code></h3><p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code> 支持<code>+=</code> 运算符和<code>.add()</code>方法，通过上述方法能够很轻易地创建出更复杂的网页结构。</p>\n<p>例如，创建一个简单的无序列表(list)容器:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">list</span> = ul()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    <span class=\"built_in\">list</span> += li(<span class=\"string\">'Item #'</span>, item)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">&lt;ul&gt;</span></span><br><span class=\"line\">  <span class=\"section\">&lt;li&gt;</span><span class=\"attribute\">Item</span> #<span class=\"number\">0</span>&lt;/li&gt;</span><br><span class=\"line\">  <span class=\"section\">&lt;li&gt;</span><span class=\"attribute\">Item</span> #<span class=\"number\">1</span>&lt;/li&gt;</span><br><span class=\"line\">  <span class=\"section\">&lt;li&gt;</span><span class=\"attribute\">Item</span> #<span class=\"number\">2</span>&lt;/li&gt;</span><br><span class=\"line\">  <span class=\"section\">&lt;li&gt;</span><span class=\"attribute\">Item</span> #<span class=\"number\">3</span>&lt;/li&gt;</span><br><span class=\"line\"><span class=\"section\">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同样也可以使用这种方式创建多个<code>&lt;div&gt;</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">bd = body()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    bd += div(<span class=\"string\">'Item #'</span>, item)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(bd)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cal\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span>&gt;Item <span class=\"string\">#0</span>&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span>&gt;Item <span class=\"string\">#1</span>&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span>&gt;Item <span class=\"string\">#2</span>&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span>&gt;Item <span class=\"string\">#3</span>&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>复杂网页种，通常存在一些重复的模块，使用<code>+=</code>或者<code>.add()</code> 能够使代码更为简便。</p>\n<p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>支持使用迭代的方式简化代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu_items = ([<span class=\"string\">'home'</span>, <span class=\"string\">r'/home/'</span>], [<span class=\"string\">'about'</span>, <span class=\"string\">'/about'</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ul(li(a(name, href=link), __pretty=<span class=\"literal\">False</span>) <span class=\"keyword\">for</span> name, link <span class=\"keyword\">in</span> menu_items))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/home/\"</span>&gt;</span>home<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/about\"</span>&gt;</span>about<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一个简单HTML文件树如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">_html = html()</span><br><span class=\"line\">_head = _html.add(head(title(<span class=\"string\">\"Simple Document Tree\"</span>)))</span><br><span class=\"line\">_body = _html.add(body())</span><br><span class=\"line\">header = _body.add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'header'</span>))</span><br><span class=\"line\">content = _body.add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'content'</span>))</span><br><span class=\"line\">footer = _body.add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'footer'</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(_html)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Simple Document Tree<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面实现生成HTML文件树的方式是通过<code>.add()</code>方法，调用 <code>.add()</code> 方法后，其通过元胞的方式返回子标签。上面的实现方式可以简化为如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">_html = html()</span><br><span class=\"line\">_head, _body = _html.add(head(title(<span class=\"string\">'Simple Document Tree'</span>)), body())</span><br><span class=\"line\">names = [<span class=\"string\">'header'</span>, <span class=\"string\">'content'</span>, <span class=\"string\">'footer'</span>]</span><br><span class=\"line\">header, content, footer = _body.add([div(<span class=\"built_in\">id</span>=name) <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> names])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(_html)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Simple Document Tree<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码种的_head, _body 都是通过<code>.add()</code> 方法添加到 _html类中的，从属关系为父子。使用<code>.add()</code> 方法生成HTML文件树的时候，内部并没有根据标签类型进行文件格式调整，只是按照先后顺序进行添加，一个典型的HTML文件XX.html应该包含&lt; head &gt; &lt; body &gt;且为了方便阅读，&lt; head &gt;通常在文件的前面。</p>\n<p>如果按照以下方式实现生成一个简单的HTML文件树：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">_html = html()</span><br><span class=\"line\">_body = _html.add(body())</span><br><span class=\"line\">_head = _html.add(head(title(<span class=\"string\">\"Simple Document Tree\"</span>)))</span><br><span class=\"line\">header = _body.add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'header'</span>))</span><br><span class=\"line\">content = _body.add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'content'</span>))</span><br><span class=\"line\">footer = _body.add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'footer'</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(_html)</span><br></pre></td></tr></table></figure>\n<p>则最终输出为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"header\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"footer\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Simple Document Tree<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6-2-使用类数组接口修改标签子项\"><a href=\"#6-2-使用类数组接口修改标签子项\" class=\"headerlink\" title=\"6.2 使用类数组接口修改标签子项\"></a>6.2 使用类数组接口修改标签子项</h3><p>5.3中提到过，可以通过类字典方式修改标签的属性，<code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>也支持通过类数组方式修改标签下子标签的属性。</p>\n<p><strong>Todo:</strong> 文档中说的是通过类数组方式修改children of a tag 实际代码中修改的是tag自身的属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">header = div(<span class=\"string\">'Test'</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(header)</span><br><span class=\"line\">header[<span class=\"number\">0</span>] = <span class=\"string\">'Hello World'</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(header)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span>&gt;<span class=\"keyword\">Test</span>&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span>&gt;Hello World&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-3-使用commit类为HTML文件添加注释\"><a href=\"#6-3-使用commit类为HTML文件添加注释\" class=\"headerlink\" title=\"6.3 使用commit类为HTML文件添加注释\"></a>6.3 使用commit类为HTML文件添加注释</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(comment(<span class=\"string\">'this is a piece of commit'</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--this is a piece of commit--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--[if lt IE9]&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;p&gt;Upgrade to newer IE!&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-渲染网页文本-render\"><a href=\"#7-渲染网页文本-render\" class=\"headerlink\" title=\"7. 渲染网页文本(render)\"></a>7. 渲染网页文本(render)</h2><p>render()函数输出标签的文本字符串，可以用于后面生成本地html网页文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = div(span(<span class=\"string\">'Hello World'</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.render(), <span class=\"string\">'\\n'</span>, <span class=\"built_in\">type</span>(a.render()))</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">'test.html'</span>,mode=<span class=\"string\">'w'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(a.render())</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">class</span> '<span class=\"attr\">str</span>'&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>render()</code>默认输出的每个HTML元素单独占一行和两个空格的缩进。</p>\n<p>网页文本的渲染结果由创建HTML元素的<code>__pretty</code>属性决定，使用<code>render()</code>时候可以修改属性值包括：<code>pretty</code>（默认值：<code>True</code>，出来某些元素类型，比如pre）、<code>indent</code> （默认值：<code>''</code>）、<code>xhtml</code>(默认值：<code>False</code>)。<code>render()</code>渲染选项设置后，其所有的子节点同样有效。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = div(span(<span class=\"string\">'Hello World'</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.render())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.render(pretty=<span class=\"literal\">False</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.render(indent=<span class=\"string\">'\\t'</span>))</span><br><span class=\"line\">a = div(span(<span class=\"string\">'Hello World'</span>), __pretty=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.render())</span><br><span class=\"line\">d = div()</span><br><span class=\"line\"><span class=\"keyword\">with</span> d:</span><br><span class=\"line\">    hr()</span><br><span class=\"line\">    p(<span class=\"string\">\"Test\"</span>)</span><br><span class=\"line\">    br()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d.render())</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d.render(xhtml=<span class=\"literal\">True</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------------</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"><span class=\"code\">  &lt;span&gt;Hello World&lt;/span&gt;</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">&lt;div&gt;&lt;span&gt;Hello World&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"><span class=\"code\">\t&lt;span&gt;Hello World&lt;/span&gt;</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">&lt;div&gt;&lt;span&gt;Hello World&lt;/span&gt;&lt;/div&gt;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"><span class=\"code\">  &lt;hr&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;p&gt;Test&lt;/p&gt;&lt;br&gt;</span></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">--------------</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\"><span class=\"code\">  &lt;hr /&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;p&gt;Test&lt;/p&gt;&lt;br /&gt;</span></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8-HTML文件上下文管理\"><a href=\"#8-HTML文件上下文管理\" class=\"headerlink\" title=\"8.HTML文件上下文管理\"></a>8.HTML文件上下文管理</h2><h3 id=\"8-1-with添加子标签\"><a href=\"#8-1-with添加子标签\" class=\"headerlink\" title=\"8.1 with添加子标签\"></a>8.1 with添加子标签</h3><p>使用Python的<code>with</code>添加子标签：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个无序列表标签</span></span><br><span class=\"line\">h = ul()</span><br><span class=\"line\"><span class=\"comment\"># 使用with给无序列表添加列表项目</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> h:</span><br><span class=\"line\">    li(<span class=\"string\">'One'</span>)</span><br><span class=\"line\">    li(<span class=\"string\">'Two'</span>)</span><br><span class=\"line\">    li(<span class=\"string\">'Three'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(h)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Three<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同样，可以通过嵌套使用<code>with</code>生成更复杂的网页：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">h = html()</span><br><span class=\"line\"><span class=\"keyword\">with</span> h.add(body()).add(div(<span class=\"built_in\">id</span>=<span class=\"string\">'content'</span>)):</span><br><span class=\"line\">    h1(<span class=\"string\">'Hello World!'</span>)</span><br><span class=\"line\">    p(<span class=\"string\">'Lorem ipsum ...'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> table().add(tbody()):</span><br><span class=\"line\">        l = tr()</span><br><span class=\"line\">        l += td(<span class=\"string\">'One'</span>)</span><br><span class=\"line\">        l.add(td(<span class=\"string\">'Two'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">with</span> l:</span><br><span class=\"line\">            td(<span class=\"string\">'Three'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(h)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Lorem ipsum ...<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Three<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8-2-attr添加属性\"><a href=\"#8-2-attr添加属性\" class=\"headerlink\" title=\"8.2 attr添加属性\"></a>8.2 attr添加属性</h3><p>使用<code>with</code>的方式打开节点，通过<code>attr</code>函数为节点添加属性。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">d = div()</span><br><span class=\"line\"><span class=\"keyword\">with</span> d:</span><br><span class=\"line\">    attr(<span class=\"built_in\">id</span>=<span class=\"string\">'header'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"header\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-3-text函数为文本节点添加文本\"><a href=\"#8-3-text函数为文本节点添加文本\" class=\"headerlink\" title=\"8.3 text函数为文本节点添加文本\"></a>8.3 text函数为文本节点添加文本</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dominate.util <span class=\"keyword\">import</span> text</span><br><span class=\"line\">para = p(<span class=\"string\">\"This is a paragraph,\"</span>, __pretty=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(para)</span><br><span class=\"line\"><span class=\"keyword\">with</span> para:</span><br><span class=\"line\">    text(<span class=\"string\">'Have a look at our '</span>)</span><br><span class=\"line\">    a(<span class=\"string\">'other products'</span>, href=<span class=\"string\">'/products'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(para)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;This is <span class=\"keyword\">a</span> <span class=\"keyword\">paragraph</span>,&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;This is <span class=\"keyword\">a</span> <span class=\"keyword\">paragraph</span>,Have <span class=\"keyword\">a</span> look <span class=\"keyword\">at</span> our &lt;<span class=\"keyword\">a</span> href=<span class=\"string\">\"/products\"</span>&gt;other products&lt;/<span class=\"keyword\">a</span>&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p>从上面结果看，<code>dominate.util.text</code>函数修改文本节点的文本内容时，并不是对原有文本内容进行替换，而是添加原有文本的后面。</p>\n<h2 id=\"9-装饰器-Decorators\"><a href=\"#9-装饰器-Decorators\" class=\"headerlink\" title=\"9.装饰器(Decorators)\"></a>9.装饰器(Decorators)</h2><p><code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code>非常适合为页面部分创建可复用的小部件，一种实现方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> div() <span class=\"keyword\">as</span> d:</span><br><span class=\"line\">        p(<span class=\"string\">'Hello, %s'</span> % name)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting(<span class=\"string\">'Bob'</span>))</span><br></pre></td></tr></table></figure>\n<p>上面这种实现方式抽象成模板：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">widget</span>(<span class=\"params\">parameters</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tag() <span class=\"keyword\">as</span> t:</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t</span><br></pre></td></tr></table></figure>\n<p>通过使用标签（对象和实例）作为装饰器，可以避免模板中再引入相应标签，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@div</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    p(<span class=\"string\">'Hello %s'</span> % name)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting(<span class=\"string\">'Bob'</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello Bob<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>被标签(tag)装饰的函数会返回一个用来装饰标签的实例，比如用div标签装饰的函数则返回一个div实例。并且由于在函数内部隐式调用with语句，返回的实例会包含函数中创建的节点。</p>\n<p>如果需要将属性或其他数据添加到窗口小部件的根节点中，则还可以使用标签的实例作为装饰器。每个调用被装饰函数将返回用于装饰它的节点的副本。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@div(<span class=\"params\">h2(<span class=\"params\"><span class=\"string\">'Welcome'</span></span>), cls=<span class=\"string\">'greeting'</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    p(<span class=\"string\">'Hello %s'</span> % name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting(<span class=\"string\">'Bob'</span>))</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"keyword\">class</span>=\"<span class=\"symbol\">greeting</span>\"&gt;</span><br><span class=\"line\">  &lt;<span class=\"symbol\">h2</span>&gt;<span class=\"symbol\">Welcome</span>&lt;/<span class=\"symbol\">h2</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"symbol\">p</span>&gt;<span class=\"symbol\">Hello</span> <span class=\"symbol\">Bob</span>&lt;/<span class=\"symbol\">p</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"symbol\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"10-创建文件-Creating-Documents\"><a href=\"#10-创建文件-Creating-Documents\" class=\"headerlink\" title=\"10.创建文件(Creating Documents)\"></a>10.创建文件(Creating Documents)</h2><p>每次创建一个通用结构的HTML文档是很繁琐的事情，<code style=\"font-family: Source Code Pro,monospace;background-color: #f9f9f9;border: 1px solid #d3d3d3;padding: 0 2px 1px;font-size: .85rem;color: #6c6c6c;\">Dominate</code> 的<code>document</code>类能够很轻松地地解决这个问题。</p>\n<p>新建一个document类时，其类成员包括基本的HTML标签。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">d = document()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Dominate<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>document</code>类接收<code>title</code>、<code>doctype</code>、<code>request</code>这几个关键字，其对应的默认值分别为：<code>Dominate</code>、<code>&lt;!DOCTYPE html&gt;</code>和<code>None</code>。同时<code>document</code>类能够直接访问<code>title</code>、<code>head</code>和<code>body</code>节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">d = document()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.head</span><br><span class=\"line\">&lt;dominate.tags.head: <span class=\"number\">0</span> attributes, <span class=\"number\">1</span> children&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.body</span><br><span class=\"line\">&lt;dominate.tags.body: <span class=\"number\">0</span> attributes, <span class=\"number\">0</span> children&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.title</span><br><span class=\"line\"><span class=\"string\">u'Dominate'</span></span><br></pre></td></tr></table></figure>\n<p><code>document</code>类也的基本用法同其他节点一样。</p>\n<h2 id=\"11-SVG\"><a href=\"#11-SVG\" class=\"headerlink\" title=\"11.SVG\"></a>11.SVG</h2><p><code>dominate.svg</code> 模块包含SVG标签。SVG元素会将’_’自动转换为’-‘。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dominate.svg <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"built_in\">print</span>(circle(stroke_width=<span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>1.<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">开始学习 HTML - 学习 Web 开发 | MDN (mozilla.org)</a></p>\n<p>2.<a href=\"https://vegibit.com/html5-data-attributes/#:~:text=HTML5 Data Attributes 1 Data Attributes are Awesome.,can see%2C data attributes are very flexible.\">HTML5 Data Attributes - Vegibit</a></p>\n<p>3.<a href=\"https://realpython.com/python-with-statement/\">Context Managers and Python’s with Statement – Real Python</a></p>\n","tags":["Python","Html"]},{"title":"quaternion","url":"/undefined/quaternion/","content":"<p>四元数在三维旋转中的是最常用的一种方法，最近在做关于IMU相关的工作，下面就是过程中涉及到的相关资料的收集整理和个人理解记录。</p>\n<span id=\"more\"></span>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/quaternion-2.png\"></p>\n<h1 id=\"四元数与三维旋转\"><a href=\"#四元数与三维旋转\" class=\"headerlink\" title=\"四元数与三维旋转\"></a>四元数与三维旋转</h1><p><a href=\"https://krasjet.github.io/quaternion/\">Krasjet的文章</a>从二维复数开始，然后讨论用二维复数和二维空间中向量旋转的关系。然后引出四元数（Quaternion）及用四元数来表示三维空间中向量旋转相关知识。语言通俗、详细地推导了相关的数学公式，是很好的一篇文章，且在附录部分介绍了很多继续深入学习的资料。</p>\n<center><embed src=\"quaternion.pdf\" width=\"780\" height=\"800\"></center>\n\n\n\n<h1 id=\"四元数与欧拉角\"><a href=\"#四元数与欧拉角\" class=\"headerlink\" title=\"四元数与欧拉角\"></a>四元数与欧拉角</h1><p>欧拉角：</p>\n<ul>\n<li>Yaw(偏航)，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.473ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 651 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D713\" d=\"M161 441Q202 441 226 417T250 358Q250 338 218 252T187 127Q190 85 214 61Q235 43 257 37Q275 29 288 29H289L371 360Q455 691 456 692Q459 694 472 694Q492 694 492 687Q492 678 411 356Q329 28 329 27T335 26Q421 26 498 114T576 278Q576 302 568 319T550 343T532 361T524 384Q524 405 541 424T583 443Q602 443 618 425T634 366Q634 337 623 288T605 220Q573 125 492 57T329 -11H319L296 -104Q272 -198 272 -199Q270 -205 252 -205H239Q233 -199 233 -197Q233 -192 256 -102T279 -9Q272 -8 265 -8Q106 14 106 139Q106 174 139 264T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 299 34 333T82 404T161 441Z\"></path></g></g></g></svg></mjx-container></li>\n<li>Roll(横滚)，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.348ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 596 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D719\" d=\"M409 688Q413 694 421 694H429H442Q448 688 448 686Q448 679 418 563Q411 535 404 504T392 458L388 442Q388 441 397 441T429 435T477 418Q521 397 550 357T579 260T548 151T471 65T374 11T279 -10H275L251 -105Q245 -128 238 -160Q230 -192 227 -198T215 -205H209Q189 -205 189 -198Q189 -193 211 -103L234 -11Q234 -10 226 -10Q221 -10 206 -8T161 6T107 36T62 89T43 171Q43 231 76 284T157 370T254 422T342 441Q347 441 348 445L378 567Q409 686 409 688ZM122 150Q122 116 134 91T167 53T203 35T237 27H244L337 404Q333 404 326 403T297 395T255 379T211 350T170 304Q152 276 137 237Q122 191 122 150ZM500 282Q500 320 484 347T444 385T405 400T381 404H378L332 217L284 29Q284 27 285 27Q293 27 317 33T357 47Q400 66 431 100T475 170T494 234T500 282Z\"></path></g></g></g></svg></mjx-container></li>\n<li>Pitch(俯仰)，<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.023ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.061ex\" height=\"1.618ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -705 469 715\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D703\" d=\"M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z\"></path></g></g></g></svg></mjx-container></li>\n</ul>\n<p>向量绕轴<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.566ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"30.325ex\" height=\"2.47ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -841.7 13403.5 1091.7\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(728.8,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(1784.6,0)\"><path data-c=\"5B\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2062.6,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2591.6,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3036.2,0)\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(3465.2,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3909.9,0)\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(4342.9,0)\"><g data-mml-node=\"mo\"><path data-c=\"5D\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(311,363) scale(0.707)\"><path data-c=\"1D447\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(5201.7,0)\"><path data-c=\"2C\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(5646.4,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(6035.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(562,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(7223.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(8223.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D44F\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(462,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(9311.1,0)\"><path data-c=\"2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g data-mml-node=\"msup\" transform=\"translate(10311.4,0)\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(466,363) scale(0.707)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g data-mml-node=\"mo\" transform=\"translate(11458.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(12514.5,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13014.5,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g></g></g></svg></mjx-container> 旋转<mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.025ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"1.448ex\" height=\"1.025ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -442 640 453\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D6FC\" d=\"M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z\"></path></g></g></g></svg></mjx-container> 角度的过程用四元数表示为：</p>\n<script type=\"math/tex; mode=display\">\n    q(\\alpha, r) = [cos(\\alpha/2)，a*sin(\\alpha/2)，b*sin(\\alpha/2)，c*sin(\\alpha/2)]^T</script><p>欧拉角和四元数转换过程中，需要注意轴旋转顺序，此处旋转顺序为ZYX。根据旋转复合，可得：</p>\n<center><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/img-1.png\"></center>\n\n\n\n<p><a href=\"https://item.kongfz.com/book/62834881.html\">多旋翼飞行器设计与控制</a> P100-103</p>\n"},{"title":"士兵突击—不是一个兵王的故事","url":"/undefined/%E5%A3%AB%E5%85%B5%E7%AA%81%E5%87%BB%E2%80%94%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%85%B5%E7%8E%8B%E7%9A%84%E6%95%85%E4%BA%8B/","content":"<h2 id=\"人性\"><a href=\"#人性\" class=\"headerlink\" title=\"人性\"></a>人性</h2><p>1、遵守是一种惯性，散漫也是一种惯性，人是适应性很强的生物，能适应懒散的惯性也能适应积极的惯性，如果你还能碰到给你惯性的人。</p>\n<p>2、团结就是从众，从众就是迁就集体的底线，底线就是一根一直掉深不见底的线；</p>\n<p>3、坚持分很多种，有一种我们比较熟悉，就是把全世界推到自己的对立面，把所有投来的目光视为毒箭，做事为打脸，怨恨当源泉。</p>\n<p>4、自卑和怯懦的人在面对新环境时会长期的观察和揣度，表现为一种木讷，这种环境下也会习惯性地求助于一个兄长的角色，又往往失了分寸。</p>\n<p>5、人活的是情感，不是道理。</p>\n<h2 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h2><p>1、人这辈子好像一定会遇到这种时候，没人关心、没人搭理，一天天下来有些浑浑噩噩，刚开始还想想事，到最后终于放弃计划，不再去度量时间。</p>\n<p>2、日子就是问题叠着问题。</p>\n<p>3、因循一个结果，盘出一个原因。</p>\n<p>4、贵人——善良会吸引善良，只要你也是善良的。</p>\n<p>5、他所做的每件小事就好像抓住一棵救命稻草一样，到最后你才发现，他抱住的已经是参天大树了。</p>\n<div style=\"text-align:center;\">\n  <img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/image-20210925144410107.png\"><br>\n  <a href=\"https://www.bilibili.com/video/BV1o34y1Q7LM\" style=\"color:#63A5E0;\">《士兵突击》——不是一个兵王的故事网页链接码</a>\n  <br>\n</div>\n","tags":["随想"]},{"title":"搜索技巧","url":"/undefined/%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/1c7a57458a2d4281a12bb816f51e2876.PNG\"></p>\n<span id=\"more\"></span>\n<h1 id=\"1-写在前面\"><a href=\"#1-写在前面\" class=\"headerlink\" title=\"1 写在前面\"></a>1 写在前面</h1><h2 id=\"1-1-何为搜索\"><a href=\"#1-1-何为搜索\" class=\"headerlink\" title=\"1.1 何为搜索\"></a>1.1 何为搜索</h2><p>​    先做解释，搜索的学术名词叫<a href=\"https://zh.wikipedia.org/wiki/信息檢索\">信息检索</a>，通俗的解释就是基于搜索引擎、根据一定的搜索思路、应用相关的搜索技巧在互联网上找到想要的信息。互联网上信息很多，但也不是任何信息都能够找到，比如想要通过常规手段在互联网查找身份证信息就几乎不可能。</p>\n<h2 id=\"1-2-搜索的重要性\"><a href=\"#1-2-搜索的重要性\" class=\"headerlink\" title=\"1.2 搜索的重要性\"></a>1.2 搜索的重要性</h2><p>​    搜索就是一个主动获取信息的过程。个人认为，人的认知、接触的信息、思维模型之间的关系是这样的：首先，一个聪明的人或者说是明事理的人，其内化了的信息一定是广泛且深刻的，大量内化了的高质量信息能够很大程度上影响人的认知，认知决定思维模型，思维模型反过来又会影响人的认知，认知又影响对信息的接收度。这段话很绕，关键点就是认知、信息、思维是互相作用于人的因子。</p>\n<p>​    获取信息的方式有很多，包括但是不限于：阅读、学习、与人交谈、反思等；</p>\n<h2 id=\"1-3-源起\"><a href=\"#1-3-源起\" class=\"headerlink\" title=\"1.3 源起\"></a>1.3 源起</h2><p>​    这篇思考源于我一个朋友提的问题，具体问题就是能不能找到一个行业PPT，同时也和我个人的学习、工作相关。一开始并没有动手写，先是在<a href=\"https://www.chongbuluo.com/\">虫部落 - 让搜索更简单 (chongbuluo.com)</a>上看了一些搜索案例、技巧分析，工作的间隙偶尔会有想法蹦出来也就一并记下来了。一来能帮助回答我朋友的问题，二来对自己的搜索方式进行重新认知，希望有所提升，是以为记。</p>\n<h1 id=\"2-搜索技巧\"><a href=\"#2-搜索技巧\" class=\"headerlink\" title=\"2.搜索技巧\"></a>2.搜索技巧</h1><p>​    接下来的内容主要是参考：</p>\n<ul>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/64991124\">搜索术基础-信息搜索心法+资源搜索技巧 - 知乎 (zhihu.com)</a></p>\n</li>\n<li><p><a href=\"https://www.chongbuluo.com/forum.php?mod=viewthread&amp;tid=5942\">朱丹超级搜索术笔记：百度搜索相关的技巧 - Keyword - 虫部落 (chongbuluo.com)</a></p>\n</li>\n<li><p>自己对搜索技巧认知的结合；</p>\n<p>ps：两个参考链接都是源于朱丹《超级搜索术》</p>\n</li>\n</ul>\n<h2 id=\"2-1-搜索引擎选择\"><a href=\"#2-1-搜索引擎选择\" class=\"headerlink\" title=\"2.1 搜索引擎选择\"></a>2.1 搜索引擎选择</h2><p>搜索引擎很多，包括通用搜索引擎和垂直搜索引擎，比如</p>\n<p>通用搜索引擎：</p>\n<ul>\n<li><a href=\"https://www.google.com/\">Google</a></li>\n<li><a href=\"https://cn.bing.com/?mkt=zh-CN\">必应 (bing.com)</a></li>\n<li><a href=\"https://yandex.com/\">Yandex</a></li>\n<li><a href=\"https://www.yahoo.com/?guccounter=1&amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;guce_referrer_sig=AQAAAK4OQbhaMLVFb24F7JzlyPnXgVYrifdAdwX_KkoBmZftoUQjWtenUnw6APvdcFHT-pJqOTvyWStfib_oRMgJjszWMlPX0qlrlv7LIMHFm1ytZkrds7Gd0x9Od030Izmp6AVTCBYUDDR_2zRdvrO4BoTqB-zajl_ieqH9OpZe_D5f\">Yahoo</a></li>\n<li>….</li>\n</ul>\n<p>垂直搜索引擎：</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/Wikipedia:首页\">维基百科</a></li>\n<li><a href=\"https://scholar.google.com/\">Google 学术搜索</a></li>\n<li><a href=\"https://cn.bing.com/academic/?mkt=zh-CN\">搜索 学术 (bing.com)</a></li>\n<li><a href=\"https://www.zhihu.com/signin?next=%2F\">知乎 - 有问题，就会有答案 (zhihu.com)</a></li>\n<li>…</li>\n</ul>\n<p>不同的搜索引擎有各自的特色，搜索结果也就差异很大，具体效果有一句话是这样说的，“百度看病 癌症起步”。你在搜索的时候也许只是想问，“维C片的功效”。对于通用引擎，一直是使用频率最高的，个人用Google偶尔不想<code>翻墙</code>就用必应。找论文或者其他资料的时候就用垂直搜索引擎。我也强烈建议把默认搜索引擎至少换成必应，百度不推荐。</p>\n<p><strong>这里再次推荐一下虫部落，一个专注于搜索的高品质、小众BBS。里面的wiki有基本所有常用的搜索引擎相关介绍和入口。</strong></p>\n<div style=\"text-align:center;\">\n    <a href=\"https://www.chongbuluo.com/\" style=\"font-size:25px;fong-weight:bold;\">虫部落 - 让搜索更简单</a>\n    <hr>\n    <img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/20220406153835.png\">\n</div>\n\n\n\n<h2 id=\"2-2-搜索逻辑\"><a href=\"#2-2-搜索逻辑\" class=\"headerlink\" title=\"2.2 搜索逻辑\"></a>2.2 搜索逻辑</h2><p>​    简而言之，搜索就是一个有目的的信息收集过程。虽然可能每天都有会经历很多次，但是很少仔细想过究竟是怎样一个过程。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.想找到一些搜索技巧方面的教程</span><br><span class=\"line\">2.然后你就会打浏览器</span><br><span class=\"line\">3.输入关键字然后对结果进行筛选</span><br></pre></td></tr></table></figure>\n<p>上述过程的本质就是：找什么→哪里找→怎么找；更详尽的解释是包括：</p>\n<ol>\n<li>提取关键词</li>\n<li>选择合适的搜索工具(引擎)</li>\n<li>构造检索式</li>\n<li>筛选结果</li>\n<li>根据结果调整策略</li>\n</ol>\n<h3 id=\"2-2-1-提取关键词\"><a href=\"#2-2-1-提取关键词\" class=\"headerlink\" title=\"2.2.1 提取关键词\"></a>2.2.1 提取关键词</h3><p>​    搜索的第一步，<strong>口语化搜索转化为关键词</strong>；</p>\n<p>比如：“哪里有搜索技巧相关教程？”</p>\n<p>搜索的时候其实只需要输入：搜索技巧+教程</p>\n<h3 id=\"2-2-2-选择合适的搜索工具\"><a href=\"#2-2-2-选择合适的搜索工具\" class=\"headerlink\" title=\"2.2.2 选择合适的搜索工具\"></a>2.2.2 选择合适的搜索工具</h3><p>​    这一步，我认为至关重要，“工欲善其事必先利其器”。大家都知道论文得上知网，不是“百度一下，你就知道。”根据你对需要搜索信息结果的分析，再在相关的专业引擎上去搜索往往能更快的找到想要的结果。</p>\n<p>比如，编码技术问题上stackoverflow、github。搜索技术问题上虫部落。论文就上专业的论文网站。</p>\n<h3 id=\"2-2-3-构建检索式\"><a href=\"#2-2-3-构建检索式\" class=\"headerlink\" title=\"2.2.3 构建检索式\"></a>2.2.3 构建检索式</h3><p>​    这块的东西就涉及到搜索指令方面的了，用得比较多有：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">搜索指令</th>\n<th style=\"text-align:center\">解释</th>\n<th style=\"text-align:center\">语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">“”</td>\n<td style=\"text-align:center\">精确搜索：双引号</td>\n<td style=\"text-align:center\">“keywords”</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">site</td>\n<td style=\"text-align:center\">站内搜索</td>\n<td style=\"text-align:center\">site:stackoverflow.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">通配符搜索</td>\n<td style=\"text-align:center\">keywo<em>ds </em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">减号排除，缩小范围</td>\n<td style=\"text-align:center\">- 排除内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">filetype</td>\n<td style=\"text-align:center\">搜索指定类型文件</td>\n<td style=\"text-align:center\">filetype:filetypies</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">link</td>\n<td style=\"text-align:center\">查找连接到某个特定网页的网页</td>\n<td style=\"text-align:center\">link:baidu.com</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">OR</td>\n<td style=\"text-align:center\">或逻辑</td>\n<td style=\"text-align:center\">python OR html</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AND\\</td>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">搜索包含两个关键词的搜索结果</td>\n<td>python AND css \\</td>\n<td>python+css</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"精准搜索\"><a href=\"#精准搜索\" class=\"headerlink\" title=\"精准搜索\"></a><strong>精准搜索</strong></h4><p>比方说在搜索「Joe Bloggs」的时候，在没有给关键词加上双引号的情况，搜索引擎会显示所有分别和「Joe」以及「Bloggs」相关的信息，但这些显然并不是我们想要的结果。但在加上双引号后，搜索引擎则仅会在页面上反馈和「Joe Bloggs」相吻合的信息。</p>\n<h4 id=\"site\"><a href=\"#site\" class=\"headerlink\" title=\"site\"></a><strong>site</strong></h4><p>比如搜索虫部落里面的相关搜索技巧的文章：<code>搜索技巧 site:chongbuluo.com</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/20220406155126.png\" style=\"width:800px;height:600px;\"></p>\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"*\"></a><strong>*</strong></h4><p>通配符搜索，比如突然脑子里冒出一句歌词，但是想不起歌名的时候：</p>\n<p><code>全都怪我， 该沉默时*</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/20220406155204.png\"></p>\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"-\"></a><strong>-</strong></h4><p>排除搜索范围，比如我搜技术问题的时候最讨厌的网站CSDN和博客园：</p>\n<p><code>pip no matching distribution found for -csdn.net -cnblogs</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/20220406155308.png\"/></p>\n<h4 id=\"filetype\"><a href=\"#filetype\" class=\"headerlink\" title=\"filetype\"></a><strong>filetype</strong></h4><p>指定搜索结果包含特定格式的文件，比如想找到与快速减肥有关的 PowerPoint 演示文稿。</p>\n<p><code>“Quickly lose weight”  filetype:ppt</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/20220406155350.png\"/></p>\n<p>当然上述搜索语法是可以混合使用的。详细的相关语法参阅下面两篇文章。</p>\n<p><a href=\"https://yangjiantao.github.io/2018/05/09/Google搜索技巧/\">Google搜索技巧 | Jiantao (yangjiantao.github.io)</a></p>\n<p><a href=\"https://www.xnbeast.com/google-advanced-search-tips/\">如何在谷歌上搜索: 31个 Google 高级搜索技巧 | 埃克森数字营销 (xnbeast.com)</a></p>\n<h1 id=\"3-写在最后\"><a href=\"#3-写在最后\" class=\"headerlink\" title=\"3.写在最后\"></a>3.写在最后</h1><p>搜索技巧及思路是一个需要不断在实际场景中完善和丰富的过程。</p>\n","tags":["search"]},{"title":"《人世间》 摘抄","url":"/undefined/%E3%80%8A%E4%BA%BA%E4%B8%96%E9%97%B4-%E6%91%98%E6%8A%84%E3%80%8B/","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/%E8%BE%9B%E5%BC%83%E7%96%BE.PNG\" alt=\"辛弃疾\" style=\"zoom: 50%;\" /></p>\n<div>\n    <p style=\"font-size:22px;font-family:楷体;font-weight:bold;\">《人世间》于我，是一本很好的书。平凡、真实、伟大；故事讲述的一个东北普通家庭从文化大革命到改革开放40多年后的今天家庭发展历程。因为真实，自然就平凡，于平凡中显精神之伟大。<br>\n    借用题记：“于人间烟火处彰显道义和担当，于悲欢离合中，抒写情怀和热望。”</p>\n</div>\n\n<span id=\"more\"></span>\n<div style=\"text-align:center;\">\n    <p style=\"font-size:30px;font-family:楷体;font-weight:bold;\">\n        上部\n    </p>\n</div>\n\n\n\n<div style=\"text-align:left;\">\n        <p style=\"font-size:18px;font-family:微软雅黑,楷体;font-weight:bold;\">\n1.当别人对你下跪相求时，表面看来完全是别人的可怜，往深处想想，其实也未必不是别人对你的恩德，因为那会使你看清自己究竟是怎样的人。而看清自己，总是比看清别人要难的。谁都希望看清别人，希望自己看清自己的人却不是太多。真实情况很可能是这样——自己内心里的丑恶，也许比自己一向以为的别人内心里的丑恶更甚。（第七章.P099）<br><br>\n2.如果两个人的爱情正经受严峻考验，亲人们是有义务呵护它的。即使真爱，也并不像人们想象的那么坚韧，恰恰相反，往往也是非常脆弱的，甚至可能比雌雄鸟兽之间那种相依为命的关系还脆弱。因为动物之间的爱情是不附丽任何想象的，也是不寄托任何希望的，所以它们之间的雌雄之爱没什么失望可言。而人会对爱情附丽太多的想象，寄托太多的希望，越是一方付出很大的代价去追求的爱情，越容易导致后来感到很大的失望。(第十章.P181)<br><br>\n3.老太太点燃了他心中的一盏灯，那盏灯的名字叫大学。他不知道，除了上大学，还有什么其他方式能算得上是一种改变人生的正派方式——可以使自己对人生不再沮丧，而是比较满意。(第十三章.P283)<br><br>\n4.有位智者点拨我，女人想完全占有一个男人，那就要将自己的身体完全给予他。我要完全占有你，所以我做好了完全给予你的心理准备。(第十四章.P331)<br><br>\n5.哥哥说，好青年正确对待个人问题的三原则是，要对自己负责，对对方负责，还要对双方的家庭主要是父母负责。最后一条比较有伸缩性，兄弟姐妹的看法可以兼顾，但也可以不予考虑。对自己负责就是不勉强自己，凡当初勉强，婚后生活必有裂痕。对对方负责就是要真诚坦白，不能为了与对方实现婚姻目的就隐瞒自己的实际情况。要明明白白地讲清自己是怎样一个人，自己家庭是怎样的家庭，让对方一清二楚，要让对方做出感情和理智的决定。(第十六章.P397)<br><br>\n6.当然啦，那你得接着付出一些代价，真爱往往就是一方甘愿为另一方付出沉重代价的。(第十七章.P411)<br><br>\n        7.他觉得他和她的关系似乎成了这样——他站在一条河中，河的对岸是她；他为她而下水，却不敢再贸然向前，因为前边水太深，而他不识水性，每进一步都有没顶的危险。退回去不成问题，却又不甘心退回，因为身后的岸上没有能让他感到幸福的事物。因为她在彼岸，彼岸对他具有巨大的吸引力，能让他对幸福产生丰富的想象。他希望她不停地向他招手，给予他前行的勇气。而她并不，似乎也不会主动望向河中的他，更不会自己也下水拉他过去。他如果真的退回去，她似乎还能够忘了他。（第十七章.P415）<br><br></p>\n</div>\n\n<div style=\"text-align:center;\">\n    <p style=\"font-size:30px;font-family:楷体;font-weight:bold;\">\n        中部\n    </p>\n</div>\n\n\n\n<div style=\"text-align:left\">\n    <p style=\"font-size:18px;font-family:微软雅黑,楷体;font-weight:bold;\">1.贫穷在许许多多中国人身上造成的痕迹，非“惜物”二字所能概括。它像基因代代遗传，即使某物只不过是针头线脑或小半张彩纸，他们往往也会保存多年。（第一章.P18）<br><br>\n2.物资匮乏的年代，文化娱乐生活缺失，百分之九十五以上的中国人家里没有一本书。在千千万万底层青年之间，谈情说爱几乎是唯一浪漫的事，又大抵是一生仅有一次机会的浪漫事。婚前还是婚后，打情骂俏带给他们的娱乐满足远远超过相声和喜剧。至于性事，千真万确地在他们之间一向起着从肉体到心理相互犒劳的作用，往往成为他们抵御贫穷、不幸和困难，共同把人生坚持下去的法宝。当然，前提是彼此爱对方。（第一章.P28）<br><br>\n3.有一类女人似乎是上帝差遣到民间的天使，只要她们与哪一户人家发生了亲密关系，那户人家便蓬荜生辉，大人孩子的心情也会好起来。她们不一定是开心果，但起码是一炷不容易灭的提神香。（第一章.P29）<br><br>\n4.当年物质相对匮乏，人与人之间的关系几乎只能由感情与思想维系。这颇似五四运动前后的中国，凡有些思想的人，自然而然以思想作为向心力。所谓“物以类聚，人以群分”，也几乎主要是以思想为基础来聚与分的。若在思想上属同一营垒，彼此间感情之真之深，往往令人感叹。（第一章.P38）<br><br>\n  5.‘福兮祸所伏，祸兮福所倚。’每个人有每个人的宿命。(第六章 )<br><br>\n  6.政治格局发生了巨大改变，社会格局尚未发生明显变化，但一些迹象意味着，后一种改变即将开始，只不过不敏感的人没有觉察到。底层的人们对时代即将发生的改变从来是不敏感的。(第四章 P62)<br><br>\n  7.对于底层青年们而言，友谊是必须认真对待的。他们都本能地明白，有些人的一生，是不断结交新朋友的一生；好事降临得越多，结交新朋友的机会越多。在他们自己的人生中，好事降临的机会本来就不多。在他们那样的单位上班，如果不主动与别人交往，才不会有多少人主动来交往呢！即使自己主动与别人交往，别人也不见得愿意。“有了新朋友，不忘老朋友”这样的话，说的是人生与他们很不一样的“有些人”。而在他们之间，富有人情味的话往往是这么体现的——“咱们这种人一辈子才能有几个朋友啊，失去一个少一个，怎么能不把朋友当回事呢！”(第四章 P63)\n  <br><br>\n  8.朋友大抵是一种以同质化的命运为前提所建立的友好关系，原来同质化的命运一旦出现了较大反差，即使是朋友往往也会由羡慕而嫉妒的。如果反差巨大，不论原来多么巩固的朋友关系也会沙化、瓦解。（第四章 P65）\n  <br><br>\n  9.寻求帮助未果，内心极大的不满只需要极小理由，也足以让人耿耿于怀——朋友间如此，兄弟间也如此。（第八章 P193）\n  <br><br>\n  10.人情关系乃人类社会通则，正如马克思所言：“人是社会关系的总和。”此种通则，古今中外，概莫能外。有些人靠此通则玩转官场、商场，平步青云，飞黄腾达，老百姓却是要靠人情保障生存权利。这看起来很俗，却也就是俗而已。在有限的范围内，生不出多大的丑恶。丑恶的人情关系主要不在民间，不在民间的人情关系也没多少人情可言。（第八章 P194）\n  <br><br>\n  11.还是尽量做好人。坏人也有遭遇不幸的时候，坏人不幸时拍手称快的人多，而好人不幸时总会有人同情帮助。做多少好事多大好事是能力问题，运用职权谋过私利整过人给别人穿过小鞋是人品问题。一个从没运用职权谋过私利的人，也可能运用职权整人，心狠手辣冷酷无情置对方于死地而后快。（第八章 P197）\n  <br><br>\n  12.她说：“你那么想是不对的。现在不是都主张往前看吗？往前看的意思那就是——好比咱们和国庆、赶超两家人，好比所有光字片的，不论男女老少都站在脏水洼里，不是水不太深，没不到腰以上吗？不就是水很脏淹不死人吗？左看看没边，右看看没岸，倒着走退不到有干地的地方，有人说都别转身，也别左看右看的，一齐往前看，我们保证只要大家一齐往前走，前边就不再是脏水洼了，那咱们就蹚着脏水随大溜往前走呗！有人说往前看总比连说这种话的人都没有强吧？”“你信那种话吗？”“干吗不信呢？不信又能怎么样呢？如果不信不是就根本没希望了？所以信比不信好！信就是像我这样，该快活就快活。不信就会像你这样，明明并没走到绝路上，却老是想明天眼前必是绝路了，结果该快活的时候也不肯快活了。”（第八章 P228）\n  <br><br>\n  13.改革时代的艰难，首先体现在草根阶层。（第十六章）</p>\n</div>\n\n\n\n\n\n<div style=\"text-align:center;\">\n    <p style=\"font-size:30px;font-family:楷体;font-weight:bold;\">\n        下部\n    </p>\n</div>\n\n\n\n<div style=\"text-align:left;\">\n        <p style=\"font-size:18px;font-family:微软雅黑,楷体;font-weight:bold;\">\n1.再也不是什么人的儿子了，周秉昆感到巨大的恐慌。父亲死时，那种恐慌袭击过他一次。之后相当长的一段日子里，他觉得心被掏空了一半。然而，毕竟还有母亲在，自己实际上还是一个儿子。现在母亲也死了，“爸妈”二字对于他已无任何现实意义，他陷入无边无际的心理孤寂。（第一章）\n  <br><br>\n  2.现在我总算活明白了，人生一世，都只不过活的是某种想法。有的人想法就不实际，结果不但自己活得不痛快，还影响得别人也不痛快。退一步海阔天空，就是指想法的改变。想法一变，就没什么事非得怎样、不能怎样的。（第一章）\n  <br><br>\n  3.还是的，没往细处想的心愿，不管多好，往往都不大靠谱，只是一厢情愿、不切实际的心愿。如果你能换一种想法，心情就会豁然开朗了。（第一章）\n  <br><br>\n  4.给予自己生命的人，是对自己有天恩的人。天恩如同日月光辉，一个人如果有能力必须报答的。（第四章）\n  <br><br>\n  5.不论男女，一旦组成了自己的家庭，感情的触须几乎必然就短了一些；有了自己的儿女后，就又短了些。有的人甚至变得眼中只有老婆孩子或丈夫孩子，渐渐六亲不认起来。对从前的朋友、哥们儿，也往往只以利用价值的大小来决定交往的亲疏远近了。（第八章 P229）\n  <br><br>\n  6.亲情——草根阶层赖以抵挡生活和命运打击的最后盾牌，在艰难时代的风霜雨雪侵蚀之下变得锈迹斑斑，极易破损。（第八章 P229）\n  <br><br>\n  7.人活在世，何为普通，何为不普通。（第八章 P242）\n  <br><br>\n  8.社会原因导致的普遍贫困与个体原因造成的特殊不幸，在社会总压力的冲击之下艰难维持着。你能理解的，而不应仅以同情心将普遍现象与个体原因混为一谈。（第九章 P268）\n  <br><br>\n  9.以前他身上没有吸引我的地方，以后是出于感激，为了报答他才做了他的妻子。结果事与愿违，非但没报答成，反而没完没了一直拖累他。但自从做了他的妻子，觉得他善良有趣味，对世事人生有独立见解。一个男人身上有此三点，足以值得我这样的女人爱了。许多男人，身上连我说的三点中的一点都没有，对不对？（第九章 P301）\n  <br><br>\n  10.你的人生并没有毁，只是不那么称心如意罢了。人生不如意十之八九，随她去吧。（第十二章 P329）\n  <br><br>\n  11.“正因为是事实，我才要那么说。亲人是天定的关系。即使一个亲人真的做错了事，甚至犯法了，只要认罪服法，有悔过自新的表现，亲人就不应该嫌弃。天定的关系是超常的关系，是要从不嫌弃、分担压力的关系。”（第十二章 P337）\n  <br><br>\n  12.拯救者一门心思工作，被拯救者集体等着看笑话、说风凉话；拯救者想要成功，还必须斗心眼，进行智力博弈——这也是人类历史上屡见不鲜的事。由于政府官员公信力存疑，这种现象就更不足为奇。(第十三章)\n  <br><br>\n  13.你完全是杞人忧天、胡思乱想！向前看是要看到希望，而看到希望是有根据的。不应该偏往坏处想，自己吓自己……(第十四章)\n  <br><br>\n  14.他们种的菜往往吃不过来，喂猪了。猪多吃了几口就能多长两斤肉吗？也不能，但亲自喂给猪，眼看着猪吃掉，功利目的达到，心理就获得了满足。花有什么用呢？连家畜家禽都不吃。他说全中国都陷入功利主义泥沼，农民也不可能不焦躁，不受影响，而他们的功利目的又只有通过土地来实现，所以他们对土地变得急功近利，他们那样做应该能理解。城里人乐意花买一本好书的钱，去买一塑料袋垃圾食品给自己的孩子吃，他难以理解。他说，他以前偏与现实较劲儿，凡助长功利主义思维的书，即使好卖也不进货，结果绕了挺长一段弯路。什么教人炒股发财、长寿秘诀、八面玲珑之类的书，只要好卖，那就进吧！(第十四章)\n  <br><br>\n  15.他们能这么提到我就不错了。可我的死对你和你的亲人将会不同，你们会悲伤很长时间缓不过劲儿来，你们会经常怀念我。所以，我要多为你的亲人做好事、实事，让你们不想我都不可能，因为你们总会互相提到我。(第十四章)\n  <br><br>\n  16.是的，知识、学历、机会、权力、个人对人生的设计都不同程度改变了他们的命运，但最重要的因素乃是时代的发展变迁，是国家的改革开放。世界上每个国家大多数人们的命运，概莫如此。(第十四章)\n  <br><br>\n  17.归根结底，大多数人的生活绝非个人之力所能改变，也并不是个人愿望所能左右。不可不承认，国家、社会、时代的因素尤显重要。(第十四章)\n  <br><br>\n  18.那种以少帮多接近于拯救的帮助，对于拯救者就是特别吃力的亲情责任。(第十四章)\n  <br><br>\n  19.她庆幸自己终于活到了中国最好的时光。如果她是狄更斯，那么，她的《双城记》将会如此开篇：“这是一个最好的时代。谢天谢地，这真是一个最好的时代！因为，我见证了这个时代的好。”(第十四章)\n  <br><br>\n  20.初心和结果，有时成悖论。抹杀初心，结果就是“阴谋”的最好证明。(第十六章)</p>\n</div>\n","tags":["读书"]},{"title":"树莓派制作影音系统","url":"/undefined/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%88%B6%E4%BD%9C%E5%BD%B1%E9%9F%B3%E7%B3%BB%E7%BB%9F/","content":"<h1 id=\"树莓派4b打造影音系统-LibreELEC\"><a href=\"#树莓派4b打造影音系统-LibreELEC\" class=\"headerlink\" title=\"树莓派4b打造影音系统(LibreELEC)\"></a>树莓派4b打造影音系统(LibreELEC)</h1><div style=\"text-align:center;\">\n    <img src=\"https://cdn.jsdelivr.net/gh/Joiner12/PicBed@main/icon-release-k19.jpg\" style=\"width:400px;height:250px;\"/>\n</div>\n\n\n\n<span id=\"more\"></span>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>一个不是很智能的电视+一个闭源的机顶盒+随便造的树莓派 = 把树莓派打造成多媒体电视盒子，使用树莓派替代那个闭源的机顶盒。思路其实很简单，树莓派是一个廉价的电脑，包括USB、Ethernet接口、hdmi等接口，支持多种Linux操作系统。这其中就有像<strong>LibreELEC、OSMC这种适合做媒体服务器</strong>的专用系统。将这些系统在树莓派上安装、运行就能实现目的，本篇主要记录安装过程和安装过程遇到的部分问题及解决方法。</p>\n<p><strong>LibreELEC</strong></p>\n<p>LibreELEC是一个开源的Linux发行版，核心软件是Kodi，也安装了足够多的软件包。该项目是现已被放弃的 OpenELEC 项目的一个分支。LibreELEC旨在提供一个包含运行Kodi媒体中心软件的基本必需品的操作系统。Libreelec简单来说就是最小限度满足Kodi运行的Linux，Libreelec是把精简版linux与kodi集成的媒体中心系统。系统非常精简，整个系统就是Kodi。开机直接进入Kodi，速度快，cpu占用率低，非常适合性能较差的主机。也许原来的系统里装Kodi播放卡顿，刷成Libreelec播放会更流畅。</p>\n<h2 id=\"1-软硬件准备\"><a href=\"#1-软硬件准备\" class=\"headerlink\" title=\"1.软硬件准备\"></a>1.软硬件准备</h2><h3 id=\"1-1硬件：\"><a href=\"#1-1硬件：\" class=\"headerlink\" title=\"1.1硬件：\"></a>1.1硬件：</h3><ul>\n<li>树莓派(Raspberry 4b)+电源+外设(键盘鼠标)</li>\n<li>读卡器(SD 卡)</li>\n<li>HDMI+显示器</li>\n</ul>\n<h3 id=\"1-2软件\"><a href=\"#1-2软件\" class=\"headerlink\" title=\"1.2软件:\"></a>1.2软件:</h3><ul>\n<li>Raspberry Pi Imager—树莓派官方烧写工具</li>\n</ul>\n<h2 id=\"2-升级Raspberry-4b-Bootloader-手动\"><a href=\"#2-升级Raspberry-4b-Bootloader-手动\" class=\"headerlink\" title=\"2.升级Raspberry 4b Bootloader(手动)\"></a>2.升级Raspberry 4b Bootloader(手动)</h2><p>Bootloader(引导启动程序)，又叫引导程序（boot program 或者引导加载程序（bootstrap loader），是一种特殊的系统程序(operating system software)，在硬件设备上电后被加载到计算机的内存中运行。通俗的解释就是，Bootloader是硬件在上电后执行的第一段代码，在它完成CPU和相关硬件的初始化之后，再将操作系统映像或固化的应用程序装载到内存中然后跳转到操作系统所在的空间。</p>\n<p><strong>为什么需要升级Bootloader?</strong></p>\n<p>一般情况下，是不需要升级Bootloader的，之前在用树莓派安装Win10操作系统的时候，提示：</p>\n<p><code>如果要从USB驱动器启动您的Raspberry Pi 4/400或使用GPT分区方案，则必须将Bootloader更新至最新版本。</code></p>\n<p>所以为了减少不必要的麻烦还是决定把Bootloader更新了，使用Raspberry Pi Imager更新方法参考树莓派官方文档<a href=\"https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#raspberry-pi-4-boot-eeprom\">Raspberry Pi Documentation - Raspberry Pi Hardware</a>，具体步骤如下：</p>\n<ol>\n<li>从<a href=\"https://www.raspberrypi.com/software/\">Raspberry Pi OS – Raspberry Pi</a>下载安装Raspberry Pi Imager软件；</li>\n<li>选择一张SD卡，SD卡需要先格式化；</li>\n<li>运行 Raspberry Pi Imager，依次选择：(1)Operating System：Misc utility images ➤ Bootloader  ➤  boot-mode i.e. SD (recommended), USB or Network (2) Storage: SD卡 (3)Write</li>\n<li>将SD卡插入并启动树莓派并等待至少 10 秒。</li>\n<li>更新成功后，树莓派绿色LED将稳定闪烁，如果接了显示器，则会显示绿色。</li>\n<li>关闭树莓派电源并取出 SD 卡。 </li>\n</ol>\n<h2 id=\"3-通过Raspberry-Pi-Imager烧写LibreELEC系统\"><a href=\"#3-通过Raspberry-Pi-Imager烧写LibreELEC系统\" class=\"headerlink\" title=\"3.通过Raspberry Pi Imager烧写LibreELEC系统\"></a>3.通过Raspberry Pi Imager烧写LibreELEC系统</h2><h3 id=\"3-1-格式化SD卡\"><a href=\"#3-1-格式化SD卡\" class=\"headerlink\" title=\"3.1 格式化SD卡\"></a>3.1 格式化SD卡</h3><p>烧写系统前需要将SD卡格式化，具体格式化过程参照下图：</p>\n<h3 id=\"3-2-烧写LibreELEC\"><a href=\"#3-2-烧写LibreELEC\" class=\"headerlink\" title=\"3.2 烧写LibreELEC\"></a>3.2 烧写LibreELEC</h3><h3 id=\"3-3-LibreELEC设置\"><a href=\"#3-3-LibreELEC设置\" class=\"headerlink\" title=\"3.3 LibreELEC设置\"></a>3.3 LibreELEC设置</h3><p>LibreELEC系统烧录完成之后，将SD卡插入树莓派，使用Micro HDMI将树莓派连接到显示器后上电。</p>\n<p>等待系统加载完成，加载完成后按照导引完成设置。</p>\n<p>树莓派插入刚安装的系统并开机，进入图中页面，进行网络和SSH的配置。</p>\n<p><strong>注：</strong></p>\n<p>如果将系统设置为中文，需要先将字体设置为 <a style=\"font-size:18px; color:'red';\">Arial</a>，否则会出现乱码；</p>\n<p>System ➤ Interface ➤ Skin ➤ Fonts ➤ Arial</p>\n<p><img src=\"https://www.xiangquba.cn/wp-content/uploads/2020/03/基于树莓派的LibreELEC安装4-1024x576.png\" alt=\"img\"></p>\n<h2 id=\"4-安装过程中出现的问题\"><a href=\"#4-安装过程中出现的问题\" class=\"headerlink\" title=\"4.安装过程中出现的问题\"></a>4.安装过程中出现的问题</h2><h3 id=\"4-1-Error-in-mount-storage\"><a href=\"#4-1-Error-in-mount-storage\" class=\"headerlink\" title=\"4.1 Error in mount_storage\"></a>4.1 Error in mount_storage</h3><p>原因分析：可能是在使用Raspberry pi imager 烧写完成之后校验失败，然后直接上电使用。</p>\n<p>解决方法：重新烧写</p>\n<h3 id=\"4-2-Raspberry-pi-imager-校验失败\"><a href=\"#4-2-Raspberry-pi-imager-校验失败\" class=\"headerlink\" title=\"4.2 Raspberry pi imager 校验失败\"></a>4.2 Raspberry pi imager 校验失败</h3><p>原因分析：Unknown</p>\n<p>解决方法：重新格式化</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5.参考\"></a>5.参考</h2><p>1.<a href=\"https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#raspberry-pi-4-boot-eeprom\">Raspberry Pi Documentation - Raspberry Pi Hardware</a></p>\n<p>2.<a href=\"https://zhuanlan.zhihu.com/p/141068779\">用于各种用途的最佳树莓派操作系统 | Linux 中国 - 知乎 (zhihu.com)</a></p>\n","tags":["raspberry","Kodi","instruction"]},{"title":"正则表达式学习笔记","url":"/undefined/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>正则表达式（regular expression）描述了一种字符串匹配的模式（pattern）。正则表达式是由普通字符以及特殊字符构成的文字模式。</p>\n<p>构建正则表达式和写数学表达式一样，通过元字符和运算符将小的表达式构建为更大的表达式。</p>\n<span id=\"more\"></span>\n<h3 id=\"元字符\"><a href=\"#元字符\" class=\"headerlink\" title=\"元字符\"></a>元字符</h3><p>正则表达式主要依赖元字符， 元字符不代表其本身的含义而是具有特殊的含义。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>句号匹配任意单个字符除了换行符。</td>\n</tr>\n<tr>\n<td>[ ]</td>\n<td><code>字符种类</code>。匹配方括号内的任意字符。</td>\n</tr>\n<tr>\n<td><sup><a href=\"#fn_ \" id=\"reffn_ \"> </a></sup></td>\n<td>否定的字符种类。匹配除了方括号里的任意字符</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配&gt;=0个重复的在*号之前的字符。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配&gt;=1个重复的+号前的字符。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>标记?之前的字符为可选（0次或者1次）.</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配num个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td>\n</tr>\n<tr>\n<td>(xyz)</td>\n<td><code>字符集</code>，匹配与 xyz 完全相等的字符串.</td>\n</tr>\n<tr>\n<td>\\</td>\n<td></td>\n<td>或运算符，匹配符号前或后的字符.</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义字符,用于匹配一些保留的字符 `[ ] ( ) { } . * + ? ^ $ \\</td>\n<td>`</td>\n</tr>\n<tr>\n<td>^</td>\n<td>从开始行开始匹配.</td>\n</tr>\n<tr>\n<td>$</td>\n<td>从末端开始匹配.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"简写字符集\"><a href=\"#简写字符集\" class=\"headerlink\" title=\"简写字符集\"></a>简写字符集</h3><p>正则表达式提供一些常用的字符集简写。如下:</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>简写</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>除换行符外的所有字符</td>\n</tr>\n<tr>\n<td>\\\\w</td>\n<td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td>\n</tr>\n<tr>\n<td>\\\\W</td>\n<td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td>\n</tr>\n<tr>\n<td>\\\\d</td>\n<td>匹配数字： <code>[0-9]</code></td>\n</tr>\n<tr>\n<td>\\\\D</td>\n<td>匹配非数字： <code>[^\\d]</code></td>\n</tr>\n<tr>\n<td>\\\\s</td>\n<td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p&#123;Z&#125;]</code></td>\n</tr>\n<tr>\n<td>\\\\S</td>\n<td>匹配所有非空格字符： <code>[^\\s]</code></td>\n</tr>\n<tr>\n<td>\\\\f</td>\n<td>匹配一个换页符</td>\n</tr>\n<tr>\n<td>\\\\n</td>\n<td>匹配一个换行符</td>\n</tr>\n<tr>\n<td>\\\\r</td>\n<td>匹配一个回车符</td>\n</tr>\n<tr>\n<td>\\\\t</td>\n<td>匹配一个制表符</td>\n</tr>\n<tr>\n<td>\\\\v</td>\n<td>匹配一个垂直制表符</td>\n</tr>\n<tr>\n<td>\\\\p</td>\n<td>匹配 CR/LF（等同于 <code>\\r\\n</code>），用来匹配 DOS 行终止符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"定位符\"><a href=\"#定位符\" class=\"headerlink\" title=\"定位符\"></a>定位符</h3><p>​    定位符能将正则表达式固定到行首或行尾。同时能将正则表达式固定在单词内部，单词的开头或结尾。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">^</td>\n<td style=\"text-align:left\">匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \\n 或 \\r 之后的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">$</td>\n<td style=\"text-align:left\">匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \\n 或 \\r 之前的位置匹配。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\b</td>\n<td style=\"text-align:left\">匹配一个单词边界，即字与空格间的位置。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\\\B</td>\n<td style=\"text-align:left\">非单词边界匹配。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"修饰符（标志）\"><a href=\"#修饰符（标志）\" class=\"headerlink\" title=\"修饰符（标志）\"></a>修饰符（标志）</h3><p>​    标志也叫模式修正符，因为它可以用来修改表达式的搜索结果。 这些标志可以任意的组合使用，它也是整个正则表达式的一部分。标记不写在正则表达式里，标记位于表达式之外，格式如下：</p>\n<p><code>/pattern/flags</code></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>忽略大小写。</td>\n</tr>\n<tr>\n<td>g</td>\n<td>全局搜索。</td>\n</tr>\n<tr>\n<td>m</td>\n<td>多行修饰符：锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"运算优先级\"><a href=\"#运算优先级\" class=\"headerlink\" title=\"运算优先级\"></a>运算优先级</h3><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。</p>\n<p>相同优先级的从左到右进行运算，不同优先级的运算先高后低。下表从最高到最低说明了各种正则表达式运算符的优先级顺序：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">运算符</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\">转义符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(), (?:), (?=), []</td>\n<td style=\"text-align:left\">圆括号和方括号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*, +, ?, {n}, {n,}, {n,m}</td>\n<td style=\"text-align:left\">限定符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">^, $, \\任何元字符、任何字符</td>\n<td style=\"text-align:left\">定位点和序列（即：位置和顺序）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\</td>\n<td style=\"text-align:left\"></td>\n<td>替换，”或”操作 字符具有高于替换运算符的优先级，使得”m\\</td>\n<td>food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m\\</td>\n<td>f)ood”。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"零宽度断言\"><a href=\"#零宽度断言\" class=\"headerlink\" title=\"零宽度断言\"></a>零宽度断言</h3><p>先行断言和后发断言都属于<strong>非捕获簇</strong>（不捕获文本 ，也不针对组合计进行计数）。 先行断言用于判断所匹配的格式是否在另一个确定的格式之前，匹配结果不包含该确定格式（仅作为约束）。</p>\n<h4 id=\"正先行断言\"><a href=\"#正先行断言\" class=\"headerlink\" title=\"?=... 正先行断言\"></a><code>?=...</code> 正先行断言</h4><p><code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着 <code>?=...</code>定义的表达式。</p>\n<p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用 <code>()</code>。在括号内部使用一个问号和等号： <code>(?=...)</code>。</p>\n<p>正先行断言的内容写在括号中的等号后面。 例如，表达式 <code>(T|t)he(?=\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\\sfat)</code> ，即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;(T|t)he(?=\\sfat)&quot;</span> =&gt; The fat <span class=\"keyword\">cat</span> sat <span class=\"keyword\">on</span> the <span class=\"keyword\">mat</span>.</span><br></pre></td></tr></table></figure>\n<h4 id=\"负先行断言\"><a href=\"#负先行断言\" class=\"headerlink\" title=\"?!... 负先行断言\"></a><code>?!...</code> 负先行断言</h4><p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为 其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和 <code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>。</p>\n<p>表达式 <code>(T|t)he(?!\\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;(T|t)he(?!\\sfat)&quot;</span> =&gt; The fat <span class=\"keyword\">cat</span> sat <span class=\"keyword\">on</span> the <span class=\"keyword\">mat</span>.</span><br></pre></td></tr></table></figure>\n<h4 id=\"lt-正后发断言\"><a href=\"#lt-正后发断言\" class=\"headerlink\" title=\"?&lt;= ... 正后发断言\"></a><code>?&lt;= ...</code> 正后发断言</h4><p>正后发断言 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;=(T|t)he\\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或 <code>the</code>。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;(?&lt;=(T|t)he\\s)(fat|mat)&quot;</span> =&gt; The fat <span class=\"keyword\">cat</span> sat <span class=\"keyword\">on</span> the <span class=\"keyword\">mat</span>.</span><br></pre></td></tr></table></figure>\n<h4 id=\"lt-负后发断言\"><a href=\"#lt-负后发断言\" class=\"headerlink\" title=\"?&lt;!... 负后发断言\"></a><code>?&lt;!...</code> 负后发断言</h4><p>负后发断言 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。 例如，表达式 <code>(?&lt;!(T|t)he\\s)(cat)</code> 匹配 <code>cat</code>，且其前不跟着 <code>The</code> 或 <code>the</code>。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;(?&lt;!(T|t)he\\s)(cat)&quot;</span> =&gt; The <span class=\"keyword\">cat</span> sat <span class=\"keyword\">on</span> <span class=\"keyword\">cat</span>.</span><br></pre></td></tr></table></figure>\n<h3 id=\"贪婪和惰性匹配（Greedy-vs-lazy-）\"><a href=\"#贪婪和惰性匹配（Greedy-vs-lazy-）\" class=\"headerlink\" title=\"贪婪和惰性匹配（Greedy vs lazy ）\"></a>贪婪和惰性匹配（Greedy vs lazy ）</h3><p><strong>*</strong> 匹配&gt;=0个重复的在*号之前的字符。</p>\n<p><strong>+</strong> 匹配&gt;=1个重复的+号前的字符。</p>\n<p><strong>?</strong> 标记?之前的字符为可选（0次或者1次）。</p>\n<p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>\n<p><p style= \"font-family:Consolas;font-size:20px;\">\n  To be continued...  \n</p></p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a>示例 1</h3><p>提取以下文本内容中的emoji表情</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_card&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/zh-hans/emoji/%F0%9F%90%AE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_font&quot;</span>&gt;</span>🐮<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/zh-hans/emoji/%F0%9F%90%AE&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_name truncate&quot;</span>&gt;</span>奶牛头<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_symbol&quot;</span> <span class=\"attr\">data-clipboard-text</span>=<span class=\"string\">&quot;🐮&quot;</span>&gt;</span>复制<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;col&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_card&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/zh-hans/emoji/%F0%9F%90%82&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_font&quot;</span>&gt;</span>🐂<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/zh-hans/emoji/%F0%9F%90%82&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_name truncate&quot;</span>&gt;</span>公牛<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;emoji_symbol&quot;</span> <span class=\"attr\">data-clipboard-text</span>=<span class=\"string\">&quot;🐂&quot;</span>&gt;</span>复制<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例 2\"></a>示例 2</h3><p>删除resource_path(),保留os.path.join(“audios”, “j.mp3”)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">resource_path(os.path.join(<span class=\"string\">&quot;audios&quot;</span>, <span class=\"string\">&quot;j.mp3&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p>1.<a href=\"https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md#learn-regex\">learn-regex</a> </p>\n<p>2.<a href=\"https://www.runoob.com/regexp/regexp-tutorial.html\">正则表达式-教程</a></p>\n","categories":["Learning Note"],"tags":["reg"]},{"title":"SVM(Support Vector Machine)——交叉验证","url":"/undefined/SVM-1/","content":"<p>[TOC]</p>\n<h2 id=\"概述\">概述</h2>\n<p>​\tSVM（支持向量机）是一种常用的机器学习算法，其中交叉验证用于评估模型在新数据上的表现。交叉验证是一个常用的模型选择和性能评估技巧，它将原始数据集划分为多个互相重叠的子集，其中一部分数据用于模型训练，另一部分数据用于模型测试和验证。通过测试集的效果评估，可以评估模型的性能和泛化能力。而交叉验证就是一种更加复杂的测试集划分方式，可以让更好地评估SVM模型的性能。</p>\n<span id=\"more\"></span>\n<p>​\t下面介绍几种常用的SVM交叉验证数据集划分方法及其特点：</p>\n<ol>\n<li>\n<p>K折交叉验证法(K-Fold Cross-Validation)</p>\n</li>\n<li>\n<p>留一交叉验证法(Leave-One-Out Cross-Validation)</p>\n</li>\n<li>\n<p>分层随机交叉验证法(Stratified Random Sampling Cross-Validation)</p>\n</li>\n</ol>\n<p>交叉验证是评估SVM模型性能的有效方法，最常用的是K折交叉验证法，可以减轻模型评估的随机性。</p>\n<h2 id=\"K折交叉验证法-K-Fold-Cross-Validation\">K折交叉验证法(K-Fold Cross-Validation)</h2>\n<p>​\tK折交叉验证是一种广泛使用的交叉验证方法，其中数据集被随机分为K个互不相交的子集。在每个迭代中，使用K-1个子集进行训练，并使用剩余的子集进行测试。这个过程重复K次，确保每个子集都被用于测试一次，并且每个子集被用于训练 K-1 次。最终，通过计算K次测试的平均值得到模型的性能指标。K折交叉验证法比简单交叉验证法更可以减少模型评估的随机性以及评估模型的鲁棒性，更能反映模型性能的稳定性。在K折交叉验证法中，将原有数据集分成K份，一般K取值为10。</p>\n<p><strong>优点</strong>：每一个样本数据都即被用作训练数据，也被用作测试数据。避免的过度学习和欠学习状态的发生，得到的结果比较具有说服力。</p>\n<p><strong>缺点</strong>：不能用于不平衡的数据集。不适合于时间序列数据。对于时间序列数据，样本的顺序很重要。但在K-Fold交叉验证法中，样本是按随机顺序选择的。</p>\n<p>下面是使用MATLAB演示K折交叉验证的示例代码：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">load fisheriris; <span class=\"comment\">% 导入数据集</span></span><br><span class=\"line\">class = grp2idx(species); <span class=\"comment\">% 将类别名称转换成数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 将数据集随机分为K份</span></span><br><span class=\"line\">K = <span class=\"number\">5</span>; <span class=\"comment\">% K折验证的折数</span></span><br><span class=\"line\">cvpart = cvpartition(class, <span class=\"string\">&#x27;kfold&#x27;</span>, K);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 迭代进行K次交叉验证</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>: K  </span><br><span class=\"line\">  trainIndex = cvpart.training(<span class=\"built_in\">i</span>);</span><br><span class=\"line\">  testIndex = cvpart.test(<span class=\"built_in\">i</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">% 训练模型</span></span><br><span class=\"line\">  SVMModel = fitcsvm(meas(trainIndex,:), class(trainIndex));</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">% 测试模型，计算测试误差</span></span><br><span class=\"line\">  [predictedLabels, score] = predict(SVMModel, meas(testIndex,:));</span><br><span class=\"line\">  loss(<span class=\"built_in\">i</span>) = lossClass(predictedLabels, class(testIndex));</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 对K次交叉验证的测试误差求平均值作为模型泛化误差</span></span><br><span class=\"line\">avgLoss = <span class=\"built_in\">mean</span>(loss);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"留一交叉验证法（LOOCV）\">留一交叉验证法（LOOCV）</h2>\n<p>留一交叉验证法（LOOCV）是一种特殊的 K 折交叉验证方法，其中 K 等于数据集中的样本数。在每个迭代中，留下一个数据样本进行测试并使用其余的样本来训练模型，这个过程重复 N 次，N是数据集中的样本数。最终，通过计算 N 次测试的平均值得到模型的性能指标。</p>\n<p>留一交叉验证的具体流程如下：</p>\n<ol>\n<li>输入数据集和算法模型；</li>\n<li>对于每一个样本，将当前样本留出作为测试数据，其余样本作为训练数据；</li>\n<li>用训练数据集训练模型；</li>\n<li>使用测试样本计算模型测试误差；</li>\n<li>重复 2-4 步，直到所有样本都被用于测试一次；</li>\n<li>对所有的测试误差求平均值，作为模型的性能指标。</li>\n</ol>\n<p>具体流程和 K 折交叉验证类似，但 K 值等于样本数，所以 LOOCV 会迭代 N 次，比 K 折交叉验证更加耗时，但可以更好的评估模型的泛化能力。</p>\n<p>下面是使用MATLAB演示留一交叉验证的示例代码：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">load fisheriris; <span class=\"comment\">% 导入数据集</span></span><br><span class=\"line\">class = grp2idx(species); <span class=\"comment\">% 将类别名称转换成数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 为每个样本执行留一交叉验证</span></span><br><span class=\"line\">N = <span class=\"built_in\">size</span>(meas, <span class=\"number\">1</span>); <span class=\"comment\">% 样本数量</span></span><br><span class=\"line\">loss = <span class=\"built_in\">zeros</span>(N, <span class=\"number\">1</span>); <span class=\"comment\">% 存储测试误差</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:N  </span><br><span class=\"line\">  <span class=\"comment\">% 拆分数据，将第 i 个样本留出用于测试</span></span><br><span class=\"line\">  testIndex = <span class=\"built_in\">i</span>;</span><br><span class=\"line\">  trainIndex = [<span class=\"number\">1</span>:<span class=\"built_in\">i</span><span class=\"number\">-1</span>, <span class=\"built_in\">i</span>+<span class=\"number\">1</span>:N];</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">% 训练模型</span></span><br><span class=\"line\">  SVMModel = fitcsvm(meas(trainIndex,:), class(trainIndex));</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">% 测试模型，计算测试误差</span></span><br><span class=\"line\">  [predictedLabels, score] = predict(SVMModel, meas(testIndex,:));</span><br><span class=\"line\">  loss(<span class=\"built_in\">i</span>) = lossClass(predictedLabels, class(testIndex));</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">% 计算平均测试误差</span></span><br><span class=\"line\">avgLoss = <span class=\"built_in\">mean</span>(loss);</span><br></pre></td></tr></table></figure>\n<p><strong>优点</strong>：为了提高模型的可靠性，每个分类器或模型都使用几乎所有的样本来训练，因此尽可能地接近样本。这种方法可以减少随机因素的影响，使整个实验过程具有可重复性。最终得出的结果更加可靠。</p>\n<p><strong>缺点</strong>：计算成本高，当N非常大时，计算耗时,因为需要建立的模型数量与原始数据样本数量相同。只适合于小样本数据集。</p>\n<h2 id=\"分层随机交叉验证法-Stratified-Random-Sampling-Cross-Validation\">分层随机交叉验证法(Stratified Random Sampling Cross-Validation)</h2>\n<p>​\t分层 K 折交叉验证（Stratified K-Fold Cross Validation）是 K 折交叉验证的一种改进方法，特别适用于样本不均衡（即各类别样本数量不相等）的情况下。它的主要思想是，在将数据集分成 K 个子集之前，要先对数据集进行分层（Stratification）处理，以确保每个子集中，不同类别的样本数量比例尽可能保持与原始数据集中相同的比例。</p>\n<p>分层 K 折交叉验证的详细流程：</p>\n<ol>\n<li>将数据集分成 K 个子集，每个子集包含尽量相同的样本数量。</li>\n<li>对于数据集中每个类别，计算其在原始数据集中占总样本数量的比例。假设该比例为 p，则在每个子集中，该类别的样本数量应该也占该子集总样本数的比例 p。</li>\n<li>对每个子集，将剩余的 K-1 个子集作为训练数据，选定该子集作为测试数据，并使用训练数据训练模型。</li>\n<li>计算测试误差，将测试误差与其他子集的测试误差平均，以获取模型的性能指标。</li>\n<li>重复 3-4 步，直到所有子集都被用于测试一次。</li>\n<li>计算所有子集的性能指标的平均值，作为模型的最终性能指标。</li>\n</ol>\n<p>分层 K 折交叉验证的主要优点是可以解决数据集中类别不平衡的问题，因为它能够确定每个子集中不同类别样本的比例，从而减少了模型偏向其中一个或几个类别的情况。此外，它保持了原始数据集中各类别间的比例，比另一种 K 折交叉验证方法更可靠，因为分层处理可以避免某个类别全部出现在一个子集中的情况发生。</p>\n<p><strong>优点</strong> ：对不平衡的数据有很好的作用。分层交叉验证中的每一个Fold都会有一个所有类别的数据代表，其比例与整个数据集相同。</p>\n<p><strong>缺点</strong> ：不适用于时间序列数据。对于时间序列数据，样本的顺序很重要。但在分层交叉验证中，样本是按随机顺序选择的。</p>\n<h2 id=\"matlab交叉验证的分区数据函数cvpartition\">matlab交叉验证的分区数据函数cvpartition</h2>\n<p>MATLAB 的 <code>cvpartition</code> 函数可以用于生成交叉验证的数据集划分。交叉验证是一个常用的模型选择和性能评估技巧，它将原始数据集划分为多个互相重叠的子集，其中一部分数据用于模型训练，另一部分数据用于模型测试和验证。</p>\n<p><code>cvpartition</code> 函数可以生成交叉验证的数据集划分对象，使得子集的划分具有良好的统计性质。例如，可以使用 <code>cvpartition</code> 函数将原始数据集划分为训练集和测试集，可以划分为 $k$ 折交叉验证集（$k$-fold cross-validation）等等。</p>\n<p><code>cvpartition</code> 函数常用的语法格式为：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">C</span> = cvpartition(N,<span class=\"string\">&#x27;Name&#x27;</span>,Value)</span><br></pre></td></tr></table></figure>\n<p>其中，<code>N</code> 是原始数据集的大小，<code>Name/Value</code> 表示参数名和参数值。常用的参数名称和含义如下：</p>\n<ul>\n<li><code>KFold</code>：指定 $k$ 折交叉验证的数量，即将原始数据集划分为 $k$ 个子集，默认值为 10。</li>\n<li><code>Holdout</code>：指定留存数据集的比例，例如 0.3 表示将原始数据集划分为训练集和测试集，训练集占 70%，测试集占 30%。</li>\n<li><code>LeaveOut</code>：指定每次留一法交叉验证（leave-one-out cross-validation）的开关，如果设置为 <code>on</code>，则将原始数据集划分为 $n$ 个子集，其中 $n$ 是原始数据集大小，每次从中随机选择一个数据点作为测试集，其他数据点作为训练集，训练 $n$ 次模型并分别测试，计算均值和方差。默认值为 <code>off</code>。</li>\n</ul>\n<p><code>cvpartition</code> 函数返回的对象 <code>C</code> 包含以下属性：</p>\n<ul>\n<li><code>C.NumTestSets</code>：测试数据集的数量。</li>\n<li><code>C.TrainSize</code>：每个测试数据集的训练集大小。</li>\n<li><code>C.TestSize</code>：每个测试数据集的测试集大小。</li>\n<li><code>C.NumObservations</code>：原始数据集的大小。</li>\n<li><code>C.training(i)</code>：第 $i$ 个训练数据集的下标。</li>\n<li><code>C.test(i)</code>：第 $i$ 个测试数据集的下标。</li>\n</ul>\n<p>详细参考：<a href=\"https://ww2.mathworks.cn/help/stats/cvpartition.html\">Partition data for cross-validation - MATLAB - MathWorks 中国</a></p>\n"},{"title":"Python网络编程","url":"/undefined/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","content":"<h2 id=\"1-背景\">1.背景</h2>\n<p>​\t局域网上连接有两个设备：树莓派、PC。树莓派仅有供电没有连接其他外设，树莓派上定时执行爬虫脚本，需要经常查看爬虫日志信息检查运行状态。其中一个解决方案就是：通过TCP/IP协议，树莓派作为服务器，PC作为服务端，按需将日志信息发送到PC上。实现前述需求使用的技术是：Python网络编程。</p>\n<span id=\"more\"></span>\n<p>硬件设备连接示意如下图所示：</p>\n<p><img src=\"image-20230615170326757.png\" alt=\"示意图\"></p>\n<p>下文是对相关基本概念和具体实现的介绍。</p>\n<h2 id=\"2-Python网络编程\">2.Python网络编程</h2>\n<p>首先，介绍一些网络编程方面的背景资料，然后介绍如何使用Python的一些模块来创建网络化的应用程序。</p>\n<h3 id=\"2-1-客户端-服务器\">2.1 客户端/服务器</h3>\n<p>客户端/服务器架构（Client/Server Architecture）是一种分布式计算模型，它将系统划分为客户端和服务器两个部分，客户端和服务器通过网络进行通信，实现协同工作。</p>\n<p>在客户端/服务器架构中，客户端是指向服务器请求服务的计算机或设备，它通过网络连接到服务器，向服务器发送请求并接收响应。服务器是指提供服务的计算机或设备，它接收客户端的请求并返回响应结果。客户端和服务器之间通过网络连接进行通信，客户端向服务器发送请求并等待响应，服务器接收请求并处理请求，最终将响应结果返回给客户端。</p>\n<p>客户端/服务器架构广泛应用于各种计算机系统和应用程序中，包括Web应用程序、数据库系统、文件传输协议、邮件系统、即时通讯工具等等。</p>\n<p>客户端/服务器对应于背景中问题的具体实例就是：Raspberry作为服务器存储着需要发送的日志信息，PC作为客户端发起连接请求，raspberry和pc完成网络连接后，pc发出数据请求，raspberry通过网络协议将数据发送到pc，数据发送完成后断开连接。</p>\n<h3 id=\"2-2-TCP-IP协议\">2.2 TCP/IP协议</h3>\n<p>网络中的设备要想实现互相通信，需要统一的通信协议。早期的计算机网络，都是由各厂商自己规定一套协议，IBM、Apple和Microsoft都有各自的网络协议，互不兼容。为了把全世界的所有不同类型的计算机都连接起来，就必须规定一套全球通用的协议，为了实现互联网这个目标，互联网协议簇（Internet Protocol Suite）就是通用协议标准。因为互联网协议包含了上百种协议标准，但是最重要的两个协议是TCP和IP协议，所以，大家把互联网的协议简称TCP/IP协议。</p>\n<p>IP协议负责把数据从一台计算机通过网络发送到另一台计算机。数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>\n<p>TCP协议则是建立在IP协议之上的。TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。</p>\n<p>端口和IP地址：在两台计算机通信时，只发IP地址是不够的，因为同一台计算机上跑着多个网络程序。一个TCP报文来了之后，到底是交给浏览器还是QQ，就需要端口号来区分。每个网络程序都向操作系统申请唯一的端口号，这样，两个进程在两台计算机之间建立网络连接就需要各自的IP地址和各自的端口号。一个进程也可能同时与多个计算机建立链接，因此它会申请很多端口。</p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1016959663602400/1017787663253120\">TCP/IP简介 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>\n<h3 id=\"2-3-通信端点、套接字\">2.3 通信端点、套接字</h3>\n<p>通信端点是指网络中的通信双方，它包括本地端点和远程端点。本地端点是指套接字所在主机的IP地址和端口号，远程端点是指连接到本地端点的另一台主机的IP地址和端口号。在套接字通信过程中，本地端点和远程端点进行数据交换，实现数据传输。</p>\n<p>套接字（Socket）是一种用于在网络中传输数据的通信机制，它提供了一种通信端点，用于标识网络中的通信双方。套接字是在应用层和传输层之间的接口，它定义了通信的协议、IP地址和端口号等信息。</p>\n<p>在计算机网络中，每个主机都有一个唯一的IP地址，用于标识主机在网络中的位置。端口号用于标识主机中的进程。套接字通过IP地址和端口号来标识网络中的通信端点。</p>\n<p>套接字和通信端点是网络通信中非常重要的概念，它们是实现网络通信的基础。通过套接字和通信端点，应用程序可以在网络中进行数据传输，实现不同计算机之间的数据交换。</p>\n<h3 id=\"2-4-代码实现\">2.4 代码实现</h3>\n<p><strong>服务端</strong></p>\n<p><img src=\"image-20230616102346969.png\" alt=\"服务端伪代码\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    网络通信服务器</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">log_file = <span class=\"string\">r&quot;D:\\Code\\TimeVisual\\ToolPy\\chongbuluo.log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tcplink</span>(<span class=\"params\">sock, addr</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Accept new connection from %s:%s...&#x27;</span> % addr)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;服务器:发送数据包&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 打开文件并发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(log_file, <span class=\"string\">&#x27;rb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">            data = f.read(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> data:</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">&quot;数据包发送完成&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            sock.sendall(data)</span><br><span class=\"line\">    sock.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Connection from %s:%s closed.&#x27;</span> % addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取以太网IPv4地址</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_ethernet_ipv4</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 创建套接字</span></span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class=\"line\">        <span class=\"comment\"># 连接到百度服务器</span></span><br><span class=\"line\">        s.connect((<span class=\"string\">&#x27;www.baidu.com&#x27;</span>, <span class=\"number\">80</span>))</span><br><span class=\"line\">        <span class=\"comment\"># 获取套接字的本地协议地址，即以太网IPv4地址</span></span><br><span class=\"line\">        ethernet_ipv4 = s.getsockname()[<span class=\"number\">0</span>]</span><br><span class=\"line\">        s.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ethernet_ipv4</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建一个基于IPv4和TCP协议的Socket</span></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"><span class=\"comment\"># 绑定监听的地址和端口</span></span><br><span class=\"line\">ethernet_ipv4 = get_ethernet_ipv4()</span><br><span class=\"line\"><span class=\"keyword\">if</span> ethernet_ipv4 <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ipv4:&#x27;</span>, ethernet_ipv4)</span><br><span class=\"line\">    s.bind((ethernet_ipv4, <span class=\"number\">9999</span>))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    s.bind((<span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"number\">9999</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开始监听端口</span></span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Waiting for connection...&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 等待连接</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 接受一个新连接:</span></span><br><span class=\"line\">    sock, addr = s.accept()</span><br><span class=\"line\">    <span class=\"comment\"># 创建新线程来处理TCP连接:</span></span><br><span class=\"line\">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class=\"line\">    t.start()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>客户端</strong></p>\n<p><img src=\"image-20230616102428775.png\" alt=\"客户端伪代码\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    网络通信客户端</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">recv_log = <span class=\"string\">r&quot;D:\\Code\\TimeVisual\\ToolPy\\recv.log&quot;</span></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\"></span><br><span class=\"line\">connected = <span class=\"literal\">False</span></span><br><span class=\"line\">connecting_cnt = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">not</span> connected <span class=\"keyword\">and</span> connecting_cnt &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 建立连接:</span></span><br><span class=\"line\">        s.connect((<span class=\"string\">&#x27;192.168.1.105&#x27;</span>, <span class=\"number\">9999</span>))</span><br><span class=\"line\">        connected = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> socket.error:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接失败,1秒后重试...&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">    connecting_cnt += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"comment\"># 接受数据文件</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;开始接收数据包...&quot;</span>)</span><br><span class=\"line\">buffer = []</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 每次最多接收1k字节:</span></span><br><span class=\"line\">    d = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> d:</span><br><span class=\"line\">        buffer.append(d)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"comment\"># 把接收的数据写入文件:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(recv_log, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> d <span class=\"keyword\">in</span> buffer:</span><br><span class=\"line\">        f.write(d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;数据接收完成!&quot;</span>)</span><br><span class=\"line\">s.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>扩展阅读</code></p>\n<p><a href=\"http://shouce.jb51.net/core-python-2e/19.html\">网络编程 | Python 核心编程 第二版 (jb51.net)</a></p>\n"}]